
GPS_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800b7b0  0800b7b0  0000c7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd50  0800bd50  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd50  0800bd50  0000cd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd58  0800bd58  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd58  0800bd58  0000cd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd5c  0800bd5c  0000cd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bd60  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  200001d8  0800bf38  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  0800bf38  0000d690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e1f  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db8  00000000  00000000  00024027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00026de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001004  00000000  00000000  00028270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028541  00000000  00000000  00029274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017437  00000000  00000000  000517b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104c72  00000000  00000000  00068bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d85e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006db0  00000000  00000000  0016d8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00174654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b794 	.word	0x0800b794

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800b794 	.word	0x0800b794

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0b2      	sub	sp, #200	@ 0xc8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f001 f894 	bl	8002166 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f913 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 faa9 	bl	8001598 <MX_GPIO_Init>
  MX_DMA_Init();
 8001046:	f000 fa7d 	bl	8001544 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800104a:	f000 f9e3 	bl	8001414 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800104e:	f000 fa2d 	bl	80014ac <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8001052:	f000 f98f 	bl	8001374 <MX_TIM5_Init>
  MX_RTC_Init();
 8001056:	f000 f955 	bl	8001304 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
/* ============== Activate Power Supply for external Components ===========*/
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
/* ========================================================================*/
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)		//Mit Standby-Flag prüfen ob Programm aus standby erwacht ist
 800105a:	4b73      	ldr	r3, [pc, #460]	@ (8001228 <main+0x1f4>)
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001062:	2b00      	cmp	r3, #0
 8001064:	d009      	beq.n	800107a <main+0x46>
  {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // Standby-Flag löschen
 8001066:	4b70      	ldr	r3, [pc, #448]	@ (8001228 <main+0x1f4>)
 8001068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800106c:	619a      	str	r2, [r3, #24]
      HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);  // RTC Wakeup deaktivieren
 800106e:	486f      	ldr	r0, [pc, #444]	@ (800122c <main+0x1f8>)
 8001070:	f003 f842 	bl	80040f8 <HAL_RTCEx_DeactivateWakeUpTimer>
      state = WAKE;							//In Zustand "WAKE" gehen
 8001074:	4b6e      	ldr	r3, [pc, #440]	@ (8001230 <main+0x1fc>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch (state)
 800107a:	4b6d      	ldr	r3, [pc, #436]	@ (8001230 <main+0x1fc>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b06      	cmp	r3, #6
 8001080:	f200 80c8 	bhi.w	8001214 <main+0x1e0>
 8001084:	a201      	add	r2, pc, #4	@ (adr r2, 800108c <main+0x58>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	080010a9 	.word	0x080010a9
 8001090:	080010b1 	.word	0x080010b1
 8001094:	080010e7 	.word	0x080010e7
 8001098:	08001145 	.word	0x08001145
 800109c:	0800119f 	.word	0x0800119f
 80010a0:	080011c3 	.word	0x080011c3
 80010a4:	080011dd 	.word	0x080011dd
	  {
	  case 0:
		  state = WAKE;
 80010a8:	4b61      	ldr	r3, [pc, #388]	@ (8001230 <main+0x1fc>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
		  break;
 80010ae:	e0b1      	b.n	8001214 <main+0x1e0>
	  case WAKE:
		  HAL_TIM_Base_Start_IT(&htim5);			//Timer für Errortimeout im Interruptmodus starten
 80010b0:	4860      	ldr	r0, [pc, #384]	@ (8001234 <main+0x200>)
 80010b2:	f003 f925 	bl	8004300 <HAL_TIM_Base_Start_IT>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);	//Stromversorgung der Antennen einschalten
 80010b6:	2201      	movs	r2, #1
 80010b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010bc:	485e      	ldr	r0, [pc, #376]	@ (8001238 <main+0x204>)
 80010be:	f001 fdf1 	bl	8002ca4 <HAL_GPIO_WritePin>
		  HAL_Delay(5000);
 80010c2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80010c6:	f001 f8bf 	bl	8002248 <HAL_Delay>
		  Config_GPS_Modul();						//GPS-Modul konfigurieren
 80010ca:	f000 fb79 	bl	80017c0 <Config_GPS_Modul>
		  HAL_UART_Receive_IT(&huart3, &rx_char, 1);	//Auf UART3(GPS) zuhören im Interruptmodus
 80010ce:	2201      	movs	r2, #1
 80010d0:	495a      	ldr	r1, [pc, #360]	@ (800123c <main+0x208>)
 80010d2:	485b      	ldr	r0, [pc, #364]	@ (8001240 <main+0x20c>)
 80010d4:	f003 ff24 	bl	8004f20 <HAL_UART_Receive_IT>
		  answerRecieved = 0;						//Antwortflag reseten
 80010d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001244 <main+0x210>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		  state = GPS;								//In GPS Zustand wechseln
 80010de:	4b54      	ldr	r3, [pc, #336]	@ (8001230 <main+0x1fc>)
 80010e0:	2205      	movs	r2, #5
 80010e2:	701a      	strb	r2, [r3, #0]
		  break;
 80010e4:	e096      	b.n	8001214 <main+0x1e0>
	  case SEND:
		  if(!answerRecieved){				//Prüfen ob bereits Antwort empfangen wurde
 80010e6:	4b57      	ldr	r3, [pc, #348]	@ (8001244 <main+0x210>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 808d 	bne.w	800120a <main+0x1d6>
		  uint8_t atCommand1[sizeof(LoraPayload) + 20];		//Command Array definieren
		  snprintf(atCommand1, sizeof(atCommand1), "AT+SEND=1:1:%s\r\n", LoraPayload); //Command Array mit Send-Befehl und Payload füllen
 80010f0:	4638      	mov	r0, r7
 80010f2:	4b55      	ldr	r3, [pc, #340]	@ (8001248 <main+0x214>)
 80010f4:	4a55      	ldr	r2, [pc, #340]	@ (800124c <main+0x218>)
 80010f6:	21bb      	movs	r1, #187	@ 0xbb
 80010f8:	f006 febe 	bl	8007e78 <sniprintf>
		  memset(LoraPayload, 0, sizeof(LoraPayload));	//Hilfspuffer für Payload reseten
 80010fc:	22a7      	movs	r2, #167	@ 0xa7
 80010fe:	2100      	movs	r1, #0
 8001100:	4851      	ldr	r0, [pc, #324]	@ (8001248 <main+0x214>)
 8001102:	f006 ff50 	bl	8007fa6 <memset>
		  stateAnswer = SEND_ANSWER;					//Antwortszustand für Antworten vom AT+SEND command setzen
 8001106:	4b52      	ldr	r3, [pc, #328]	@ (8001250 <main+0x21c>)
 8001108:	2203      	movs	r2, #3
 800110a:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 800110c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001110:	f001 f89a 	bl	8002248 <HAL_Delay>
		  HAL_UART_Receive_IT(&huart1, &rxByte, 1);		//An UART1 (LoRa) zuhören im Interruptmodus starten
 8001114:	2201      	movs	r2, #1
 8001116:	494f      	ldr	r1, [pc, #316]	@ (8001254 <main+0x220>)
 8001118:	484f      	ldr	r0, [pc, #316]	@ (8001258 <main+0x224>)
 800111a:	f003 ff01 	bl	8004f20 <HAL_UART_Receive_IT>
		  HAL_UART_Transmit(&huart1, atCommand1, 14 + GpsSize * 2 - 1,  HAL_MAX_DELAY);		//Command Array an UART1 (LoRa) senden
 800111e:	4b4f      	ldr	r3, [pc, #316]	@ (800125c <main+0x228>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	3307      	adds	r3, #7
 8001124:	b29b      	uxth	r3, r3
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	b29b      	uxth	r3, r3
 800112a:	3b01      	subs	r3, #1
 800112c:	b29a      	uxth	r2, r3
 800112e:	4639      	mov	r1, r7
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	4848      	ldr	r0, [pc, #288]	@ (8001258 <main+0x224>)
 8001136:	f003 fe65 	bl	8004e04 <HAL_UART_Transmit>
		  HAL_Delay(500);
 800113a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800113e:	f001 f883 	bl	8002248 <HAL_Delay>
		  }
		  break;
 8001142:	e062      	b.n	800120a <main+0x1d6>
	  case JOIN:
		  HAL_UART_Receive_IT(&huart1, &rxByte, 1);		//An UART1 (LoRa) zuhören im Interruptmodus starten
 8001144:	2201      	movs	r2, #1
 8001146:	4943      	ldr	r1, [pc, #268]	@ (8001254 <main+0x220>)
 8001148:	4843      	ldr	r0, [pc, #268]	@ (8001258 <main+0x224>)
 800114a:	f003 fee9 	bl	8004f20 <HAL_UART_Receive_IT>
		  HAL_UART_Receive_IT(&huart3, &rx_char, 1);	//An UART3 (GPS) zuhören im Interruptmodus starten
 800114e:	2201      	movs	r2, #1
 8001150:	493a      	ldr	r1, [pc, #232]	@ (800123c <main+0x208>)
 8001152:	483b      	ldr	r0, [pc, #236]	@ (8001240 <main+0x20c>)
 8001154:	f003 fee4 	bl	8004f20 <HAL_UART_Receive_IT>
		  uint8_t atCommand6[] = "AT+JOIN=1\r\n";		//Command array initialisieren
 8001158:	4a41      	ldr	r2, [pc, #260]	@ (8001260 <main+0x22c>)
 800115a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800115e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  if(!answerRecieved){							//Prüfen ob bereits eine Antwort eines vorherigen durchlaufs empfangen wurde um nicht durchgehend wieder zu senden
 8001164:	4b37      	ldr	r3, [pc, #220]	@ (8001244 <main+0x210>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d150      	bne.n	800120e <main+0x1da>
		  HAL_Delay(1000);
 800116c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001170:	f001 f86a 	bl	8002248 <HAL_Delay>
		  stateAnswer = JOIN_ANSWER;					//Antwortszustand für Antworten vom AT+JOIN Command setzen
 8001174:	4b36      	ldr	r3, [pc, #216]	@ (8001250 <main+0x21c>)
 8001176:	2202      	movs	r2, #2
 8001178:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart1, &rxByte, 1);			//An UART1 (LoRa) zuhören im Interruptmodus starten
 800117a:	2201      	movs	r2, #1
 800117c:	4935      	ldr	r1, [pc, #212]	@ (8001254 <main+0x220>)
 800117e:	4836      	ldr	r0, [pc, #216]	@ (8001258 <main+0x224>)
 8001180:	f003 fece 	bl	8004f20 <HAL_UART_Receive_IT>
		  HAL_UART_Transmit(&huart1, atCommand6, sizeof(atCommand6) - 1, HAL_MAX_DELAY);	//Command Array an UART1 (LoRa) senden
 8001184:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	220b      	movs	r2, #11
 800118e:	4832      	ldr	r0, [pc, #200]	@ (8001258 <main+0x224>)
 8001190:	f003 fe38 	bl	8004e04 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8001194:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001198:	f001 f856 	bl	8002248 <HAL_Delay>
		  }
		  break;
 800119c:	e037      	b.n	800120e <main+0x1da>
	  case SLEEP:
		  HAL_TIM_Base_Stop(&htim5);	//Timer für Errortimeout stopen
 800119e:	4825      	ldr	r0, [pc, #148]	@ (8001234 <main+0x200>)
 80011a0:	f003 f887 	bl	80042b2 <HAL_TIM_Base_Stop>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);	//Stromversorgung der Antennen abschalten
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011aa:	4823      	ldr	r0, [pc, #140]	@ (8001238 <main+0x204>)
 80011ac:	f001 fd7a 	bl	8002ca4 <HAL_GPIO_WritePin>
		  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 61439, RTC_WAKEUPCLOCK_RTCCLK_DIV16);	//RTC Wakeuptimer starten
 80011b0:	2200      	movs	r2, #0
 80011b2:	f64e 71ff 	movw	r1, #61439	@ 0xefff
 80011b6:	481d      	ldr	r0, [pc, #116]	@ (800122c <main+0x1f8>)
 80011b8:	f002 ff18 	bl	8003fec <HAL_RTCEx_SetWakeUpTimer_IT>
		  HAL_PWR_EnterSTANDBYMode();				    // Standby-Modus aktivieren
 80011bc:	f001 fdae 	bl	8002d1c <HAL_PWR_EnterSTANDBYMode>
		  break;
 80011c0:	e028      	b.n	8001214 <main+0x1e0>
	  case GPS:
		  HAL_UART_Receive_IT(&huart3, &rx_char, 1);		//An UART3 (GPS) zuhören im Interruptmodus starten
 80011c2:	2201      	movs	r2, #1
 80011c4:	491d      	ldr	r1, [pc, #116]	@ (800123c <main+0x208>)
 80011c6:	481e      	ldr	r0, [pc, #120]	@ (8001240 <main+0x20c>)
 80011c8:	f003 feaa 	bl	8004f20 <HAL_UART_Receive_IT>
		  if(GpsActive){			//Prüfen ob valide GPS-Daten empfangen werden
 80011cc:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <main+0x230>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01e      	beq.n	8001212 <main+0x1de>
			  state = JOIN;			//Zustand auf JOIN setzen
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <main+0x1fc>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80011da:	e01a      	b.n	8001212 <main+0x1de>
	  case FULL_RESET:
		  HAL_TIM_Base_Stop(&htim5);		//Timer für Errortimeout stopen
 80011dc:	4815      	ldr	r0, [pc, #84]	@ (8001234 <main+0x200>)
 80011de:	f003 f868 	bl	80042b2 <HAL_TIM_Base_Stop>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);	//Stromversorgung der Antennen abschalten
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e8:	4813      	ldr	r0, [pc, #76]	@ (8001238 <main+0x204>)
 80011ea:	f001 fd5b 	bl	8002ca4 <HAL_GPIO_WritePin>
		  answerRecieved = 0;		//Antwortflag reseten
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <main+0x210>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
		  GpsActive = 0;			//GPSvalid flag reseten
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <main+0x230>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(5000);
 80011fa:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011fe:	f001 f823 	bl	8002248 <HAL_Delay>
		  state = WAKE;				//Zustand auf WAKE setzen
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <main+0x1fc>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
		  break;
 8001208:	e004      	b.n	8001214 <main+0x1e0>
		  break;
 800120a:	bf00      	nop
 800120c:	e002      	b.n	8001214 <main+0x1e0>
		  break;
 800120e:	bf00      	nop
 8001210:	e000      	b.n	8001214 <main+0x1e0>
		  break;
 8001212:	bf00      	nop
	  }

	  HAL_Delay(500);
 8001214:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001218:	f001 f816 	bl	8002248 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	490d      	ldr	r1, [pc, #52]	@ (8001254 <main+0x220>)
 8001220:	480d      	ldr	r0, [pc, #52]	@ (8001258 <main+0x224>)
 8001222:	f003 fe7d 	bl	8004f20 <HAL_UART_Receive_IT>
	  switch (state)
 8001226:	e728      	b.n	800107a <main+0x46>
 8001228:	40007000 	.word	0x40007000
 800122c:	200001f4 	.word	0x200001f4
 8001230:	20000000 	.word	0x20000000
 8001234:	2000021c 	.word	0x2000021c
 8001238:	48000400 	.word	0x48000400
 800123c:	20000490 	.word	0x20000490
 8001240:	200002fc 	.word	0x200002fc
 8001244:	20000431 	.word	0x20000431
 8001248:	20000494 	.word	0x20000494
 800124c:	0800b7b0 	.word	0x0800b7b0
 8001250:	20000432 	.word	0x20000432
 8001254:	20000433 	.word	0x20000433
 8001258:	20000268 	.word	0x20000268
 800125c:	2000048e 	.word	0x2000048e
 8001260:	0800b7c4 	.word	0x0800b7c4
 8001264:	20000492 	.word	0x20000492

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2238      	movs	r2, #56	@ 0x38
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f006 fe95 	bl	8007fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800128a:	2000      	movs	r0, #0
 800128c:	f001 fd60 	bl	8002d50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001290:	230a      	movs	r3, #10
 8001292:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129a:	2340      	movs	r3, #64	@ 0x40
 800129c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800129e:	2301      	movs	r3, #1
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a6:	2302      	movs	r3, #2
 80012a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012aa:	2304      	movs	r3, #4
 80012ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012ae:	2355      	movs	r3, #85	@ 0x55
 80012b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fdf8 	bl	8002eb8 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012ce:	f000 fc43 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2303      	movs	r3, #3
 80012d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2104      	movs	r1, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 f8f6 	bl	80034dc <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012f6:	f000 fc2f 	bl	8001b58 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3750      	adds	r7, #80	@ 0x50
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_RTC_Init+0x68>)
 800130a:	4a19      	ldr	r2, [pc, #100]	@ (8001370 <MX_RTC_Init+0x6c>)
 800130c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_RTC_Init+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_RTC_Init+0x68>)
 8001316:	227f      	movs	r2, #127	@ 0x7f
 8001318:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_RTC_Init+0x68>)
 800131c:	22ff      	movs	r2, #255	@ 0xff
 800131e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_RTC_Init+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_RTC_Init+0x68>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_RTC_Init+0x68>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <MX_RTC_Init+0x68>)
 8001334:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001338:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_RTC_Init+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001340:	480a      	ldr	r0, [pc, #40]	@ (800136c <MX_RTC_Init+0x68>)
 8001342:	f002 fd35 	bl	8003db0 <HAL_RTC_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800134c:	f000 fc04 	bl	8001b58 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 61439, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001350:	2200      	movs	r2, #0
 8001352:	f64e 71ff 	movw	r1, #61439	@ 0xefff
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_RTC_Init+0x68>)
 8001358:	f002 fe48 	bl	8003fec <HAL_RTCEx_SetWakeUpTimer_IT>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001362:	f000 fbf9 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001f4 	.word	0x200001f4
 8001370:	40002800 	.word	0x40002800

08001374 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MX_TIM5_Init+0x94>)
 8001394:	4a1d      	ldr	r2, [pc, #116]	@ (800140c <MX_TIM5_Init+0x98>)
 8001396:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16999;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_TIM5_Init+0x94>)
 800139a:	f244 2267 	movw	r2, #16999	@ 0x4267
 800139e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <MX_TIM5_Init+0x94>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1199999;
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <MX_TIM5_Init+0x94>)
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <MX_TIM5_Init+0x9c>)
 80013aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <MX_TIM5_Init+0x94>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_TIM5_Init+0x94>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013b8:	4813      	ldr	r0, [pc, #76]	@ (8001408 <MX_TIM5_Init+0x94>)
 80013ba:	f002 ff23 	bl	8004204 <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013c4:	f000 fbc8 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <MX_TIM5_Init+0x94>)
 80013d6:	f003 f95b 	bl	8004690 <HAL_TIM_ConfigClockSource>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80013e0:	f000 fbba 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_TIM5_Init+0x94>)
 80013f2:	f003 fbdb 	bl	8004bac <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80013fc:	f000 fbac 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000021c 	.word	0x2000021c
 800140c:	40000c00 	.word	0x40000c00
 8001410:	00124f7f 	.word	0x00124f7f

08001414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800141a:	4a23      	ldr	r2, [pc, #140]	@ (80014a8 <MX_USART1_UART_Init+0x94>)
 800141c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001420:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800145c:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 800145e:	f003 fc81 	bl	8004d64 <HAL_UART_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001468:	f000 fb76 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146c:	2100      	movs	r1, #0
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001470:	f005 fcf7 	bl	8006e62 <HAL_UARTEx_SetTxFifoThreshold>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800147a:	f000 fb6d 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147e:	2100      	movs	r1, #0
 8001480:	4808      	ldr	r0, [pc, #32]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001482:	f005 fd2c 	bl	8006ede <HAL_UARTEx_SetRxFifoThreshold>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800148c:	f000 fb64 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_USART1_UART_Init+0x90>)
 8001492:	f005 fcad 	bl	8006df0 <HAL_UARTEx_DisableFifoMode>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800149c:	f000 fb5c 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000268 	.word	0x20000268
 80014a8:	40013800 	.word	0x40013800

080014ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014b0:	4b22      	ldr	r3, [pc, #136]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014b2:	4a23      	ldr	r2, [pc, #140]	@ (8001540 <MX_USART3_UART_Init+0x94>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80014b6:	4b21      	ldr	r3, [pc, #132]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e8:	4b14      	ldr	r3, [pc, #80]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f4:	4811      	ldr	r0, [pc, #68]	@ (800153c <MX_USART3_UART_Init+0x90>)
 80014f6:	f003 fc35 	bl	8004d64 <HAL_UART_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001500:	f000 fb2a 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001504:	2100      	movs	r1, #0
 8001506:	480d      	ldr	r0, [pc, #52]	@ (800153c <MX_USART3_UART_Init+0x90>)
 8001508:	f005 fcab 	bl	8006e62 <HAL_UARTEx_SetTxFifoThreshold>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001512:	f000 fb21 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001516:	2100      	movs	r1, #0
 8001518:	4808      	ldr	r0, [pc, #32]	@ (800153c <MX_USART3_UART_Init+0x90>)
 800151a:	f005 fce0 	bl	8006ede <HAL_UARTEx_SetRxFifoThreshold>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001524:	f000 fb18 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_USART3_UART_Init+0x90>)
 800152a:	f005 fc61 	bl	8006df0 <HAL_UARTEx_DisableFifoMode>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001534:	f000 fb10 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200002fc 	.word	0x200002fc
 8001540:	40004800 	.word	0x40004800

08001544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <MX_DMA_Init+0x50>)
 800154c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800154e:	4a11      	ldr	r2, [pc, #68]	@ (8001594 <MX_DMA_Init+0x50>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6493      	str	r3, [r2, #72]	@ 0x48
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MX_DMA_Init+0x50>)
 8001558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <MX_DMA_Init+0x50>)
 8001564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001566:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <MX_DMA_Init+0x50>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6493      	str	r3, [r2, #72]	@ 0x48
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <MX_DMA_Init+0x50>)
 8001570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	200b      	movs	r0, #11
 8001580:	f000 ff5f 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001584:	200b      	movs	r0, #11
 8001586:	f000 ff76 	bl	8002476 <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b33      	ldr	r3, [pc, #204]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a32      	ldr	r2, [pc, #200]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b30      	ldr	r3, [pc, #192]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a2c      	ldr	r2, [pc, #176]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0320 	and.w	r3, r3, #32
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b27      	ldr	r3, [pc, #156]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	4a26      	ldr	r2, [pc, #152]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ea:	4b24      	ldr	r3, [pc, #144]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b21      	ldr	r3, [pc, #132]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a20      	ldr	r2, [pc, #128]	@ (800167c <MX_GPIO_Init+0xe4>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <MX_GPIO_Init+0xe4>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_6, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8001614:	481a      	ldr	r0, [pc, #104]	@ (8001680 <MX_GPIO_Init+0xe8>)
 8001616:	f001 fb45 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800161a:	f242 0320 	movw	r3, #8224	@ 0x2020
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001620:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4814      	ldr	r0, [pc, #80]	@ (8001684 <MX_GPIO_Init+0xec>)
 8001632:	f001 f9b5 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 8001636:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	480c      	ldr	r0, [pc, #48]	@ (8001680 <MX_GPIO_Init+0xe8>)
 8001650:	f001 f9a6 	bl	80029a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2017      	movs	r0, #23
 800165a:	f000 fef2 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800165e:	2017      	movs	r0, #23
 8001660:	f000 ff09 	bl	8002476 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2028      	movs	r0, #40	@ 0x28
 800166a:	f000 feea 	bl	8002442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800166e:	2028      	movs	r0, #40	@ 0x28
 8001670:	f000 ff01 	bl	8002476 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	@ 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800

08001688 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		//ISR der UARTS
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)		//Prüfen ob UART 3 (GPS) ausgelößt wurde
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a35      	ldr	r2, [pc, #212]	@ (800176c <HAL_UART_RxCpltCallback+0xe4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d106      	bne.n	80016a8 <HAL_UART_RxCpltCallback+0x20>
    {
		Store_GPS_Data();				//GPS Daten verarbeiten
 800169a:	f000 f905 	bl	80018a8 <Store_GPS_Data>
        HAL_UART_Receive_IT(&huart3, &rx_char, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	4933      	ldr	r1, [pc, #204]	@ (8001770 <HAL_UART_RxCpltCallback+0xe8>)
 80016a2:	4834      	ldr	r0, [pc, #208]	@ (8001774 <HAL_UART_RxCpltCallback+0xec>)
 80016a4:	f003 fc3c 	bl	8004f20 <HAL_UART_Receive_IT>
    }

    if (huart->Instance == USART1)		//Prüfen ob UART 1 (LoRa) ausgelößt wurde
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a32      	ldr	r2, [pc, #200]	@ (8001778 <HAL_UART_RxCpltCallback+0xf0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d157      	bne.n	8001762 <HAL_UART_RxCpltCallback+0xda>
    {
    	answerRecieved = 1;				//Antwortflag setzen
 80016b2:	4b32      	ldr	r3, [pc, #200]	@ (800177c <HAL_UART_RxCpltCallback+0xf4>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]

			if (rxByte == '\n')			//Prüfen ob das aktuelle Byte "\n" ist
 80016b8:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <HAL_UART_RxCpltCallback+0xf8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b0a      	cmp	r3, #10
 80016be:	d135      	bne.n	800172c <HAL_UART_RxCpltCallback+0xa4>
			{

				if (rx_index > 0 && rxBuffer[rx_index - 1] == '\r')		//Prüfen ob Index größer 0 und ob das verherige Byte "\r" war
 80016c0:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01a      	beq.n	80016fe <HAL_UART_RxCpltCallback+0x76>
 80016c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001788 <HAL_UART_RxCpltCallback+0x100>)
 80016d0:	5cd3      	ldrb	r3, [r2, r3]
 80016d2:	2b0d      	cmp	r3, #13
 80016d4:	d113      	bne.n	80016fe <HAL_UART_RxCpltCallback+0x76>
				{

					if (rx_index > 7)		//Prüfen ob mindestens 7 Bytes empfangen wurden um "OK" antworten rauszufiltern
 80016d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	2b07      	cmp	r3, #7
 80016dc:	d90b      	bls.n	80016f6 <HAL_UART_RxCpltCallback+0x6e>
					{

						rxBuffer[rx_index - 1] = '\0';		//Puffer mit \0 abschließen
 80016de:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	4a28      	ldr	r2, [pc, #160]	@ (8001788 <HAL_UART_RxCpltCallback+0x100>)
 80016e6:	2100      	movs	r1, #0
 80016e8:	54d1      	strb	r1, [r2, r3]
						answerRecieved = 0;					//Antwortflag reseten
 80016ea:	4b24      	ldr	r3, [pc, #144]	@ (800177c <HAL_UART_RxCpltCallback+0xf4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
						processLoraMessage(rxBuffer);		//Empfangene Nachricht verarbeiten
 80016f0:	4825      	ldr	r0, [pc, #148]	@ (8001788 <HAL_UART_RxCpltCallback+0x100>)
 80016f2:	f000 f9a3 	bl	8001a3c <processLoraMessage>


					}

					rx_index = 0;	//Index reseten
 80016f6:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	801a      	strh	r2, [r3, #0]
 80016fc:	e02c      	b.n	8001758 <HAL_UART_RxCpltCallback+0xd0>
				}
				else
				{

					if (rx_index < LoRa_BUFFER_SIZE - 1)	//Prüfen ob Index kleiner als Puffergröße ist
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	2b3e      	cmp	r3, #62	@ 0x3e
 8001704:	d80b      	bhi.n	800171e <HAL_UART_RxCpltCallback+0x96>
					{
						rxBuffer[rx_index++] = rxByte;		//Aktuelles Byte an stelle von Index in Puffer schreiben und Index inkrementieren
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	b291      	uxth	r1, r2
 800170e:	4a1d      	ldr	r2, [pc, #116]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 8001710:	8011      	strh	r1, [r2, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <HAL_UART_RxCpltCallback+0xf8>)
 8001716:	7819      	ldrb	r1, [r3, #0]
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <HAL_UART_RxCpltCallback+0x100>)
 800171a:	5499      	strb	r1, [r3, r2]
 800171c:	e01c      	b.n	8001758 <HAL_UART_RxCpltCallback+0xd0>
					}
					else
					{
						answerRecieved = 0;					//Antwortflag reseten
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_UART_RxCpltCallback+0xf4>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
						rx_index = 0;						//Index reseten
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
 800172a:	e015      	b.n	8001758 <HAL_UART_RxCpltCallback+0xd0>
				}
			}
			else
			{

				if (rx_index < LoRa_BUFFER_SIZE - 1)	//Prüfen ob Index kleiner als Puffergröße ist
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	2b3e      	cmp	r3, #62	@ 0x3e
 8001732:	d80b      	bhi.n	800174c <HAL_UART_RxCpltCallback+0xc4>
				{
					rxBuffer[rx_index++] = rxByte;		//Aktuelles Byte an stelle von Index in Puffer schreiben und Index inkrementieren
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	b291      	uxth	r1, r2
 800173c:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 800173e:	8011      	strh	r1, [r2, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <HAL_UART_RxCpltCallback+0xf8>)
 8001744:	7819      	ldrb	r1, [r3, #0]
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <HAL_UART_RxCpltCallback+0x100>)
 8001748:	5499      	strb	r1, [r3, r2]
 800174a:	e005      	b.n	8001758 <HAL_UART_RxCpltCallback+0xd0>
				}
				else
				{
					answerRecieved = 0;					//Antwortflag reseten
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_UART_RxCpltCallback+0xf4>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
					rx_index = 0;						//Index reseten
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <HAL_UART_RxCpltCallback+0xfc>)
 8001754:	2200      	movs	r2, #0
 8001756:	801a      	strh	r2, [r3, #0]
				}
			}

			HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8001758:	2201      	movs	r2, #1
 800175a:	4909      	ldr	r1, [pc, #36]	@ (8001780 <HAL_UART_RxCpltCallback+0xf8>)
 800175c:	480b      	ldr	r0, [pc, #44]	@ (800178c <HAL_UART_RxCpltCallback+0x104>)
 800175e:	f003 fbdf 	bl	8004f20 <HAL_UART_Receive_IT>

		}

}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40004800 	.word	0x40004800
 8001770:	20000490 	.word	0x20000490
 8001774:	200002fc 	.word	0x200002fc
 8001778:	40013800 	.word	0x40013800
 800177c:	20000431 	.word	0x20000431
 8001780:	20000433 	.word	0x20000433
 8001784:	20000434 	.word	0x20000434
 8001788:	200003f0 	.word	0x200003f0
 800178c:	20000268 	.word	0x20000268

08001790 <checkResponse>:

uint8_t checkResponse(char *rxBuffer, const char* strCheck)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
    if (strstr(rxBuffer, strCheck) != NULL)		//Prüfen ob strCheck in rxBuffer enthalten ist
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f006 fc0a 	bl	8007fb6 <strstr>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <checkResponse+0x26>
    {
        memset(rxBuffer, 0, BUFFER_SIZE);		//rxBuffer reseten
 80017a8:	2253      	movs	r2, #83	@ 0x53
 80017aa:	2100      	movs	r1, #0
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f006 fbfa 	bl	8007fa6 <memset>
        return 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <checkResponse+0x28>
    }
    return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <Config_GPS_Modul>:

void Config_GPS_Modul(void)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b099      	sub	sp, #100	@ 0x64
 80017c4:	af00      	add	r7, sp, #0

	//UBX Commands definieren
	uint8_t ubx_cfg_nmea_RMC[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x44}; // activate
 80017c6:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <Config_GPS_Modul+0xa8>)
 80017c8:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80017cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ubx_cfg_nmea_GGA[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23}; //deactivate
 80017d2:	4b26      	ldr	r3, [pc, #152]	@ (800186c <Config_GPS_Modul+0xac>)
 80017d4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80017d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ubx_cfg_nmea_GLL[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A}; //deactivate
 80017de:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <Config_GPS_Modul+0xb0>)
 80017e0:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80017e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ubx_cfg_nmea_GSA[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31}; //deactivate
 80017ea:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <Config_GPS_Modul+0xb4>)
 80017ec:	f107 0420 	add.w	r4, r7, #32
 80017f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ubx_cfg_nmea_GSV[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38}; //deactivate
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <Config_GPS_Modul+0xb8>)
 80017f8:	f107 0410 	add.w	r4, r7, #16
 80017fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ubx_cfg_nmea_VTG[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46}; //deactivate
 8001802:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <Config_GPS_Modul+0xbc>)
 8001804:	463c      	mov	r4, r7
 8001806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	//UBX Commands an GPS Senden
	send_ubx_message(&huart3, ubx_cfg_nmea_RMC, sizeof(ubx_cfg_nmea_RMC));
 800180c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001810:	2210      	movs	r2, #16
 8001812:	4619      	mov	r1, r3
 8001814:	481a      	ldr	r0, [pc, #104]	@ (8001880 <Config_GPS_Modul+0xc0>)
 8001816:	f000 f835 	bl	8001884 <send_ubx_message>
	send_ubx_message(&huart3, ubx_cfg_nmea_GGA, sizeof(ubx_cfg_nmea_GGA));
 800181a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800181e:	2210      	movs	r2, #16
 8001820:	4619      	mov	r1, r3
 8001822:	4817      	ldr	r0, [pc, #92]	@ (8001880 <Config_GPS_Modul+0xc0>)
 8001824:	f000 f82e 	bl	8001884 <send_ubx_message>
	send_ubx_message(&huart3, ubx_cfg_nmea_GLL, sizeof(ubx_cfg_nmea_GLL));
 8001828:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800182c:	2210      	movs	r2, #16
 800182e:	4619      	mov	r1, r3
 8001830:	4813      	ldr	r0, [pc, #76]	@ (8001880 <Config_GPS_Modul+0xc0>)
 8001832:	f000 f827 	bl	8001884 <send_ubx_message>
	send_ubx_message(&huart3, ubx_cfg_nmea_GSA, sizeof(ubx_cfg_nmea_GSA));
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2210      	movs	r2, #16
 800183c:	4619      	mov	r1, r3
 800183e:	4810      	ldr	r0, [pc, #64]	@ (8001880 <Config_GPS_Modul+0xc0>)
 8001840:	f000 f820 	bl	8001884 <send_ubx_message>
	send_ubx_message(&huart3, ubx_cfg_nmea_GSV, sizeof(ubx_cfg_nmea_GSV));
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	2210      	movs	r2, #16
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	@ (8001880 <Config_GPS_Modul+0xc0>)
 800184e:	f000 f819 	bl	8001884 <send_ubx_message>
	send_ubx_message(&huart3, ubx_cfg_nmea_VTG, sizeof(ubx_cfg_nmea_VTG));
 8001852:	463b      	mov	r3, r7
 8001854:	2210      	movs	r2, #16
 8001856:	4619      	mov	r1, r3
 8001858:	4809      	ldr	r0, [pc, #36]	@ (8001880 <Config_GPS_Modul+0xc0>)
 800185a:	f000 f813 	bl	8001884 <send_ubx_message>

}
 800185e:	bf00      	nop
 8001860:	3764      	adds	r7, #100	@ 0x64
 8001862:	46bd      	mov	sp, r7
 8001864:	bd90      	pop	{r4, r7, pc}
 8001866:	bf00      	nop
 8001868:	0800b7d0 	.word	0x0800b7d0
 800186c:	0800b7e0 	.word	0x0800b7e0
 8001870:	0800b7f0 	.word	0x0800b7f0
 8001874:	0800b800 	.word	0x0800b800
 8001878:	0800b810 	.word	0x0800b810
 800187c:	0800b820 	.word	0x0800b820
 8001880:	200002fc 	.word	0x200002fc

08001884 <send_ubx_message>:

void send_ubx_message(UART_HandleTypeDef *huart, uint8_t *msg, uint16_t len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	4613      	mov	r3, r2
 8001890:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(huart, msg, len, 200);	//msg an huart senden
 8001892:	88fa      	ldrh	r2, [r7, #6]
 8001894:	23c8      	movs	r3, #200	@ 0xc8
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f003 fab3 	bl	8004e04 <HAL_UART_Transmit>
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <Store_GPS_Data>:

void Store_GPS_Data(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0aa      	sub	sp, #168	@ 0xa8
 80018ac:	af00      	add	r7, sp, #0
	if (recieving)		//Prüfen ob empfangen wird
 80018ae:	4b49      	ldr	r3, [pc, #292]	@ (80019d4 <Store_GPS_Data+0x12c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d06b      	beq.n	800198e <Store_GPS_Data+0xe6>
	{

		if (rx_char == '*')		//Prüfen ob aktueller Char '*' ist (* schließt RMC Nachricht ab)
 80018b6:	4b48      	ldr	r3, [pc, #288]	@ (80019d8 <Store_GPS_Data+0x130>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80018bc:	d103      	bne.n	80018c6 <Store_GPS_Data+0x1e>
		{

			checksum_phase = 1;		//Checksum_phase setzen
 80018be:	4b47      	ldr	r3, [pc, #284]	@ (80019dc <Store_GPS_Data+0x134>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
		recieving = 1;			//Recieve flag setzen
		checksum_phase = 0;
		memset(message_buffer, 0, BUFFER_SIZE);	//Puffer reseten
		message_buffer[message_index++] = rx_char;		//Aktuellen Char an stelle von Index in Puffer schreiben und Index inkrementieren
	}
}
 80018c4:	e082      	b.n	80019cc <Store_GPS_Data+0x124>
		else if (checksum_phase && message_index < BUFFER_SIZE - 1)		//Prüfen ob checksum_phase gesetzt ist und ob der Index kleiner als die Puffergröße ist
 80018c6:	4b45      	ldr	r3, [pc, #276]	@ (80019dc <Store_GPS_Data+0x134>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d04f      	beq.n	800196e <Store_GPS_Data+0xc6>
 80018ce:	4b44      	ldr	r3, [pc, #272]	@ (80019e0 <Store_GPS_Data+0x138>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	2b51      	cmp	r3, #81	@ 0x51
 80018d4:	d84b      	bhi.n	800196e <Store_GPS_Data+0xc6>
			message_buffer[message_index++] = rx_char;	//Aktuellen Char an stelle von Index in Puffer schreiben und Index inkrementieren
 80018d6:	4b42      	ldr	r3, [pc, #264]	@ (80019e0 <Store_GPS_Data+0x138>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	b291      	uxth	r1, r2
 80018de:	4a40      	ldr	r2, [pc, #256]	@ (80019e0 <Store_GPS_Data+0x138>)
 80018e0:	8011      	strh	r1, [r2, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b3c      	ldr	r3, [pc, #240]	@ (80019d8 <Store_GPS_Data+0x130>)
 80018e6:	7819      	ldrb	r1, [r3, #0]
 80018e8:	4b3e      	ldr	r3, [pc, #248]	@ (80019e4 <Store_GPS_Data+0x13c>)
 80018ea:	5499      	strb	r1, [r3, r2]
			if (message_index >= 3 && checksum_phase)		//Prüfen ob index größergleich 3 und checksum_phase gesetzt ist
 80018ec:	4b3c      	ldr	r3, [pc, #240]	@ (80019e0 <Store_GPS_Data+0x138>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d96a      	bls.n	80019ca <Store_GPS_Data+0x122>
 80018f4:	4b39      	ldr	r3, [pc, #228]	@ (80019dc <Store_GPS_Data+0x134>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d066      	beq.n	80019ca <Store_GPS_Data+0x122>
				message_buffer[message_index] = '\0';		//Puffer mit '\0' abschließen
 80018fc:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <Store_GPS_Data+0x138>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b38      	ldr	r3, [pc, #224]	@ (80019e4 <Store_GPS_Data+0x13c>)
 8001904:	2100      	movs	r1, #0
 8001906:	5499      	strb	r1, [r3, r2]
				if(message_buffer[17] == 'A'){				//Prüfen ob aktueller Buffer valide ist
 8001908:	4b36      	ldr	r3, [pc, #216]	@ (80019e4 <Store_GPS_Data+0x13c>)
 800190a:	7c5b      	ldrb	r3, [r3, #17]
 800190c:	2b41      	cmp	r3, #65	@ 0x41
 800190e:	d119      	bne.n	8001944 <Store_GPS_Data+0x9c>
				convertToHex((char *)message_buffer, hexOutput);	//Puffer zu HEX konvertieren
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	4833      	ldr	r0, [pc, #204]	@ (80019e4 <Store_GPS_Data+0x13c>)
 8001916:	f000 f871 	bl	80019fc <convertToHex>
				printf("Empfangene Nachricht: %s\n", message_buffer);
 800191a:	4932      	ldr	r1, [pc, #200]	@ (80019e4 <Store_GPS_Data+0x13c>)
 800191c:	4832      	ldr	r0, [pc, #200]	@ (80019e8 <Store_GPS_Data+0x140>)
 800191e:	f006 fa99 	bl	8007e54 <iprintf>
				printf("Empfangene Nachricht in HEX: %s\n",  hexOutput);
 8001922:	463b      	mov	r3, r7
 8001924:	4619      	mov	r1, r3
 8001926:	4831      	ldr	r0, [pc, #196]	@ (80019ec <Store_GPS_Data+0x144>)
 8001928:	f006 fa94 	bl	8007e54 <iprintf>
				GpsSize = message_index;		//Aktuellen index in GpsSize speichern
 800192c:	4b2c      	ldr	r3, [pc, #176]	@ (80019e0 <Store_GPS_Data+0x138>)
 800192e:	881a      	ldrh	r2, [r3, #0]
 8001930:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <Store_GPS_Data+0x148>)
 8001932:	801a      	strh	r2, [r3, #0]
				GpsActive = 1;					//GpsActive setzten um empfang valider GPS Daten zu bestätigen
 8001934:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <Store_GPS_Data+0x14c>)
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
				strcpy(LoraPayload, hexOutput);	//hexOutput in Hilfspuffer LoraPayload kopieren
 800193a:	463b      	mov	r3, r7
 800193c:	4619      	mov	r1, r3
 800193e:	482e      	ldr	r0, [pc, #184]	@ (80019f8 <Store_GPS_Data+0x150>)
 8001940:	f006 fbc7 	bl	80080d2 <strcpy>
				memset(message_buffer, 0, BUFFER_SIZE);		//Puffer reseten
 8001944:	2253      	movs	r2, #83	@ 0x53
 8001946:	2100      	movs	r1, #0
 8001948:	4826      	ldr	r0, [pc, #152]	@ (80019e4 <Store_GPS_Data+0x13c>)
 800194a:	f006 fb2c 	bl	8007fa6 <memset>
				memset(hexOutput, 0, sizeof(hexOutput));	//Hex-Puffer reseten
 800194e:	463b      	mov	r3, r7
 8001950:	22a7      	movs	r2, #167	@ 0xa7
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f006 fb26 	bl	8007fa6 <memset>
				message_index = 0;							//INdex reseten
 800195a:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <Store_GPS_Data+0x138>)
 800195c:	2200      	movs	r2, #0
 800195e:	801a      	strh	r2, [r3, #0]
				recieving = 0;								//recieve Flag reseten
 8001960:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <Store_GPS_Data+0x12c>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
				checksum_phase = 0;							//Checksum_phase reseten
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <Store_GPS_Data+0x134>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
			if (message_index >= 3 && checksum_phase)		//Prüfen ob index größergleich 3 und checksum_phase gesetzt ist
 800196c:	e02d      	b.n	80019ca <Store_GPS_Data+0x122>
		} else if (message_index < BUFFER_SIZE - 1)			//Prüfen ob noch platz im Puffer ist
 800196e:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <Store_GPS_Data+0x138>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	2b51      	cmp	r3, #81	@ 0x51
 8001974:	d82a      	bhi.n	80019cc <Store_GPS_Data+0x124>
			message_buffer[message_index++] = rx_char;		//Aktuellen Char an stelle von Index in Puffer schreiben und Index inkrementieren
 8001976:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <Store_GPS_Data+0x138>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	b291      	uxth	r1, r2
 800197e:	4a18      	ldr	r2, [pc, #96]	@ (80019e0 <Store_GPS_Data+0x138>)
 8001980:	8011      	strh	r1, [r2, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <Store_GPS_Data+0x130>)
 8001986:	7819      	ldrb	r1, [r3, #0]
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <Store_GPS_Data+0x13c>)
 800198a:	5499      	strb	r1, [r3, r2]
}
 800198c:	e01e      	b.n	80019cc <Store_GPS_Data+0x124>
	else if (rx_char == '$')			//Prüfen ob startzeichen '$' empfangen wurde
 800198e:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <Store_GPS_Data+0x130>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b24      	cmp	r3, #36	@ 0x24
 8001994:	d11a      	bne.n	80019cc <Store_GPS_Data+0x124>
		message_index = 0;		//Index reseten
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <Store_GPS_Data+0x138>)
 8001998:	2200      	movs	r2, #0
 800199a:	801a      	strh	r2, [r3, #0]
		recieving = 1;			//Recieve flag setzen
 800199c:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <Store_GPS_Data+0x12c>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
		checksum_phase = 0;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <Store_GPS_Data+0x134>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
		memset(message_buffer, 0, BUFFER_SIZE);	//Puffer reseten
 80019a8:	2253      	movs	r2, #83	@ 0x53
 80019aa:	2100      	movs	r1, #0
 80019ac:	480d      	ldr	r0, [pc, #52]	@ (80019e4 <Store_GPS_Data+0x13c>)
 80019ae:	f006 fafa 	bl	8007fa6 <memset>
		message_buffer[message_index++] = rx_char;		//Aktuellen Char an stelle von Index in Puffer schreiben und Index inkrementieren
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <Store_GPS_Data+0x138>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	b291      	uxth	r1, r2
 80019ba:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <Store_GPS_Data+0x138>)
 80019bc:	8011      	strh	r1, [r2, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <Store_GPS_Data+0x130>)
 80019c2:	7819      	ldrb	r1, [r3, #0]
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <Store_GPS_Data+0x13c>)
 80019c6:	5499      	strb	r1, [r3, r2]
}
 80019c8:	e000      	b.n	80019cc <Store_GPS_Data+0x124>
			if (message_index >= 3 && checksum_phase)		//Prüfen ob index größergleich 3 und checksum_phase gesetzt ist
 80019ca:	bf00      	nop
}
 80019cc:	bf00      	nop
 80019ce:	37a8      	adds	r7, #168	@ 0xa8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000430 	.word	0x20000430
 80019d8:	20000490 	.word	0x20000490
 80019dc:	20000491 	.word	0x20000491
 80019e0:	2000048c 	.word	0x2000048c
 80019e4:	20000438 	.word	0x20000438
 80019e8:	0800b830 	.word	0x0800b830
 80019ec:	0800b84c 	.word	0x0800b84c
 80019f0:	2000048e 	.word	0x2000048e
 80019f4:	20000492 	.word	0x20000492
 80019f8:	20000494 	.word	0x20000494

080019fc <convertToHex>:

void convertToHex(const char *input, char *output)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    while (*input) {
 8001a06:	e00c      	b.n	8001a22 <convertToHex+0x26>
        sprintf(output, "%02X", (unsigned char)*input);		//Input stelle zu Hex convertieren und in Output stelle schreiben
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	490a      	ldr	r1, [pc, #40]	@ (8001a38 <convertToHex+0x3c>)
 8001a10:	6838      	ldr	r0, [r7, #0]
 8001a12:	f006 fa65 	bl	8007ee0 <siprintf>
        output += 2;		//Pointer auf Output position um 2 inkrementieren
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	603b      	str	r3, [r7, #0]
        input++;		//Pointer auf input Stringposition inkrementieren
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
    while (*input) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ee      	bne.n	8001a08 <convertToHex+0xc>
    }
    *output = '\0';		//Output string mit '\0' abschließen
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	0800b870 	.word	0x0800b870

08001a3c <processLoraMessage>:

void processLoraMessage(char *rxBuffer)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

    printf("Empfangene Nachricht: %s\n", rxBuffer);
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4830      	ldr	r0, [pc, #192]	@ (8001b08 <processLoraMessage+0xcc>)
 8001a48:	f006 fa04 	bl	8007e54 <iprintf>

	switch(stateAnswer)
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b0c <processLoraMessage+0xd0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d020      	beq.n	8001a96 <processLoraMessage+0x5a>
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	dc53      	bgt.n	8001b00 <processLoraMessage+0xc4>
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d050      	beq.n	8001afe <processLoraMessage+0xc2>
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d000      	beq.n	8001a62 <processLoraMessage+0x26>
			state = SEND;	//Zustand auf SEND setzen
		}
		break;
	}
//	answerRecieved = 0;
}
 8001a60:	e04e      	b.n	8001b00 <processLoraMessage+0xc4>
		if(checkResponse(rxBuffer, "+EVT:JOIN FAILED") == 1)	//Puffer auf string überprüfen
 8001a62:	492b      	ldr	r1, [pc, #172]	@ (8001b10 <processLoraMessage+0xd4>)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fe93 	bl	8001790 <checkResponse>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d103      	bne.n	8001a78 <processLoraMessage+0x3c>
			state = JOIN;		//Zustand auf JOIN setzen
 8001a70:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <processLoraMessage+0xd8>)
 8001a72:	2203      	movs	r2, #3
 8001a74:	701a      	strb	r2, [r3, #0]
		break;
 8001a76:	e043      	b.n	8001b00 <processLoraMessage+0xc4>
		else if(checkResponse(rxBuffer, "+EVT:JOINED") == 1)	//Puffer auf string überprüfen
 8001a78:	4927      	ldr	r1, [pc, #156]	@ (8001b18 <processLoraMessage+0xdc>)
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fe88 	bl	8001790 <checkResponse>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d103      	bne.n	8001a8e <processLoraMessage+0x52>
			state = SEND;	//Zustand auf SEND setzen
 8001a86:	4b23      	ldr	r3, [pc, #140]	@ (8001b14 <processLoraMessage+0xd8>)
 8001a88:	2202      	movs	r2, #2
 8001a8a:	701a      	strb	r2, [r3, #0]
		break;
 8001a8c:	e038      	b.n	8001b00 <processLoraMessage+0xc4>
			state = GPS;	//Zustand auf GPS setzen
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <processLoraMessage+0xd8>)
 8001a90:	2205      	movs	r2, #5
 8001a92:	701a      	strb	r2, [r3, #0]
		break;
 8001a94:	e034      	b.n	8001b00 <processLoraMessage+0xc4>
		if(checkResponse(rxBuffer, "AT_BUSY_ERROR") == 1)	//Puffer auf string überprüfen
 8001a96:	4921      	ldr	r1, [pc, #132]	@ (8001b1c <processLoraMessage+0xe0>)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fe79 	bl	8001790 <checkResponse>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d107      	bne.n	8001ab4 <processLoraMessage+0x78>
			HAL_Delay(5000);
 8001aa4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001aa8:	f000 fbce 	bl	8002248 <HAL_Delay>
			state = SEND;	//Zustand auf SEND setzen
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <processLoraMessage+0xd8>)
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
		break;
 8001ab2:	e025      	b.n	8001b00 <processLoraMessage+0xc4>
		else if(checkResponse(rxBuffer, "AT_NO_NETWORK_JOINED") == 1)	//Puffer auf string überprüfen
 8001ab4:	491a      	ldr	r1, [pc, #104]	@ (8001b20 <processLoraMessage+0xe4>)
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fe6a 	bl	8001790 <checkResponse>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d103      	bne.n	8001aca <processLoraMessage+0x8e>
			state = JOIN;	//Zustand auf JOIN setzen
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <processLoraMessage+0xd8>)
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	701a      	strb	r2, [r3, #0]
		break;
 8001ac8:	e01a      	b.n	8001b00 <processLoraMessage+0xc4>
		else if(checkResponse(rxBuffer, "+EVT:SEND_CONFIRMED") == 1)	//Puffer auf string überprüfen
 8001aca:	4916      	ldr	r1, [pc, #88]	@ (8001b24 <processLoraMessage+0xe8>)
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff fe5f 	bl	8001790 <checkResponse>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d103      	bne.n	8001ae0 <processLoraMessage+0xa4>
			state = SLEEP;	//Zustand auf SLEEP setzen
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <processLoraMessage+0xd8>)
 8001ada:	2204      	movs	r2, #4
 8001adc:	701a      	strb	r2, [r3, #0]
		break;
 8001ade:	e00f      	b.n	8001b00 <processLoraMessage+0xc4>
		else if(checkResponse(rxBuffer, "AT_PARAM_ERROR") == 1)	//Puffer auf string überprüfen
 8001ae0:	4911      	ldr	r1, [pc, #68]	@ (8001b28 <processLoraMessage+0xec>)
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fe54 	bl	8001790 <checkResponse>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d103      	bne.n	8001af6 <processLoraMessage+0xba>
			state = GPS;	//Zustand auf GPS setzen
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <processLoraMessage+0xd8>)
 8001af0:	2205      	movs	r2, #5
 8001af2:	701a      	strb	r2, [r3, #0]
		break;
 8001af4:	e004      	b.n	8001b00 <processLoraMessage+0xc4>
			state = SEND;	//Zustand auf SEND setzen
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <processLoraMessage+0xd8>)
 8001af8:	2202      	movs	r2, #2
 8001afa:	701a      	strb	r2, [r3, #0]
		break;
 8001afc:	e000      	b.n	8001b00 <processLoraMessage+0xc4>
		break;
 8001afe:	bf00      	nop
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	0800b830 	.word	0x0800b830
 8001b0c:	20000432 	.word	0x20000432
 8001b10:	0800b878 	.word	0x0800b878
 8001b14:	20000000 	.word	0x20000000
 8001b18:	0800b88c 	.word	0x0800b88c
 8001b1c:	0800b898 	.word	0x0800b898
 8001b20:	0800b8a8 	.word	0x0800b8a8
 8001b24:	0800b8c0 	.word	0x0800b8c0
 8001b28:	0800b8d4 	.word	0x0800b8d4

08001b2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){		//Errortimout ISR
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	if(htim ->Instance == TIM5){	//Prüfen ob Timer5 Interrupt ausgelößt hat
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d102      	bne.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x18>
		state = FULL_RESET;		//State auf FULL_RESET setzten
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001b40:	2206      	movs	r2, #6
 8001b42:	701a      	strb	r2, [r3, #0]
	}
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40000c00 	.word	0x40000c00
 8001b54:	20000000 	.word	0x20000000

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <Error_Handler+0x8>

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b86:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b9a:	f001 f97d 	bl	8002e98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b098      	sub	sp, #96	@ 0x60
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2254      	movs	r2, #84	@ 0x54
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f006 f9f2 	bl	8007fa6 <memset>
  if(hrtc->Instance==RTC)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a19      	ldr	r2, [pc, #100]	@ (8001c2c <HAL_RTC_MspInit+0x80>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d12b      	bne.n	8001c24 <HAL_RTC_MspInit+0x78>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bcc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001bd0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f001 fe99 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001be8:	f7ff ffb6 	bl	8001b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bec:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_RTC_MspInit+0x84>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <HAL_RTC_MspInit+0x84>)
 8001bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_RTC_MspInit+0x84>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	4a0b      	ldr	r2, [pc, #44]	@ (8001c30 <HAL_RTC_MspInit+0x84>)
 8001c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c08:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_RTC_MspInit+0x84>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 fc12 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f000 fc29 	bl	8002476 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001c24:	bf00      	nop
 8001c26:	3760      	adds	r7, #96	@ 0x60
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40002800 	.word	0x40002800
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	@ (8001c78 <HAL_TIM_Base_MspInit+0x44>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d113      	bne.n	8001c6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c46:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2032      	movs	r0, #50	@ 0x32
 8001c64:	f000 fbed 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c68:	2032      	movs	r0, #50	@ 0x32
 8001c6a:	f000 fc04 	bl	8002476 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40000c00 	.word	0x40000c00
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0a0      	sub	sp, #128	@ 0x80
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	2254      	movs	r2, #84	@ 0x54
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f006 f980 	bl	8007fa6 <memset>
  if(huart->Instance==USART1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a5b      	ldr	r2, [pc, #364]	@ (8001e18 <HAL_UART_MspInit+0x198>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d140      	bne.n	8001d32 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb8:	f107 0318 	add.w	r3, r7, #24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 fe29 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cc8:	f7ff ff46 	bl	8001b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ccc:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd0:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001cd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cd8:	4b50      	ldr	r3, [pc, #320]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cfc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d0e:	2307      	movs	r3, #7
 8001d10:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d16:	4619      	mov	r1, r3
 8001d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d1c:	f000 fe40 	bl	80029a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	2025      	movs	r0, #37	@ 0x25
 8001d26:	f000 fb8c 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d2a:	2025      	movs	r0, #37	@ 0x25
 8001d2c:	f000 fba3 	bl	8002476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d30:	e06d      	b.n	8001e0e <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a3a      	ldr	r2, [pc, #232]	@ (8001e20 <HAL_UART_MspInit+0x1a0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d168      	bne.n	8001e0e <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	f107 0318 	add.w	r3, r7, #24
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fde3 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001d54:	f7ff ff00 	bl	8001b58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d58:	4b30      	ldr	r3, [pc, #192]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001d5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d64:	4b2d      	ldr	r3, [pc, #180]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d70:	4b2a      	ldr	r3, [pc, #168]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d74:	4a29      	ldr	r2, [pc, #164]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <HAL_UART_MspInit+0x19c>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001da2:	4619      	mov	r1, r3
 8001da4:	481f      	ldr	r0, [pc, #124]	@ (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001da6:	f000 fdfb 	bl	80029a0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8001daa:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001dac:	4a1f      	ldr	r2, [pc, #124]	@ (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001dae:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001db2:	221c      	movs	r2, #28
 8001db4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001dc4:	2280      	movs	r2, #128	@ 0x80
 8001dc6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001dd4:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dda:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001de0:	4811      	ldr	r0, [pc, #68]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001de2:	f000 fb63 	bl	80024ac <HAL_DMA_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001dec:	f7ff feb4 	bl	8001b58 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a0d      	ldr	r2, [pc, #52]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001df4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001df8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	2027      	movs	r0, #39	@ 0x27
 8001e04:	f000 fb1d 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e08:	2027      	movs	r0, #39	@ 0x27
 8001e0a:	f000 fb34 	bl	8002476 <HAL_NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3780      	adds	r7, #128	@ 0x80
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40004800 	.word	0x40004800
 8001e24:	48000800 	.word	0x48000800
 8001e28:	20000390 	.word	0x20000390
 8001e2c:	40020008 	.word	0x40020008

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <NMI_Handler+0x4>

08001e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <MemManage_Handler+0x4>

08001e48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e86:	f000 f9c1 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <RTC_WKUP_IRQHandler+0x10>)
 8001e96:	f002 f98b 	bl	80041b0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200001f4 	.word	0x200001f4

08001ea4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <DMA1_Channel1_IRQHandler+0x10>)
 8001eaa:	f000 fc67 	bl	800277c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000390 	.word	0x20000390

08001eb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ebc:	2020      	movs	r0, #32
 8001ebe:	f000 ff09 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <USART1_IRQHandler+0x10>)
 8001ece:	f003 f873 	bl	8004fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000268 	.word	0x20000268

08001edc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <USART3_IRQHandler+0x10>)
 8001ee2:	f003 f869 	bl	8004fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200002fc 	.word	0x200002fc

08001ef0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ef4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ef8:	f000 feec 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <TIM5_IRQHandler+0x10>)
 8001f06:	f002 fa73 	bl	80043f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000021c 	.word	0x2000021c

08001f14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001f2c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001f34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001f3c:	e000      	b.n	8001f40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001f3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001f40:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f9      	beq.n	8001f3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f4a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <_kill>:

int _kill(int pid, int sig)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f7c:	f006 f87c 	bl	8008078 <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2216      	movs	r2, #22
 8001f84:	601a      	str	r2, [r3, #0]
  return -1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_exit>:

void _exit (int status)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffe7 	bl	8001f72 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <_exit+0x12>

08001fa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e00a      	b.n	8001fd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fba:	f3af 8000 	nop.w
 8001fbe:	4601      	mov	r1, r0
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	60ba      	str	r2, [r7, #8]
 8001fc6:	b2ca      	uxtb	r2, r1
 8001fc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dbf0      	blt.n	8001fba <_read+0x12>
  }

  return len;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	e009      	b.n	8002008 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	60ba      	str	r2, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff89 	bl	8001f14 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf1      	blt.n	8001ff4 <_write+0x12>
  }
  return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_close>:

int _close(int file)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002042:	605a      	str	r2, [r3, #4]
  return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_isatty>:

int _isatty(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800208c:	4a14      	ldr	r2, [pc, #80]	@ (80020e0 <_sbrk+0x5c>)
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <_sbrk+0x60>)
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <_sbrk+0x64>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <_sbrk+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d207      	bcs.n	80020c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b4:	f005 ffe0 	bl	8008078 <__errno>
 80020b8:	4603      	mov	r3, r0
 80020ba:	220c      	movs	r2, #12
 80020bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	e009      	b.n	80020d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a05      	ldr	r2, [pc, #20]	@ (80020e8 <_sbrk+0x64>)
 80020d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20020000 	.word	0x20020000
 80020e4:	00000400 	.word	0x00000400
 80020e8:	2000053c 	.word	0x2000053c
 80020ec:	20000690 	.word	0x20000690

080020f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <SystemInit+0x20>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <SystemInit+0x20>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002114:	480d      	ldr	r0, [pc, #52]	@ (800214c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002116:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002118:	f7ff ffea 	bl	80020f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800211c:	480c      	ldr	r0, [pc, #48]	@ (8002150 <LoopForever+0x6>)
  ldr r1, =_edata
 800211e:	490d      	ldr	r1, [pc, #52]	@ (8002154 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002120:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <LoopForever+0xe>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002134:	4c0a      	ldr	r4, [pc, #40]	@ (8002160 <LoopForever+0x16>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002142:	f005 ff9f 	bl	8008084 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002146:	f7fe ff75 	bl	8001034 <main>

0800214a <LoopForever>:

LoopForever:
    b LoopForever
 800214a:	e7fe      	b.n	800214a <LoopForever>
  ldr   r0, =_estack
 800214c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002154:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002158:	0800bd60 	.word	0x0800bd60
  ldr r2, =_sbss
 800215c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002160:	20000690 	.word	0x20000690

08002164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC1_2_IRQHandler>

08002166 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002170:	2003      	movs	r0, #3
 8002172:	f000 f95b 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002176:	2000      	movs	r0, #0
 8002178:	f000 f80e 	bl	8002198 <HAL_InitTick>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	e001      	b.n	800218c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002188:	f7ff fcec 	bl	8001b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800218c:	79fb      	ldrb	r3, [r7, #7]

}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <HAL_InitTick+0x68>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d022      	beq.n	80021f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <HAL_InitTick+0x6c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <HAL_InitTick+0x68>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 f966 	bl	8002492 <HAL_SYSTICK_Config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10f      	bne.n	80021ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	d809      	bhi.n	80021e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d2:	2200      	movs	r2, #0
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	f04f 30ff 	mov.w	r0, #4294967295
 80021da:	f000 f932 	bl	8002442 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <HAL_InitTick+0x70>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e007      	b.n	80021f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e004      	b.n	80021f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000000c 	.word	0x2000000c
 8002204:	20000004 	.word	0x20000004
 8002208:	20000008 	.word	0x20000008

0800220c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_IncTick+0x1c>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_IncTick+0x20>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4413      	add	r3, r2
 800221a:	4a03      	ldr	r2, [pc, #12]	@ (8002228 <HAL_IncTick+0x1c>)
 800221c:	6013      	str	r3, [r2, #0]
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	20000540 	.word	0x20000540
 800222c:	2000000c 	.word	0x2000000c

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000540 	.word	0x20000540

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d004      	beq.n	800226c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_Delay+0x40>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226c:	bf00      	nop
 800226e:	f7ff ffdf 	bl	8002230 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	429a      	cmp	r2, r3
 800227c:	d8f7      	bhi.n	800226e <HAL_Delay+0x26>
  {
  }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000000c 	.word	0x2000000c

0800228c <__NVIC_SetPriorityGrouping>:
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	@ (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	@ (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	@ (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	@ 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	@ 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Config>:
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f7ff ff8e 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff29 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002450:	f7ff ff40 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 8002454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7ff ff90 	bl	8002380 <NVIC_EncodePriority>
 8002460:	4602      	mov	r2, r0
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff5f 	bl	800232c <__NVIC_SetPriority>
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff33 	bl	80022f0 <__NVIC_EnableIRQ>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ffa4 	bl	80023e8 <SysTick_Config>
 80024a0:	4603      	mov	r3, r0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e08d      	b.n	80025da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b47      	ldr	r3, [pc, #284]	@ (80025e4 <HAL_DMA_Init+0x138>)
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d80f      	bhi.n	80024ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b45      	ldr	r3, [pc, #276]	@ (80025e8 <HAL_DMA_Init+0x13c>)
 80024d2:	4413      	add	r3, r2
 80024d4:	4a45      	ldr	r2, [pc, #276]	@ (80025ec <HAL_DMA_Init+0x140>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	009a      	lsls	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a42      	ldr	r2, [pc, #264]	@ (80025f0 <HAL_DMA_Init+0x144>)
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80024e8:	e00e      	b.n	8002508 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b40      	ldr	r3, [pc, #256]	@ (80025f4 <HAL_DMA_Init+0x148>)
 80024f2:	4413      	add	r3, r2
 80024f4:	4a3d      	ldr	r2, [pc, #244]	@ (80025ec <HAL_DMA_Init+0x140>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	009a      	lsls	r2, r3, #2
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a3c      	ldr	r2, [pc, #240]	@ (80025f8 <HAL_DMA_Init+0x14c>)
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800251e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f9be 	bl	80028dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002568:	d102      	bne.n	8002570 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002584:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d010      	beq.n	80025b0 <HAL_DMA_Init+0x104>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d80c      	bhi.n	80025b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9de 	bl	8002958 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	e008      	b.n	80025c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40020407 	.word	0x40020407
 80025e8:	bffdfff8 	.word	0xbffdfff8
 80025ec:	cccccccd 	.word	0xcccccccd
 80025f0:	40020000 	.word	0x40020000
 80025f4:	bffdfbf8 	.word	0xbffdfbf8
 80025f8:	40020400 	.word	0x40020400

080025fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d005      	beq.n	8002620 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2204      	movs	r2, #4
 8002618:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e037      	b.n	8002690 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 020e 	bic.w	r2, r2, #14
 800262e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800263a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800263e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800266c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002684:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800268e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d00d      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2204      	movs	r2, #4
 80026ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e047      	b.n	8002772 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 020e 	bic.w	r2, r2, #14
 80026f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	f003 021f 	and.w	r2, r3, #31
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f202 	lsl.w	r2, r1, r2
 8002724:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800272e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00c      	beq.n	8002752 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002742:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002746:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002750:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
    }
  }
  return status;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2204      	movs	r2, #4
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d026      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x7a>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d021      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d107      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	2104      	movs	r1, #4
 80027de:	fa01 f202 	lsl.w	r2, r1, r2
 80027e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d071      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027f4:	e06c      	b.n	80028d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	2202      	movs	r2, #2
 8002800:	409a      	lsls	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02e      	beq.n	8002868 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d029      	beq.n	8002868 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10b      	bne.n	800283a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 020a 	bic.w	r2, r2, #10
 8002830:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	2102      	movs	r1, #2
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d038      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002866:	e033      	b.n	80028d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2208      	movs	r2, #8
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02a      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d025      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 020e 	bic.w	r2, r2, #14
 8002894:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f003 021f 	and.w	r2, r3, #31
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f202 	lsl.w	r2, r1, r2
 80028a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
}
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b16      	ldr	r3, [pc, #88]	@ (8002944 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d802      	bhi.n	80028f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80028f0:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e001      	b.n	80028fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80028f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3b08      	subs	r3, #8
 8002906:	4a12      	ldr	r2, [pc, #72]	@ (8002950 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	461a      	mov	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a0b      	ldr	r2, [pc, #44]	@ (8002954 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002926:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2201      	movs	r2, #1
 8002930:	409a      	lsls	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40020407 	.word	0x40020407
 8002948:	40020800 	.word	0x40020800
 800294c:	40020820 	.word	0x40020820
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	40020880 	.word	0x40020880

08002958 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	461a      	mov	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a08      	ldr	r2, [pc, #32]	@ (800299c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800297a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3b01      	subs	r3, #1
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2201      	movs	r2, #1
 8002986:	409a      	lsls	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	1000823f 	.word	0x1000823f
 800299c:	40020940 	.word	0x40020940

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029ae:	e15a      	b.n	8002c66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2101      	movs	r1, #1
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 814c 	beq.w	8002c60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d005      	beq.n	80029e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d130      	bne.n	8002a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a16:	2201      	movs	r2, #1
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 0201 	and.w	r2, r3, #1
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d017      	beq.n	8002a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d123      	bne.n	8002ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	08da      	lsrs	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3208      	adds	r2, #8
 8002a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	08da      	lsrs	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3208      	adds	r2, #8
 8002acc:	6939      	ldr	r1, [r7, #16]
 8002ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0203 	and.w	r2, r3, #3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80a6 	beq.w	8002c60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b14:	4b5b      	ldr	r3, [pc, #364]	@ (8002c84 <HAL_GPIO_Init+0x2e4>)
 8002b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b18:	4a5a      	ldr	r2, [pc, #360]	@ (8002c84 <HAL_GPIO_Init+0x2e4>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b20:	4b58      	ldr	r3, [pc, #352]	@ (8002c84 <HAL_GPIO_Init+0x2e4>)
 8002b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b2c:	4a56      	ldr	r2, [pc, #344]	@ (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b56:	d01f      	beq.n	8002b98 <HAL_GPIO_Init+0x1f8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002c8c <HAL_GPIO_Init+0x2ec>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d019      	beq.n	8002b94 <HAL_GPIO_Init+0x1f4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a4b      	ldr	r2, [pc, #300]	@ (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d013      	beq.n	8002b90 <HAL_GPIO_Init+0x1f0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <HAL_GPIO_Init+0x2f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00d      	beq.n	8002b8c <HAL_GPIO_Init+0x1ec>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a49      	ldr	r2, [pc, #292]	@ (8002c98 <HAL_GPIO_Init+0x2f8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d007      	beq.n	8002b88 <HAL_GPIO_Init+0x1e8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a48      	ldr	r2, [pc, #288]	@ (8002c9c <HAL_GPIO_Init+0x2fc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d101      	bne.n	8002b84 <HAL_GPIO_Init+0x1e4>
 8002b80:	2305      	movs	r3, #5
 8002b82:	e00a      	b.n	8002b9a <HAL_GPIO_Init+0x1fa>
 8002b84:	2306      	movs	r3, #6
 8002b86:	e008      	b.n	8002b9a <HAL_GPIO_Init+0x1fa>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e006      	b.n	8002b9a <HAL_GPIO_Init+0x1fa>
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e004      	b.n	8002b9a <HAL_GPIO_Init+0x1fa>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e002      	b.n	8002b9a <HAL_GPIO_Init+0x1fa>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_GPIO_Init+0x1fa>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	f002 0203 	and.w	r2, r2, #3
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	4093      	lsls	r3, r2
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002baa:	4937      	ldr	r1, [pc, #220]	@ (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bb8:	4b39      	ldr	r3, [pc, #228]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bdc:	4a30      	ldr	r2, [pc, #192]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002be2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c06:	4a26      	ldr	r2, [pc, #152]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c0c:	4b24      	ldr	r3, [pc, #144]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c5a:	4a11      	ldr	r2, [pc, #68]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	3301      	adds	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f47f ae9d 	bne.w	80029b0 <HAL_GPIO_Init+0x10>
  }
}
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000800 	.word	0x48000800
 8002c94:	48000c00 	.word	0x48000c00
 8002c98:	48001000 	.word	0x48001000
 8002c9c:	48001400 	.word	0x48001400
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cb4:	787b      	ldrb	r3, [r7, #1]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cde:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cea:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f806 	bl	8002d04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8002d20:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 0307 	bic.w	r3, r3, #7
 8002d28:	4a07      	ldr	r2, [pc, #28]	@ (8002d48 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002d2a:	f043 0303 	orr.w	r3, r3, #3
 8002d2e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002d3c:	bf30      	wfi
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d141      	bne.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d6a:	d131      	bne.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d6c:	4b47      	ldr	r3, [pc, #284]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d72:	4a46      	ldr	r2, [pc, #280]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d7c:	4b43      	ldr	r3, [pc, #268]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d84:	4a41      	ldr	r2, [pc, #260]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d8c:	4b40      	ldr	r3, [pc, #256]	@ (8002e90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2232      	movs	r2, #50	@ 0x32
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	4a3f      	ldr	r2, [pc, #252]	@ (8002e94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	0c9b      	lsrs	r3, r3, #18
 8002d9e:	3301      	adds	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da2:	e002      	b.n	8002daa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002daa:	4b38      	ldr	r3, [pc, #224]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db6:	d102      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f2      	bne.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dbe:	4b33      	ldr	r3, [pc, #204]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dca:	d158      	bne.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e057      	b.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ddc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002de0:	e04d      	b.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002de8:	d141      	bne.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dea:	4b28      	ldr	r3, [pc, #160]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002df6:	d131      	bne.n	8002e5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df8:	4b24      	ldr	r3, [pc, #144]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dfe:	4a23      	ldr	r2, [pc, #140]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e08:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e10:	4a1e      	ldr	r2, [pc, #120]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2232      	movs	r2, #50	@ 0x32
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	4a1c      	ldr	r2, [pc, #112]	@ (8002e94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	0c9b      	lsrs	r3, r3, #18
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e2e:	e002      	b.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e42:	d102      	bne.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f2      	bne.n	8002e30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e56:	d112      	bne.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e011      	b.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e62:	4a0a      	ldr	r2, [pc, #40]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e6c:	e007      	b.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e6e:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e76:	4a05      	ldr	r2, [pc, #20]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	20000004 	.word	0x20000004
 8002e94:	431bde83 	.word	0x431bde83

08002e98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ea2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea6:	6093      	str	r3, [r2, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e2fe      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d075      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed6:	4b97      	ldr	r3, [pc, #604]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee0:	4b94      	ldr	r3, [pc, #592]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	d102      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x3e>
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d002      	beq.n	8002efc <HAL_RCC_OscConfig+0x44>
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	4b8d      	ldr	r3, [pc, #564]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d05b      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x108>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d157      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e2d9      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x74>
 8002f1e:	4b85      	ldr	r3, [pc, #532]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a84      	ldr	r2, [pc, #528]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e01d      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x98>
 8002f36:	4b7f      	ldr	r3, [pc, #508]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b7c      	ldr	r3, [pc, #496]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7b      	ldr	r2, [pc, #492]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f50:	4b78      	ldr	r3, [pc, #480]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a77      	ldr	r2, [pc, #476]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b75      	ldr	r3, [pc, #468]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a74      	ldr	r2, [pc, #464]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7ff f95e 	bl	8002230 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7ff f95a 	bl	8002230 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e29e      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0xc0>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7ff f94a 	bl	8002230 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7ff f946 	bl	8002230 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	@ 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e28a      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb2:	4b60      	ldr	r3, [pc, #384]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xe8>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d075      	beq.n	80030ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fce:	4b59      	ldr	r3, [pc, #356]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fd8:	4b56      	ldr	r3, [pc, #344]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b0c      	cmp	r3, #12
 8002fe6:	d102      	bne.n	8002fee <HAL_RCC_OscConfig+0x136>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d002      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x13c>
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d11f      	bne.n	8003034 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_OscConfig+0x154>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e25d      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b49      	ldr	r3, [pc, #292]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	4946      	ldr	r1, [pc, #280]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003020:	4b45      	ldr	r3, [pc, #276]	@ (8003138 <HAL_RCC_OscConfig+0x280>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff f8b7 	bl	8002198 <HAL_InitTick>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d043      	beq.n	80030b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e249      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d023      	beq.n	8003084 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3c      	ldr	r2, [pc, #240]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7ff f8f2 	bl	8002230 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003050:	f7ff f8ee 	bl	8002230 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e232      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003062:	4b34      	ldr	r3, [pc, #208]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306e:	4b31      	ldr	r3, [pc, #196]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	492d      	ldr	r1, [pc, #180]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
 8003082:	e01a      	b.n	80030ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003084:	4b2b      	ldr	r3, [pc, #172]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2a      	ldr	r2, [pc, #168]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 800308a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800308e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7ff f8ce 	bl	8002230 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003098:	f7ff f8ca 	bl	8002230 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e20e      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030aa:	4b22      	ldr	r3, [pc, #136]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x1e0>
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d041      	beq.n	800314a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d01c      	beq.n	8003108 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d4:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7ff f8a7 	bl	8002230 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e6:	f7ff f8a3 	bl	8002230 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e1e7      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ef      	beq.n	80030e6 <HAL_RCC_OscConfig+0x22e>
 8003106:	e020      	b.n	800314a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003108:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310e:	4a09      	ldr	r2, [pc, #36]	@ (8003134 <HAL_RCC_OscConfig+0x27c>)
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7ff f88a 	bl	8002230 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800311e:	e00d      	b.n	800313c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003120:	f7ff f886 	bl	8002230 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d906      	bls.n	800313c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1ca      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800313c:	4b8c      	ldr	r3, [pc, #560]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ea      	bne.n	8003120 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80a6 	beq.w	80032a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003158:	2300      	movs	r3, #0
 800315a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800315c:	4b84      	ldr	r3, [pc, #528]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_OscConfig+0x2b4>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x2b6>
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	4b7f      	ldr	r3, [pc, #508]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	4a7e      	ldr	r2, [pc, #504]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800317c:	6593      	str	r3, [r2, #88]	@ 0x58
 800317e:	4b7c      	ldr	r3, [pc, #496]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318e:	4b79      	ldr	r3, [pc, #484]	@ (8003374 <HAL_RCC_OscConfig+0x4bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800319a:	4b76      	ldr	r3, [pc, #472]	@ (8003374 <HAL_RCC_OscConfig+0x4bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a75      	ldr	r2, [pc, #468]	@ (8003374 <HAL_RCC_OscConfig+0x4bc>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7ff f843 	bl	8002230 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7ff f83f 	bl	8002230 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e183      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003374 <HAL_RCC_OscConfig+0x4bc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d108      	bne.n	80031e6 <HAL_RCC_OscConfig+0x32e>
 80031d4:	4b66      	ldr	r3, [pc, #408]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031da:	4a65      	ldr	r2, [pc, #404]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031e4:	e024      	b.n	8003230 <HAL_RCC_OscConfig+0x378>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d110      	bne.n	8003210 <HAL_RCC_OscConfig+0x358>
 80031ee:	4b60      	ldr	r3, [pc, #384]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f4:	4a5e      	ldr	r2, [pc, #376]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 80031f6:	f043 0304 	orr.w	r3, r3, #4
 80031fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003204:	4a5a      	ldr	r2, [pc, #360]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800320e:	e00f      	b.n	8003230 <HAL_RCC_OscConfig+0x378>
 8003210:	4b57      	ldr	r3, [pc, #348]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003216:	4a56      	ldr	r2, [pc, #344]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003220:	4b53      	ldr	r3, [pc, #332]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003226:	4a52      	ldr	r2, [pc, #328]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d016      	beq.n	8003266 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe fffa 	bl	8002230 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe fff6 	bl	8002230 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e138      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003256:	4b46      	ldr	r3, [pc, #280]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ed      	beq.n	8003240 <HAL_RCC_OscConfig+0x388>
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe ffe3 	bl	8002230 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe ffdf 	bl	8002230 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e121      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003284:	4b3a      	ldr	r3, [pc, #232]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ed      	bne.n	800326e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003292:	7ffb      	ldrb	r3, [r7, #31]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003298:	4b35      	ldr	r3, [pc, #212]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329c:	4a34      	ldr	r2, [pc, #208]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 800329e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d03c      	beq.n	800332a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 80032ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032be:	4a2c      	ldr	r2, [pc, #176]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe ffb2 	bl	8002230 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d0:	f7fe ffae 	bl	8002230 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e0f2      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032e2:	4b23      	ldr	r3, [pc, #140]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 80032e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ef      	beq.n	80032d0 <HAL_RCC_OscConfig+0x418>
 80032f0:	e01b      	b.n	800332a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 80032f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe ff95 	bl	8002230 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800330a:	f7fe ff91 	bl	8002230 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0d5      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 800331e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ef      	bne.n	800330a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80c9 	beq.w	80034c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003334:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b0c      	cmp	r3, #12
 800333e:	f000 8083 	beq.w	8003448 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d15e      	bne.n	8003408 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334a:	4b09      	ldr	r3, [pc, #36]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a08      	ldr	r2, [pc, #32]	@ (8003370 <HAL_RCC_OscConfig+0x4b8>)
 8003350:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fe ff6b 	bl	8002230 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335c:	e00c      	b.n	8003378 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335e:	f7fe ff67 	bl	8002230 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d905      	bls.n	8003378 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0ab      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003378:	4b55      	ldr	r3, [pc, #340]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ec      	bne.n	800335e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003384:	4b52      	ldr	r3, [pc, #328]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	4b52      	ldr	r3, [pc, #328]	@ (80034d4 <HAL_RCC_OscConfig+0x61c>)
 800338a:	4013      	ands	r3, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6a11      	ldr	r1, [r2, #32]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003394:	3a01      	subs	r2, #1
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	4311      	orrs	r1, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800339e:	0212      	lsls	r2, r2, #8
 80033a0:	4311      	orrs	r1, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033a6:	0852      	lsrs	r2, r2, #1
 80033a8:	3a01      	subs	r2, #1
 80033aa:	0552      	lsls	r2, r2, #21
 80033ac:	4311      	orrs	r1, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033b2:	0852      	lsrs	r2, r2, #1
 80033b4:	3a01      	subs	r2, #1
 80033b6:	0652      	lsls	r2, r2, #25
 80033b8:	4311      	orrs	r1, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033be:	06d2      	lsls	r2, r2, #27
 80033c0:	430a      	orrs	r2, r1
 80033c2:	4943      	ldr	r1, [pc, #268]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c8:	4b41      	ldr	r3, [pc, #260]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a40      	ldr	r2, [pc, #256]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 80033ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d4:	4b3e      	ldr	r3, [pc, #248]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a3d      	ldr	r2, [pc, #244]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 80033da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe ff26 	bl	8002230 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe ff22 	bl	8002230 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e066      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fa:	4b35      	ldr	r3, [pc, #212]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x530>
 8003406:	e05e      	b.n	80034c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003408:	4b31      	ldr	r3, [pc, #196]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a30      	ldr	r2, [pc, #192]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 800340e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe ff0c 	bl	8002230 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe ff08 	bl	8002230 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e04c      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342e:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800343a:	4b25      	ldr	r3, [pc, #148]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	4924      	ldr	r1, [pc, #144]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 8003440:	4b25      	ldr	r3, [pc, #148]	@ (80034d8 <HAL_RCC_OscConfig+0x620>)
 8003442:	4013      	ands	r3, r2
 8003444:	60cb      	str	r3, [r1, #12]
 8003446:	e03e      	b.n	80034c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e039      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003454:	4b1e      	ldr	r3, [pc, #120]	@ (80034d0 <HAL_RCC_OscConfig+0x618>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0203 	and.w	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	429a      	cmp	r2, r3
 8003466:	d12c      	bne.n	80034c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	3b01      	subs	r3, #1
 8003474:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d123      	bne.n	80034c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003484:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d11b      	bne.n	80034c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d113      	bne.n	80034c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	3b01      	subs	r3, #1
 80034bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3720      	adds	r7, #32
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000
 80034d4:	019f800c 	.word	0x019f800c
 80034d8:	feeefffc 	.word	0xfeeefffc

080034dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e11e      	b.n	8003732 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b91      	ldr	r3, [pc, #580]	@ (800373c <HAL_RCC_ClockConfig+0x260>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d910      	bls.n	8003524 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b8e      	ldr	r3, [pc, #568]	@ (800373c <HAL_RCC_ClockConfig+0x260>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 020f 	bic.w	r2, r3, #15
 800350a:	498c      	ldr	r1, [pc, #560]	@ (800373c <HAL_RCC_ClockConfig+0x260>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b8a      	ldr	r3, [pc, #552]	@ (800373c <HAL_RCC_ClockConfig+0x260>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e106      	b.n	8003732 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d073      	beq.n	8003618 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d129      	bne.n	800358c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003538:	4b81      	ldr	r3, [pc, #516]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0f4      	b.n	8003732 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003548:	f000 f99e 	bl	8003888 <RCC_GetSysClockFreqFromPLLSource>
 800354c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4a7c      	ldr	r2, [pc, #496]	@ (8003744 <HAL_RCC_ClockConfig+0x268>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d93f      	bls.n	80035d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003556:	4b7a      	ldr	r3, [pc, #488]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800356a:	2b00      	cmp	r3, #0
 800356c:	d033      	beq.n	80035d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003572:	2b00      	cmp	r3, #0
 8003574:	d12f      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003576:	4b72      	ldr	r3, [pc, #456]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800357e:	4a70      	ldr	r2, [pc, #448]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003584:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003586:	2380      	movs	r3, #128	@ 0x80
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e024      	b.n	80035d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003594:	4b6a      	ldr	r3, [pc, #424]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0c6      	b.n	8003732 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a4:	4b66      	ldr	r3, [pc, #408]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0be      	b.n	8003732 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035b4:	f000 f8ce 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4a61      	ldr	r2, [pc, #388]	@ (8003744 <HAL_RCC_ClockConfig+0x268>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d909      	bls.n	80035d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 80035cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80035d2:	2380      	movs	r3, #128	@ 0x80
 80035d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4957      	ldr	r1, [pc, #348]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fe fe22 	bl	8002230 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7fe fe1e 	bl	8002230 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e095      	b.n	8003732 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b4e      	ldr	r3, [pc, #312]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 020c 	and.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1eb      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d023      	beq.n	800366c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003630:	4b43      	ldr	r3, [pc, #268]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a42      	ldr	r2, [pc, #264]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003636:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800363a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003648:	4b3d      	ldr	r3, [pc, #244]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003650:	4a3b      	ldr	r2, [pc, #236]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003652:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003656:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b39      	ldr	r3, [pc, #228]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4936      	ldr	r1, [pc, #216]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
 800366a:	e008      	b.n	800367e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b80      	cmp	r3, #128	@ 0x80
 8003670:	d105      	bne.n	800367e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003672:	4b33      	ldr	r3, [pc, #204]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	4a32      	ldr	r2, [pc, #200]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003678:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800367c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800367e:	4b2f      	ldr	r3, [pc, #188]	@ (800373c <HAL_RCC_ClockConfig+0x260>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d21d      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368c:	4b2b      	ldr	r3, [pc, #172]	@ (800373c <HAL_RCC_ClockConfig+0x260>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 020f 	bic.w	r2, r3, #15
 8003694:	4929      	ldr	r1, [pc, #164]	@ (800373c <HAL_RCC_ClockConfig+0x260>)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800369c:	f7fe fdc8 	bl	8002230 <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fe fdc4 	bl	8002230 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e03b      	b.n	8003732 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b20      	ldr	r3, [pc, #128]	@ (800373c <HAL_RCC_ClockConfig+0x260>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1ed      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4917      	ldr	r1, [pc, #92]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f2:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490f      	ldr	r1, [pc, #60]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003706:	f000 f825 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <HAL_RCC_ClockConfig+0x264>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490c      	ldr	r1, [pc, #48]	@ (8003748 <HAL_RCC_ClockConfig+0x26c>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	4a0a      	ldr	r2, [pc, #40]	@ (800374c <HAL_RCC_ClockConfig+0x270>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003726:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <HAL_RCC_ClockConfig+0x274>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fd34 	bl	8002198 <HAL_InitTick>
 8003730:	4603      	mov	r3, r0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40022000 	.word	0x40022000
 8003740:	40021000 	.word	0x40021000
 8003744:	04c4b400 	.word	0x04c4b400
 8003748:	0800b8e4 	.word	0x0800b8e4
 800374c:	20000004 	.word	0x20000004
 8003750:	20000008 	.word	0x20000008

08003754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800375a:	4b2c      	ldr	r3, [pc, #176]	@ (800380c <HAL_RCC_GetSysClockFreq+0xb8>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b04      	cmp	r3, #4
 8003764:	d102      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003766:	4b2a      	ldr	r3, [pc, #168]	@ (8003810 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e047      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800376c:	4b27      	ldr	r3, [pc, #156]	@ (800380c <HAL_RCC_GetSysClockFreq+0xb8>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d102      	bne.n	800377e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003778:	4b26      	ldr	r3, [pc, #152]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xc0>)
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	e03e      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800377e:	4b23      	ldr	r3, [pc, #140]	@ (800380c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b0c      	cmp	r3, #12
 8003788:	d136      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800378a:	4b20      	ldr	r3, [pc, #128]	@ (800380c <HAL_RCC_GetSysClockFreq+0xb8>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003794:	4b1d      	ldr	r3, [pc, #116]	@ (800380c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	3301      	adds	r3, #1
 80037a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	4a16      	ldr	r2, [pc, #88]	@ (800380c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b2:	68d2      	ldr	r2, [r2, #12]
 80037b4:	0a12      	lsrs	r2, r2, #8
 80037b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	617b      	str	r3, [r7, #20]
      break;
 80037c0:	e00c      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037c2:	4a13      	ldr	r2, [pc, #76]	@ (8003810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	4a10      	ldr	r2, [pc, #64]	@ (800380c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037cc:	68d2      	ldr	r2, [r2, #12]
 80037ce:	0a12      	lsrs	r2, r2, #8
 80037d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	617b      	str	r3, [r7, #20]
      break;
 80037da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	0e5b      	lsrs	r3, r3, #25
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	3301      	adds	r3, #1
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	e001      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037fc:	693b      	ldr	r3, [r7, #16]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	00f42400 	.word	0x00f42400
 8003814:	016e3600 	.word	0x016e3600

08003818 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800381c:	4b03      	ldr	r3, [pc, #12]	@ (800382c <HAL_RCC_GetHCLKFreq+0x14>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000004 	.word	0x20000004

08003830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003834:	f7ff fff0 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	4904      	ldr	r1, [pc, #16]	@ (8003858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000
 8003858:	0800b8f4 	.word	0x0800b8f4

0800385c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003860:	f7ff ffda 	bl	8003818 <HAL_RCC_GetHCLKFreq>
 8003864:	4602      	mov	r2, r0
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	0adb      	lsrs	r3, r3, #11
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	4904      	ldr	r1, [pc, #16]	@ (8003884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003872:	5ccb      	ldrb	r3, [r1, r3]
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000
 8003884:	0800b8f4 	.word	0x0800b8f4

08003888 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800388e:	4b1e      	ldr	r3, [pc, #120]	@ (8003908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d10c      	bne.n	80038c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038ac:	4a17      	ldr	r2, [pc, #92]	@ (800390c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	4a14      	ldr	r2, [pc, #80]	@ (8003908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038b6:	68d2      	ldr	r2, [r2, #12]
 80038b8:	0a12      	lsrs	r2, r2, #8
 80038ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	617b      	str	r3, [r7, #20]
    break;
 80038c4:	e00c      	b.n	80038e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038c6:	4a12      	ldr	r2, [pc, #72]	@ (8003910 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038d0:	68d2      	ldr	r2, [r2, #12]
 80038d2:	0a12      	lsrs	r2, r2, #8
 80038d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
    break;
 80038de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038e0:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	0e5b      	lsrs	r3, r3, #25
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	3301      	adds	r3, #1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80038fa:	687b      	ldr	r3, [r7, #4]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40021000 	.word	0x40021000
 800390c:	016e3600 	.word	0x016e3600
 8003910:	00f42400 	.word	0x00f42400

08003914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800391c:	2300      	movs	r3, #0
 800391e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003920:	2300      	movs	r3, #0
 8003922:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8098 	beq.w	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003936:	4b43      	ldr	r3, [pc, #268]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	4b40      	ldr	r3, [pc, #256]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	4a3f      	ldr	r2, [pc, #252]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394c:	6593      	str	r3, [r2, #88]	@ 0x58
 800394e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395a:	2301      	movs	r3, #1
 800395c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800395e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a39      	ldr	r2, [pc, #228]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003968:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800396a:	f7fe fc61 	bl	8002230 <HAL_GetTick>
 800396e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003970:	e009      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fe fc5d 	bl	8002230 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d902      	bls.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	74fb      	strb	r3, [r7, #19]
        break;
 8003984:	e005      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003986:	4b30      	ldr	r3, [pc, #192]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0ef      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d159      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003998:	4b2a      	ldr	r3, [pc, #168]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01e      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d019      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039b4:	4b23      	ldr	r3, [pc, #140]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039c0:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039e0:	4a18      	ldr	r2, [pc, #96]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d016      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7fe fc1d 	bl	8002230 <HAL_GetTick>
 80039f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f8:	e00b      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fe fc19 	bl	8002230 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d902      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	74fb      	strb	r3, [r7, #19]
            break;
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ec      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10b      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a26:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	4903      	ldr	r1, [pc, #12]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a3c:	e008      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	74bb      	strb	r3, [r7, #18]
 8003a42:	e005      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a50:	7c7b      	ldrb	r3, [r7, #17]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d105      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a56:	4ba7      	ldr	r3, [pc, #668]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	4aa6      	ldr	r2, [pc, #664]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a6e:	4ba1      	ldr	r3, [pc, #644]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a74:	f023 0203 	bic.w	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	499d      	ldr	r1, [pc, #628]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a90:	4b98      	ldr	r3, [pc, #608]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	f023 020c 	bic.w	r2, r3, #12
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	4995      	ldr	r1, [pc, #596]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ab2:	4b90      	ldr	r3, [pc, #576]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	498c      	ldr	r1, [pc, #560]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ad4:	4b87      	ldr	r3, [pc, #540]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ada:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	4984      	ldr	r1, [pc, #528]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003af6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	497b      	ldr	r1, [pc, #492]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b18:	4b76      	ldr	r3, [pc, #472]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	4973      	ldr	r1, [pc, #460]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	496a      	ldr	r1, [pc, #424]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b5c:	4b65      	ldr	r3, [pc, #404]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4962      	ldr	r1, [pc, #392]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	4959      	ldr	r1, [pc, #356]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ba0:	4b54      	ldr	r3, [pc, #336]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bae:	4951      	ldr	r1, [pc, #324]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	4948      	ldr	r1, [pc, #288]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d015      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003be4:	4b43      	ldr	r3, [pc, #268]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	4940      	ldr	r1, [pc, #256]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c02:	d105      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c04:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a3a      	ldr	r2, [pc, #232]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c0e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d015      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c1c:	4b35      	ldr	r3, [pc, #212]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2a:	4932      	ldr	r1, [pc, #200]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c46:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c54:	4b27      	ldr	r3, [pc, #156]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c62:	4924      	ldr	r1, [pc, #144]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c72:	d105      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c74:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c8c:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9a:	4916      	ldr	r1, [pc, #88]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cac:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a10      	ldr	r2, [pc, #64]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d019      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	4908      	ldr	r1, [pc, #32]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ce2:	d109      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce4:	4b03      	ldr	r3, [pc, #12]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a02      	ldr	r2, [pc, #8]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cee:	60d3      	str	r3, [r2, #12]
 8003cf0:	e002      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d04:	4b29      	ldr	r3, [pc, #164]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	4926      	ldr	r1, [pc, #152]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d24:	4b21      	ldr	r3, [pc, #132]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a20      	ldr	r2, [pc, #128]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d4a:	4918      	ldr	r1, [pc, #96]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d5c:	4b13      	ldr	r3, [pc, #76]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a12      	ldr	r2, [pc, #72]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d66:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d74:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d82:	490a      	ldr	r1, [pc, #40]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d92:	d105      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a04      	ldr	r2, [pc, #16]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003da0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000

08003db0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d070      	beq.n	8003ea4 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd fee8 	bl	8001bac <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d04f      	beq.n	8003e92 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	22ca      	movs	r2, #202	@ 0xca
 8003df8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2253      	movs	r2, #83	@ 0x53
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f878 	bl	8003ef8 <RTC_EnterInitMode>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d126      	bne.n	8003e60 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8003e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e24:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6999      	ldr	r1, [r3, #24]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68d9      	ldr	r1, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	041a      	lsls	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f884 	bl	8003f64 <RTC_ExitInitMode>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d110      	bne.n	8003e88 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1a      	ldr	r2, [r3, #32]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	22ff      	movs	r2, #255	@ 0xff
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e90:	e001      	b.n	8003e96 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d103      	bne.n	8003ea4 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef4 <HAL_RTC_WaitForSynchro+0x44>)
 8003ebe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003ec0:	f7fe f9b6 	bl	8002230 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003ec6:	e009      	b.n	8003edc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ec8:	f7fe f9b2 	bl	8002230 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ed6:	d901      	bls.n	8003edc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e007      	b.n	8003eec <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0ee      	beq.n	8003ec8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	0001005f 	.word	0x0001005f

08003ef8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d123      	bne.n	8003f5a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f20:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f22:	f7fe f985 	bl	8002230 <HAL_GetTick>
 8003f26:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003f28:	e00d      	b.n	8003f46 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f2a:	f7fe f981 	bl	8002230 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f38:	d905      	bls.n	8003f46 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2203      	movs	r2, #3
 8003f42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <RTC_EnterInitMode+0x62>
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d1e7      	bne.n	8003f2a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f7e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10c      	bne.n	8003fa8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff8e 	bl	8003eb0 <HAL_RTC_WaitForSynchro>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d022      	beq.n	8003fe0 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	73fb      	strb	r3, [r7, #15]
 8003fa6:	e01b      	b.n	8003fe0 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0220 	bic.w	r2, r2, #32
 8003fb6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff79 	bl	8003eb0 <HAL_RTC_WaitForSynchro>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0220 	orr.w	r2, r2, #32
 8003fde:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004002:	2302      	movs	r3, #2
 8004004:	e072      	b.n	80040ec <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	22ca      	movs	r2, #202	@ 0xca
 800401c:	625a      	str	r2, [r3, #36]	@ 0x24
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2253      	movs	r2, #83	@ 0x53
 8004024:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004034:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2204      	movs	r2, #4
 800403c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d120      	bne.n	800408e <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
  {
    tickstart = HAL_GetTick();
 800404c:	f7fe f8f0 	bl	8002230 <HAL_GetTick>
 8004050:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8004052:	e015      	b.n	8004080 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004054:	f7fe f8ec 	bl	8002230 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004062:	d90d      	bls.n	8004080 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	22ff      	movs	r2, #255	@ 0xff
 800406a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2203      	movs	r2, #3
 8004070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e035      	b.n	80040ec <HAL_RTCEx_SetWakeUpTimer_IT+0x100>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0e2      	beq.n	8004054 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      }
    }
  }
  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f023 0107 	bic.w	r1, r3, #7
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80040aa:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a11      	ldr	r2, [pc, #68]	@ (80040f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80040b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040b4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_RISING_IT();
 80040b6:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	4a0e      	ldr	r2, [pc, #56]	@ (80040f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80040bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040c0:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer */ 
  SET_BIT(hrtc->Instance->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 4288 	orr.w	r2, r2, #17408	@ 0x4400
 80040d0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	22ff      	movs	r2, #255	@ 0xff
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40010400 	.word	0x40010400

080040f8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800410a:	2302      	movs	r3, #2
 800410c:	e049      	b.n	80041a2 <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	22ca      	movs	r2, #202	@ 0xca
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2253      	movs	r2, #83	@ 0x53
 800412c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE | RTC_CR_WUTIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699a      	ldr	r2, [r3, #24]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 4288 	bic.w	r2, r2, #17408	@ 0x4400
 800413c:	619a      	str	r2, [r3, #24]

  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 800413e:	4b1b      	ldr	r3, [pc, #108]	@ (80041ac <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>)
 8004140:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004144:	615a      	str	r2, [r3, #20]

  tickstart = HAL_GetTick();
 8004146:	f7fe f873 	bl	8002230 <HAL_GetTick>
 800414a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800414c:	e015      	b.n	800417a <HAL_RTCEx_DeactivateWakeUpTimer+0x82>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800414e:	f7fe f86f 	bl	8002230 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800415c:	d90d      	bls.n	800417a <HAL_RTCEx_DeactivateWakeUpTimer+0x82>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	22ff      	movs	r2, #255	@ 0xff
 8004164:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2203      	movs	r2, #3
 800416a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e013      	b.n	80041a2 <HAL_RTCEx_DeactivateWakeUpTimer+0xaa>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0e2      	beq.n	800414e <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	22ff      	movs	r2, #255	@ 0xff
 800418e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40010400 	.word	0x40010400

080041b0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(hrtc->Instance->SR, RTC_SR_WUTF) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CWUTF);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2204      	movs	r2, #4
 80041cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 80041ce:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 80041d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80041d4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f80a 	bl	80041f0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40010400 	.word	0x40010400

080041f0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e049      	b.n	80042aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fd fd02 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f000 fb62 	bl	800490c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <HAL_TIM_Base_Stop+0x38>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1a      	ldr	r2, [r3, #32]
 80042d0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <HAL_TIM_Base_Stop+0x38>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e054      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a26      	ldr	r2, [pc, #152]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d022      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004342:	d01d      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a22      	ldr	r2, [pc, #136]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d018      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a21      	ldr	r2, [pc, #132]	@ (80043d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d013      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1f      	ldr	r2, [pc, #124]	@ (80043dc <HAL_TIM_Base_Start_IT+0xdc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00e      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1e      	ldr	r2, [pc, #120]	@ (80043e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1b      	ldr	r2, [pc, #108]	@ (80043e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d115      	bne.n	80043ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	4b19      	ldr	r3, [pc, #100]	@ (80043ec <HAL_TIM_Base_Start_IT+0xec>)
 8004388:	4013      	ands	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b06      	cmp	r3, #6
 8004390:	d015      	beq.n	80043be <HAL_TIM_Base_Start_IT+0xbe>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004398:	d011      	beq.n	80043be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043aa:	e008      	b.n	80043be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e000      	b.n	80043c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40015000 	.word	0x40015000
 80043ec:	00010007 	.word	0x00010007

080043f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d020      	beq.n	8004454 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01b      	beq.n	8004454 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0202 	mvn.w	r2, #2
 8004424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa48 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa3a 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fa4b 	bl	80048e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0204 	mvn.w	r2, #4
 8004470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa22 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa14 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fa25 	bl	80048e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d020      	beq.n	80044ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0208 	mvn.w	r2, #8
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2204      	movs	r2, #4
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f9fc 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f9ee 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f9ff 	bl	80048e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d020      	beq.n	8004538 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01b      	beq.n	8004538 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0210 	mvn.w	r2, #16
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2208      	movs	r2, #8
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f9d6 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f9c8 	bl	80048bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f9d9 	bl	80048e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0201 	mvn.w	r2, #1
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd fae8 	bl	8001b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d104      	bne.n	8004570 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00c      	beq.n	800458a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fbb1 	bl	8004cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00c      	beq.n	80045ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fba9 	bl	8004d00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00c      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f993 	bl	80048f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0220 	mvn.w	r2, #32
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fb71 	bl	8004cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00c      	beq.n	800461a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fb7d 	bl	8004d14 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00c      	beq.n	800463e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fb75 	bl	8004d28 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800465a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fb6d 	bl	8004d3c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fb65 	bl	8004d50 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIM_ConfigClockSource+0x1c>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e0f6      	b.n	800489a <HAL_TIM_ConfigClockSource+0x20a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80046ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a6f      	ldr	r2, [pc, #444]	@ (80048a4 <HAL_TIM_ConfigClockSource+0x214>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	f000 80c1 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x1de>
 80046ec:	4a6d      	ldr	r2, [pc, #436]	@ (80048a4 <HAL_TIM_ConfigClockSource+0x214>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	f200 80c6 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 80046f4:	4a6c      	ldr	r2, [pc, #432]	@ (80048a8 <HAL_TIM_ConfigClockSource+0x218>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	f000 80b9 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x1de>
 80046fc:	4a6a      	ldr	r2, [pc, #424]	@ (80048a8 <HAL_TIM_ConfigClockSource+0x218>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	f200 80be 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004704:	4a69      	ldr	r2, [pc, #420]	@ (80048ac <HAL_TIM_ConfigClockSource+0x21c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	f000 80b1 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x1de>
 800470c:	4a67      	ldr	r2, [pc, #412]	@ (80048ac <HAL_TIM_ConfigClockSource+0x21c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	f200 80b6 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004714:	4a66      	ldr	r2, [pc, #408]	@ (80048b0 <HAL_TIM_ConfigClockSource+0x220>)
 8004716:	4293      	cmp	r3, r2
 8004718:	f000 80a9 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x1de>
 800471c:	4a64      	ldr	r2, [pc, #400]	@ (80048b0 <HAL_TIM_ConfigClockSource+0x220>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f200 80ae 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004724:	4a63      	ldr	r2, [pc, #396]	@ (80048b4 <HAL_TIM_ConfigClockSource+0x224>)
 8004726:	4293      	cmp	r3, r2
 8004728:	f000 80a1 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x1de>
 800472c:	4a61      	ldr	r2, [pc, #388]	@ (80048b4 <HAL_TIM_ConfigClockSource+0x224>)
 800472e:	4293      	cmp	r3, r2
 8004730:	f200 80a6 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004734:	4a60      	ldr	r2, [pc, #384]	@ (80048b8 <HAL_TIM_ConfigClockSource+0x228>)
 8004736:	4293      	cmp	r3, r2
 8004738:	f000 8099 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x1de>
 800473c:	4a5e      	ldr	r2, [pc, #376]	@ (80048b8 <HAL_TIM_ConfigClockSource+0x228>)
 800473e:	4293      	cmp	r3, r2
 8004740:	f200 809e 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004744:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004748:	f000 8091 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x1de>
 800474c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004750:	f200 8096 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004758:	f000 8089 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x1de>
 800475c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004760:	f200 808e 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004768:	d03e      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0x158>
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800476e:	f200 8087 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004776:	f000 8086 	beq.w	8004886 <HAL_TIM_ConfigClockSource+0x1f6>
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477e:	d87f      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004780:	2b70      	cmp	r3, #112	@ 0x70
 8004782:	d01a      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0x12a>
 8004784:	2b70      	cmp	r3, #112	@ 0x70
 8004786:	d87b      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004788:	2b60      	cmp	r3, #96	@ 0x60
 800478a:	d050      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x19e>
 800478c:	2b60      	cmp	r3, #96	@ 0x60
 800478e:	d877      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004790:	2b50      	cmp	r3, #80	@ 0x50
 8004792:	d03c      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x17e>
 8004794:	2b50      	cmp	r3, #80	@ 0x50
 8004796:	d873      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 8004798:	2b40      	cmp	r3, #64	@ 0x40
 800479a:	d058      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x1be>
 800479c:	2b40      	cmp	r3, #64	@ 0x40
 800479e:	d86f      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 80047a0:	2b30      	cmp	r3, #48	@ 0x30
 80047a2:	d064      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x1de>
 80047a4:	2b30      	cmp	r3, #48	@ 0x30
 80047a6:	d86b      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d060      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x1de>
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d867      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d05c      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x1de>
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d05a      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x1de>
 80047b8:	e062      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ca:	f000 f9cf 	bl	8004b6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	609a      	str	r2, [r3, #8]
      break;
 80047e6:	e04f      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047f8:	f000 f9b8 	bl	8004b6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800480a:	609a      	str	r2, [r3, #8]
      break;
 800480c:	e03c      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800481a:	461a      	mov	r2, r3
 800481c:	f000 f92a 	bl	8004a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2150      	movs	r1, #80	@ 0x50
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f983 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 800482c:	e02c      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f949 	bl	8004ad2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2160      	movs	r1, #96	@ 0x60
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f973 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 800484c:	e01c      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800485a:	461a      	mov	r2, r3
 800485c:	f000 f90a 	bl	8004a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2140      	movs	r1, #64	@ 0x40
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f963 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 800486c:	e00c      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f000 f95a 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 800487e:	e003      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	e000      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	00100070 	.word	0x00100070
 80048a8:	00100060 	.word	0x00100060
 80048ac:	00100050 	.word	0x00100050
 80048b0:	00100040 	.word	0x00100040
 80048b4:	00100030 	.word	0x00100030
 80048b8:	00100020 	.word	0x00100020

080048bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a4c      	ldr	r2, [pc, #304]	@ (8004a50 <TIM_Base_SetConfig+0x144>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d017      	beq.n	8004954 <TIM_Base_SetConfig+0x48>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492a:	d013      	beq.n	8004954 <TIM_Base_SetConfig+0x48>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a49      	ldr	r2, [pc, #292]	@ (8004a54 <TIM_Base_SetConfig+0x148>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00f      	beq.n	8004954 <TIM_Base_SetConfig+0x48>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a48      	ldr	r2, [pc, #288]	@ (8004a58 <TIM_Base_SetConfig+0x14c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_Base_SetConfig+0x48>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a47      	ldr	r2, [pc, #284]	@ (8004a5c <TIM_Base_SetConfig+0x150>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_Base_SetConfig+0x48>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a46      	ldr	r2, [pc, #280]	@ (8004a60 <TIM_Base_SetConfig+0x154>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0x48>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a45      	ldr	r2, [pc, #276]	@ (8004a64 <TIM_Base_SetConfig+0x158>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d108      	bne.n	8004966 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a39      	ldr	r2, [pc, #228]	@ (8004a50 <TIM_Base_SetConfig+0x144>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d023      	beq.n	80049b6 <TIM_Base_SetConfig+0xaa>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004974:	d01f      	beq.n	80049b6 <TIM_Base_SetConfig+0xaa>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a36      	ldr	r2, [pc, #216]	@ (8004a54 <TIM_Base_SetConfig+0x148>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01b      	beq.n	80049b6 <TIM_Base_SetConfig+0xaa>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a35      	ldr	r2, [pc, #212]	@ (8004a58 <TIM_Base_SetConfig+0x14c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d017      	beq.n	80049b6 <TIM_Base_SetConfig+0xaa>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a34      	ldr	r2, [pc, #208]	@ (8004a5c <TIM_Base_SetConfig+0x150>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <TIM_Base_SetConfig+0xaa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a33      	ldr	r2, [pc, #204]	@ (8004a60 <TIM_Base_SetConfig+0x154>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00f      	beq.n	80049b6 <TIM_Base_SetConfig+0xaa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a33      	ldr	r2, [pc, #204]	@ (8004a68 <TIM_Base_SetConfig+0x15c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00b      	beq.n	80049b6 <TIM_Base_SetConfig+0xaa>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a32      	ldr	r2, [pc, #200]	@ (8004a6c <TIM_Base_SetConfig+0x160>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <TIM_Base_SetConfig+0xaa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a31      	ldr	r2, [pc, #196]	@ (8004a70 <TIM_Base_SetConfig+0x164>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_Base_SetConfig+0xaa>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a64 <TIM_Base_SetConfig+0x158>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d108      	bne.n	80049c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a18      	ldr	r2, [pc, #96]	@ (8004a50 <TIM_Base_SetConfig+0x144>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <TIM_Base_SetConfig+0x110>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a60 <TIM_Base_SetConfig+0x154>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00f      	beq.n	8004a1c <TIM_Base_SetConfig+0x110>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004a68 <TIM_Base_SetConfig+0x15c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <TIM_Base_SetConfig+0x110>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a19      	ldr	r2, [pc, #100]	@ (8004a6c <TIM_Base_SetConfig+0x160>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d007      	beq.n	8004a1c <TIM_Base_SetConfig+0x110>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <TIM_Base_SetConfig+0x164>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <TIM_Base_SetConfig+0x110>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a13      	ldr	r2, [pc, #76]	@ (8004a64 <TIM_Base_SetConfig+0x158>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d103      	bne.n	8004a24 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d105      	bne.n	8004a42 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f023 0201 	bic.w	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	611a      	str	r2, [r3, #16]
  }
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	40000c00 	.word	0x40000c00
 8004a60:	40013400 	.word	0x40013400
 8004a64:	40015000 	.word	0x40015000
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800

08004a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 0201 	bic.w	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 030a 	bic.w	r3, r3, #10
 8004ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f023 0210 	bic.w	r2, r3, #16
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	031b      	lsls	r3, r3, #12
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f043 0307 	orr.w	r3, r3, #7
 8004b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	021a      	lsls	r2, r3, #8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e074      	b.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a34      	ldr	r2, [pc, #208]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a33      	ldr	r2, [pc, #204]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a31      	ldr	r2, [pc, #196]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a21      	ldr	r2, [pc, #132]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c44:	d01d      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a15      	ldr	r2, [pc, #84]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a18      	ldr	r2, [pc, #96]	@ (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a11      	ldr	r2, [pc, #68]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10c      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40013400 	.word	0x40013400
 8004cc4:	40015000 	.word	0x40015000
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	40014000 	.word	0x40014000

08004cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e042      	b.n	8004dfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fc ff79 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2224      	movs	r2, #36	@ 0x24
 8004d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 ff60 	bl	8005c74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fc61 	bl	800567c <UART_SetConfig>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e01b      	b.n	8004dfc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 ffdf 	bl	8005db8 <UART_CheckIdleState>
 8004dfa:	4603      	mov	r3, r0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	@ 0x28
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d17b      	bne.n	8004f16 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_UART_Transmit+0x26>
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e074      	b.n	8004f18 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2221      	movs	r2, #33	@ 0x21
 8004e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e3e:	f7fd f9f7 	bl	8002230 <HAL_GetTick>
 8004e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	88fa      	ldrh	r2, [r7, #6]
 8004e50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5c:	d108      	bne.n	8004e70 <HAL_UART_Transmit+0x6c>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	e003      	b.n	8004e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e78:	e030      	b.n	8004edc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	2180      	movs	r1, #128	@ 0x80
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f001 f841 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e03d      	b.n	8004f18 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	e007      	b.n	8004eca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1c8      	bne.n	8004e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2140      	movs	r1, #64	@ 0x40
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f001 f80a 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e006      	b.n	8004f18 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	@ 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d137      	bne.n	8004fa8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_UART_Receive_IT+0x24>
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e030      	b.n	8004faa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a18      	ldr	r2, [pc, #96]	@ (8004fb4 <HAL_UART_Receive_IT+0x94>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d01f      	beq.n	8004f98 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d018      	beq.n	8004f98 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	613b      	str	r3, [r7, #16]
   return(result);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	69f9      	ldr	r1, [r7, #28]
 8004f8a:	6a3a      	ldr	r2, [r7, #32]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e6      	bne.n	8004f66 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f98:	88fb      	ldrh	r3, [r7, #6]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f001 f822 	bl	8005fe8 <UART_Start_Receive_IT>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	e000      	b.n	8004faa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3728      	adds	r7, #40	@ 0x28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40008000 	.word	0x40008000

08004fb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b0ba      	sub	sp, #232	@ 0xe8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004fe2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d11b      	bne.n	800502c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d015      	beq.n	800502c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d105      	bne.n	8005018 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800500c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8300 	beq.w	8005622 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
      }
      return;
 800502a:	e2fa      	b.n	8005622 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800502c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8123 	beq.w	800527c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005036:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800503a:	4b8d      	ldr	r3, [pc, #564]	@ (8005270 <HAL_UART_IRQHandler+0x2b8>)
 800503c:	4013      	ands	r3, r2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005042:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005046:	4b8b      	ldr	r3, [pc, #556]	@ (8005274 <HAL_UART_IRQHandler+0x2bc>)
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 8116 	beq.w	800527c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d011      	beq.n	8005080 <HAL_UART_IRQHandler+0xc8>
 800505c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2201      	movs	r2, #1
 800506e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005076:	f043 0201 	orr.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d011      	beq.n	80050b0 <HAL_UART_IRQHandler+0xf8>
 800508c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2202      	movs	r2, #2
 800509e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a6:	f043 0204 	orr.w	r2, r3, #4
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d011      	beq.n	80050e0 <HAL_UART_IRQHandler+0x128>
 80050bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2204      	movs	r2, #4
 80050ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d6:	f043 0202 	orr.w	r2, r3, #2
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d017      	beq.n	800511c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d105      	bne.n	8005104 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80050f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80050fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005270 <HAL_UART_IRQHandler+0x2b8>)
 80050fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00b      	beq.n	800511c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2208      	movs	r2, #8
 800510a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005112:	f043 0208 	orr.w	r2, r3, #8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800511c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005124:	2b00      	cmp	r3, #0
 8005126:	d012      	beq.n	800514e <HAL_UART_IRQHandler+0x196>
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00c      	beq.n	800514e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800513c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8266 	beq.w	8005626 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d013      	beq.n	800518e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d007      	beq.n	800518e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005194:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a2:	2b40      	cmp	r3, #64	@ 0x40
 80051a4:	d005      	beq.n	80051b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d054      	beq.n	800525c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f001 f83a 	bl	800622c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	d146      	bne.n	8005254 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800520a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1d9      	bne.n	80051c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005218:	2b00      	cmp	r3, #0
 800521a:	d017      	beq.n	800524c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005222:	4a15      	ldr	r2, [pc, #84]	@ (8005278 <HAL_UART_IRQHandler+0x2c0>)
 8005224:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800522c:	4618      	mov	r0, r3
 800522e:	f7fd fa3e 	bl	80026ae <HAL_DMA_Abort_IT>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d019      	beq.n	800526c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005246:	4610      	mov	r0, r2
 8005248:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524a:	e00f      	b.n	800526c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f9ff 	bl	8005650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005252:	e00b      	b.n	800526c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f9fb 	bl	8005650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525a:	e007      	b.n	800526c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f9f7 	bl	8005650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800526a:	e1dc      	b.n	8005626 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526c:	bf00      	nop
    return;
 800526e:	e1da      	b.n	8005626 <HAL_UART_IRQHandler+0x66e>
 8005270:	10000001 	.word	0x10000001
 8005274:	04000120 	.word	0x04000120
 8005278:	080062f9 	.word	0x080062f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005280:	2b01      	cmp	r3, #1
 8005282:	f040 8170 	bne.w	8005566 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8169 	beq.w	8005566 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8162 	beq.w	8005566 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2210      	movs	r2, #16
 80052a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b4:	2b40      	cmp	r3, #64	@ 0x40
 80052b6:	f040 80d8 	bne.w	800546a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80af 	beq.w	8005430 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80052d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052dc:	429a      	cmp	r2, r3
 80052de:	f080 80a7 	bcs.w	8005430 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f040 8087 	bne.w	800540e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005314:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800531c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800532a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800532e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005336:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005342:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1da      	bne.n	8005300 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3308      	adds	r3, #8
 8005350:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800535a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3308      	adds	r3, #8
 800536a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800536e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005372:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005376:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e1      	bne.n	800534a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e3      	bne.n	8005386 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e4      	bne.n	80053cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005408:	4618      	mov	r0, r3
 800540a:	f7fd f8f7 	bl	80025fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005420:	b29b      	uxth	r3, r3
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	b29b      	uxth	r3, r3
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f91b 	bl	8005664 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800542e:	e0fc      	b.n	800562a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800543a:	429a      	cmp	r2, r3
 800543c:	f040 80f5 	bne.w	800562a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b20      	cmp	r3, #32
 8005450:	f040 80eb 	bne.w	800562a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f8fe 	bl	8005664 <HAL_UARTEx_RxEventCallback>
      return;
 8005468:	e0df      	b.n	800562a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005476:	b29b      	uxth	r3, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 80d1 	beq.w	800562e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800548c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80cc 	beq.w	800562e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e4      	bne.n	8005496 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	623b      	str	r3, [r7, #32]
   return(result);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e1      	bne.n	80054cc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	e853 3f00 	ldrex	r3, [r3]
 8005528:	60fb      	str	r3, [r7, #12]
   return(result);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f023 0310 	bic.w	r3, r3, #16
 8005530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	69b9      	ldr	r1, [r7, #24]
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	617b      	str	r3, [r7, #20]
   return(result);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e4      	bne.n	800551c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f880 	bl	8005664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005564:	e063      	b.n	800562e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00e      	beq.n	8005590 <HAL_UART_IRQHandler+0x5d8>
 8005572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005586:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f001 fc13 	bl	8006db4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800558e:	e051      	b.n	8005634 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005598:	2b00      	cmp	r3, #0
 800559a:	d014      	beq.n	80055c6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800559c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d105      	bne.n	80055b4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80055a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d03a      	beq.n	8005632 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
    }
    return;
 80055c4:	e035      	b.n	8005632 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_UART_IRQHandler+0x62e>
 80055d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fe9c 	bl	800631c <UART_EndTransmit_IT>
    return;
 80055e4:	e026      	b.n	8005634 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80055e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <HAL_UART_IRQHandler+0x64e>
 80055f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f001 fbec 	bl	8006ddc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005604:	e016      	b.n	8005634 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d010      	beq.n	8005634 <HAL_UART_IRQHandler+0x67c>
 8005612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005616:	2b00      	cmp	r3, #0
 8005618:	da0c      	bge.n	8005634 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 fbd4 	bl	8006dc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005620:	e008      	b.n	8005634 <HAL_UART_IRQHandler+0x67c>
      return;
 8005622:	bf00      	nop
 8005624:	e006      	b.n	8005634 <HAL_UART_IRQHandler+0x67c>
    return;
 8005626:	bf00      	nop
 8005628:	e004      	b.n	8005634 <HAL_UART_IRQHandler+0x67c>
      return;
 800562a:	bf00      	nop
 800562c:	e002      	b.n	8005634 <HAL_UART_IRQHandler+0x67c>
      return;
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <HAL_UART_IRQHandler+0x67c>
    return;
 8005632:	bf00      	nop
  }
}
 8005634:	37e8      	adds	r7, #232	@ 0xe8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop

0800563c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800567c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005680:	b08c      	sub	sp, #48	@ 0x30
 8005682:	af00      	add	r7, sp, #0
 8005684:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	431a      	orrs	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	431a      	orrs	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4baa      	ldr	r3, [pc, #680]	@ (8005954 <UART_SetConfig+0x2d8>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a9f      	ldr	r2, [pc, #636]	@ (8005958 <UART_SetConfig+0x2dc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d004      	beq.n	80056e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e4:	4313      	orrs	r3, r2
 80056e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80056f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	f023 010f 	bic.w	r1, r3, #15
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a90      	ldr	r2, [pc, #576]	@ (800595c <UART_SetConfig+0x2e0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d125      	bne.n	800576c <UART_SetConfig+0xf0>
 8005720:	4b8f      	ldr	r3, [pc, #572]	@ (8005960 <UART_SetConfig+0x2e4>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b03      	cmp	r3, #3
 800572c:	d81a      	bhi.n	8005764 <UART_SetConfig+0xe8>
 800572e:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <UART_SetConfig+0xb8>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	08005745 	.word	0x08005745
 8005738:	08005755 	.word	0x08005755
 800573c:	0800574d 	.word	0x0800574d
 8005740:	0800575d 	.word	0x0800575d
 8005744:	2301      	movs	r3, #1
 8005746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800574a:	e116      	b.n	800597a <UART_SetConfig+0x2fe>
 800574c:	2302      	movs	r3, #2
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005752:	e112      	b.n	800597a <UART_SetConfig+0x2fe>
 8005754:	2304      	movs	r3, #4
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575a:	e10e      	b.n	800597a <UART_SetConfig+0x2fe>
 800575c:	2308      	movs	r3, #8
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e10a      	b.n	800597a <UART_SetConfig+0x2fe>
 8005764:	2310      	movs	r3, #16
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576a:	e106      	b.n	800597a <UART_SetConfig+0x2fe>
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a7c      	ldr	r2, [pc, #496]	@ (8005964 <UART_SetConfig+0x2e8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d138      	bne.n	80057e8 <UART_SetConfig+0x16c>
 8005776:	4b7a      	ldr	r3, [pc, #488]	@ (8005960 <UART_SetConfig+0x2e4>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	f003 030c 	and.w	r3, r3, #12
 8005780:	2b0c      	cmp	r3, #12
 8005782:	d82d      	bhi.n	80057e0 <UART_SetConfig+0x164>
 8005784:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <UART_SetConfig+0x110>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	080057c1 	.word	0x080057c1
 8005790:	080057e1 	.word	0x080057e1
 8005794:	080057e1 	.word	0x080057e1
 8005798:	080057e1 	.word	0x080057e1
 800579c:	080057d1 	.word	0x080057d1
 80057a0:	080057e1 	.word	0x080057e1
 80057a4:	080057e1 	.word	0x080057e1
 80057a8:	080057e1 	.word	0x080057e1
 80057ac:	080057c9 	.word	0x080057c9
 80057b0:	080057e1 	.word	0x080057e1
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	080057e1 	.word	0x080057e1
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c6:	e0d8      	b.n	800597a <UART_SetConfig+0x2fe>
 80057c8:	2302      	movs	r3, #2
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ce:	e0d4      	b.n	800597a <UART_SetConfig+0x2fe>
 80057d0:	2304      	movs	r3, #4
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d6:	e0d0      	b.n	800597a <UART_SetConfig+0x2fe>
 80057d8:	2308      	movs	r3, #8
 80057da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057de:	e0cc      	b.n	800597a <UART_SetConfig+0x2fe>
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e6:	e0c8      	b.n	800597a <UART_SetConfig+0x2fe>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a5e      	ldr	r2, [pc, #376]	@ (8005968 <UART_SetConfig+0x2ec>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d125      	bne.n	800583e <UART_SetConfig+0x1c2>
 80057f2:	4b5b      	ldr	r3, [pc, #364]	@ (8005960 <UART_SetConfig+0x2e4>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057fc:	2b30      	cmp	r3, #48	@ 0x30
 80057fe:	d016      	beq.n	800582e <UART_SetConfig+0x1b2>
 8005800:	2b30      	cmp	r3, #48	@ 0x30
 8005802:	d818      	bhi.n	8005836 <UART_SetConfig+0x1ba>
 8005804:	2b20      	cmp	r3, #32
 8005806:	d00a      	beq.n	800581e <UART_SetConfig+0x1a2>
 8005808:	2b20      	cmp	r3, #32
 800580a:	d814      	bhi.n	8005836 <UART_SetConfig+0x1ba>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <UART_SetConfig+0x19a>
 8005810:	2b10      	cmp	r3, #16
 8005812:	d008      	beq.n	8005826 <UART_SetConfig+0x1aa>
 8005814:	e00f      	b.n	8005836 <UART_SetConfig+0x1ba>
 8005816:	2300      	movs	r3, #0
 8005818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581c:	e0ad      	b.n	800597a <UART_SetConfig+0x2fe>
 800581e:	2302      	movs	r3, #2
 8005820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005824:	e0a9      	b.n	800597a <UART_SetConfig+0x2fe>
 8005826:	2304      	movs	r3, #4
 8005828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800582c:	e0a5      	b.n	800597a <UART_SetConfig+0x2fe>
 800582e:	2308      	movs	r3, #8
 8005830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005834:	e0a1      	b.n	800597a <UART_SetConfig+0x2fe>
 8005836:	2310      	movs	r3, #16
 8005838:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583c:	e09d      	b.n	800597a <UART_SetConfig+0x2fe>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a4a      	ldr	r2, [pc, #296]	@ (800596c <UART_SetConfig+0x2f0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d125      	bne.n	8005894 <UART_SetConfig+0x218>
 8005848:	4b45      	ldr	r3, [pc, #276]	@ (8005960 <UART_SetConfig+0x2e4>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005852:	2bc0      	cmp	r3, #192	@ 0xc0
 8005854:	d016      	beq.n	8005884 <UART_SetConfig+0x208>
 8005856:	2bc0      	cmp	r3, #192	@ 0xc0
 8005858:	d818      	bhi.n	800588c <UART_SetConfig+0x210>
 800585a:	2b80      	cmp	r3, #128	@ 0x80
 800585c:	d00a      	beq.n	8005874 <UART_SetConfig+0x1f8>
 800585e:	2b80      	cmp	r3, #128	@ 0x80
 8005860:	d814      	bhi.n	800588c <UART_SetConfig+0x210>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <UART_SetConfig+0x1f0>
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d008      	beq.n	800587c <UART_SetConfig+0x200>
 800586a:	e00f      	b.n	800588c <UART_SetConfig+0x210>
 800586c:	2300      	movs	r3, #0
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005872:	e082      	b.n	800597a <UART_SetConfig+0x2fe>
 8005874:	2302      	movs	r3, #2
 8005876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800587a:	e07e      	b.n	800597a <UART_SetConfig+0x2fe>
 800587c:	2304      	movs	r3, #4
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005882:	e07a      	b.n	800597a <UART_SetConfig+0x2fe>
 8005884:	2308      	movs	r3, #8
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800588a:	e076      	b.n	800597a <UART_SetConfig+0x2fe>
 800588c:	2310      	movs	r3, #16
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005892:	e072      	b.n	800597a <UART_SetConfig+0x2fe>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a35      	ldr	r2, [pc, #212]	@ (8005970 <UART_SetConfig+0x2f4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d12a      	bne.n	80058f4 <UART_SetConfig+0x278>
 800589e:	4b30      	ldr	r3, [pc, #192]	@ (8005960 <UART_SetConfig+0x2e4>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ac:	d01a      	beq.n	80058e4 <UART_SetConfig+0x268>
 80058ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b2:	d81b      	bhi.n	80058ec <UART_SetConfig+0x270>
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b8:	d00c      	beq.n	80058d4 <UART_SetConfig+0x258>
 80058ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058be:	d815      	bhi.n	80058ec <UART_SetConfig+0x270>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <UART_SetConfig+0x250>
 80058c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c8:	d008      	beq.n	80058dc <UART_SetConfig+0x260>
 80058ca:	e00f      	b.n	80058ec <UART_SetConfig+0x270>
 80058cc:	2300      	movs	r3, #0
 80058ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058d2:	e052      	b.n	800597a <UART_SetConfig+0x2fe>
 80058d4:	2302      	movs	r3, #2
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058da:	e04e      	b.n	800597a <UART_SetConfig+0x2fe>
 80058dc:	2304      	movs	r3, #4
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e2:	e04a      	b.n	800597a <UART_SetConfig+0x2fe>
 80058e4:	2308      	movs	r3, #8
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ea:	e046      	b.n	800597a <UART_SetConfig+0x2fe>
 80058ec:	2310      	movs	r3, #16
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f2:	e042      	b.n	800597a <UART_SetConfig+0x2fe>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a17      	ldr	r2, [pc, #92]	@ (8005958 <UART_SetConfig+0x2dc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d13a      	bne.n	8005974 <UART_SetConfig+0x2f8>
 80058fe:	4b18      	ldr	r3, [pc, #96]	@ (8005960 <UART_SetConfig+0x2e4>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005904:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005908:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800590c:	d01a      	beq.n	8005944 <UART_SetConfig+0x2c8>
 800590e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005912:	d81b      	bhi.n	800594c <UART_SetConfig+0x2d0>
 8005914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005918:	d00c      	beq.n	8005934 <UART_SetConfig+0x2b8>
 800591a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800591e:	d815      	bhi.n	800594c <UART_SetConfig+0x2d0>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <UART_SetConfig+0x2b0>
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005928:	d008      	beq.n	800593c <UART_SetConfig+0x2c0>
 800592a:	e00f      	b.n	800594c <UART_SetConfig+0x2d0>
 800592c:	2300      	movs	r3, #0
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005932:	e022      	b.n	800597a <UART_SetConfig+0x2fe>
 8005934:	2302      	movs	r3, #2
 8005936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800593a:	e01e      	b.n	800597a <UART_SetConfig+0x2fe>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005942:	e01a      	b.n	800597a <UART_SetConfig+0x2fe>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594a:	e016      	b.n	800597a <UART_SetConfig+0x2fe>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005952:	e012      	b.n	800597a <UART_SetConfig+0x2fe>
 8005954:	cfff69f3 	.word	0xcfff69f3
 8005958:	40008000 	.word	0x40008000
 800595c:	40013800 	.word	0x40013800
 8005960:	40021000 	.word	0x40021000
 8005964:	40004400 	.word	0x40004400
 8005968:	40004800 	.word	0x40004800
 800596c:	40004c00 	.word	0x40004c00
 8005970:	40005000 	.word	0x40005000
 8005974:	2310      	movs	r3, #16
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4aae      	ldr	r2, [pc, #696]	@ (8005c38 <UART_SetConfig+0x5bc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	f040 8097 	bne.w	8005ab4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005986:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800598a:	2b08      	cmp	r3, #8
 800598c:	d823      	bhi.n	80059d6 <UART_SetConfig+0x35a>
 800598e:	a201      	add	r2, pc, #4	@ (adr r2, 8005994 <UART_SetConfig+0x318>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059d7 	.word	0x080059d7
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	080059d7 	.word	0x080059d7
 80059a4:	080059c7 	.word	0x080059c7
 80059a8:	080059d7 	.word	0x080059d7
 80059ac:	080059d7 	.word	0x080059d7
 80059b0:	080059d7 	.word	0x080059d7
 80059b4:	080059cf 	.word	0x080059cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b8:	f7fd ff3a 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 80059bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059be:	e010      	b.n	80059e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c0:	4b9e      	ldr	r3, [pc, #632]	@ (8005c3c <UART_SetConfig+0x5c0>)
 80059c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059c4:	e00d      	b.n	80059e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059c6:	f7fd fec5 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 80059ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059cc:	e009      	b.n	80059e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059d4:	e005      	b.n	80059e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8130 	beq.w	8005c4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	4a94      	ldr	r2, [pc, #592]	@ (8005c40 <UART_SetConfig+0x5c4>)
 80059f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f4:	461a      	mov	r2, r3
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d305      	bcc.n	8005a1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d903      	bls.n	8005a22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a20:	e113      	b.n	8005c4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	2200      	movs	r2, #0
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	60fa      	str	r2, [r7, #12]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	4a84      	ldr	r2, [pc, #528]	@ (8005c40 <UART_SetConfig+0x5c4>)
 8005a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2200      	movs	r2, #0
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a44:	f7fb f948 	bl	8000cd8 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	020b      	lsls	r3, r1, #8
 8005a5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a5e:	0202      	lsls	r2, r0, #8
 8005a60:	6979      	ldr	r1, [r7, #20]
 8005a62:	6849      	ldr	r1, [r1, #4]
 8005a64:	0849      	lsrs	r1, r1, #1
 8005a66:	2000      	movs	r0, #0
 8005a68:	460c      	mov	r4, r1
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	eb12 0804 	adds.w	r8, r2, r4
 8005a70:	eb43 0905 	adc.w	r9, r3, r5
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	469a      	mov	sl, r3
 8005a7c:	4693      	mov	fp, r2
 8005a7e:	4652      	mov	r2, sl
 8005a80:	465b      	mov	r3, fp
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fb f927 	bl	8000cd8 <__aeabi_uldivmod>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4613      	mov	r3, r2
 8005a90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a98:	d308      	bcc.n	8005aac <UART_SetConfig+0x430>
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aa0:	d204      	bcs.n	8005aac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	60da      	str	r2, [r3, #12]
 8005aaa:	e0ce      	b.n	8005c4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ab2:	e0ca      	b.n	8005c4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005abc:	d166      	bne.n	8005b8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005abe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d827      	bhi.n	8005b16 <UART_SetConfig+0x49a>
 8005ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <UART_SetConfig+0x450>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005af9 	.word	0x08005af9
 8005ad4:	08005b01 	.word	0x08005b01
 8005ad8:	08005b17 	.word	0x08005b17
 8005adc:	08005b07 	.word	0x08005b07
 8005ae0:	08005b17 	.word	0x08005b17
 8005ae4:	08005b17 	.word	0x08005b17
 8005ae8:	08005b17 	.word	0x08005b17
 8005aec:	08005b0f 	.word	0x08005b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af0:	f7fd fe9e 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 8005af4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005af6:	e014      	b.n	8005b22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af8:	f7fd feb0 	bl	800385c <HAL_RCC_GetPCLK2Freq>
 8005afc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005afe:	e010      	b.n	8005b22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b00:	4b4e      	ldr	r3, [pc, #312]	@ (8005c3c <UART_SetConfig+0x5c0>)
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b04:	e00d      	b.n	8005b22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b06:	f7fd fe25 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8005b0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b0c:	e009      	b.n	8005b22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b14:	e005      	b.n	8005b22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8090 	beq.w	8005c4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	4a44      	ldr	r2, [pc, #272]	@ (8005c40 <UART_SetConfig+0x5c4>)
 8005b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b3c:	005a      	lsls	r2, r3, #1
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	441a      	add	r2, r3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	2b0f      	cmp	r3, #15
 8005b54:	d916      	bls.n	8005b84 <UART_SetConfig+0x508>
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b5c:	d212      	bcs.n	8005b84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f023 030f 	bic.w	r3, r3, #15
 8005b66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	8bfb      	ldrh	r3, [r7, #30]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	8bfa      	ldrh	r2, [r7, #30]
 8005b80:	60da      	str	r2, [r3, #12]
 8005b82:	e062      	b.n	8005c4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b8a:	e05e      	b.n	8005c4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d828      	bhi.n	8005be6 <UART_SetConfig+0x56a>
 8005b94:	a201      	add	r2, pc, #4	@ (adr r2, 8005b9c <UART_SetConfig+0x520>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bd1 	.word	0x08005bd1
 8005ba8:	08005be7 	.word	0x08005be7
 8005bac:	08005bd7 	.word	0x08005bd7
 8005bb0:	08005be7 	.word	0x08005be7
 8005bb4:	08005be7 	.word	0x08005be7
 8005bb8:	08005be7 	.word	0x08005be7
 8005bbc:	08005bdf 	.word	0x08005bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc0:	f7fd fe36 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 8005bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bc6:	e014      	b.n	8005bf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc8:	f7fd fe48 	bl	800385c <HAL_RCC_GetPCLK2Freq>
 8005bcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bce:	e010      	b.n	8005bf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c3c <UART_SetConfig+0x5c0>)
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bd4:	e00d      	b.n	8005bf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd6:	f7fd fdbd 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8005bda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bdc:	e009      	b.n	8005bf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005be4:	e005      	b.n	8005bf2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bf0:	bf00      	nop
    }

    if (pclk != 0U)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d028      	beq.n	8005c4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	4a10      	ldr	r2, [pc, #64]	@ (8005c40 <UART_SetConfig+0x5c4>)
 8005bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c02:	461a      	mov	r2, r3
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	441a      	add	r2, r3
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	2b0f      	cmp	r3, #15
 8005c20:	d910      	bls.n	8005c44 <UART_SetConfig+0x5c8>
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c28:	d20c      	bcs.n	8005c44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60da      	str	r2, [r3, #12]
 8005c34:	e009      	b.n	8005c4a <UART_SetConfig+0x5ce>
 8005c36:	bf00      	nop
 8005c38:	40008000 	.word	0x40008000
 8005c3c:	00f42400 	.word	0x00f42400
 8005c40:	0800b8fc 	.word	0x0800b8fc
      }
      else
      {
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2200      	movs	r2, #0
 8005c64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3730      	adds	r7, #48	@ 0x30
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01a      	beq.n	8005d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d72:	d10a      	bne.n	8005d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	605a      	str	r2, [r3, #4]
  }
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b098      	sub	sp, #96	@ 0x60
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dc8:	f7fc fa32 	bl	8002230 <HAL_GetTick>
 8005dcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0308 	and.w	r3, r3, #8
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d12f      	bne.n	8005e3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ddc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005de4:	2200      	movs	r2, #0
 8005de6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f88e 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d022      	beq.n	8005e3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e063      	b.n	8005f04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d149      	bne.n	8005ede <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e52:	2200      	movs	r2, #0
 8005e54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f857 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d03c      	beq.n	8005ede <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	623b      	str	r3, [r7, #32]
   return(result);
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e6      	bne.n	8005e64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eb6:	61fa      	str	r2, [r7, #28]
 8005eb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	69b9      	ldr	r1, [r7, #24]
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e5      	bne.n	8005e96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e012      	b.n	8005f04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3758      	adds	r7, #88	@ 0x58
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1c:	e04f      	b.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d04b      	beq.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f26:	f7fc f983 	bl	8002230 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d302      	bcc.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e04e      	b.n	8005fde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d037      	beq.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b80      	cmp	r3, #128	@ 0x80
 8005f52:	d034      	beq.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b40      	cmp	r3, #64	@ 0x40
 8005f58:	d031      	beq.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d110      	bne.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f95b 	bl	800622c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e029      	b.n	8005fde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f98:	d111      	bne.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f941 	bl	800622c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e00f      	b.n	8005fde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	bf0c      	ite	eq
 8005fce:	2301      	moveq	r3, #1
 8005fd0:	2300      	movne	r3, #0
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d0a0      	beq.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b0a3      	sub	sp, #140	@ 0x8c
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800601a:	d10e      	bne.n	800603a <UART_Start_Receive_IT+0x52>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <UART_Start_Receive_IT+0x48>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800602a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800602e:	e02d      	b.n	800608c <UART_Start_Receive_IT+0xa4>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	22ff      	movs	r2, #255	@ 0xff
 8006034:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006038:	e028      	b.n	800608c <UART_Start_Receive_IT+0xa4>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10d      	bne.n	800605e <UART_Start_Receive_IT+0x76>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d104      	bne.n	8006054 <UART_Start_Receive_IT+0x6c>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	22ff      	movs	r2, #255	@ 0xff
 800604e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006052:	e01b      	b.n	800608c <UART_Start_Receive_IT+0xa4>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	227f      	movs	r2, #127	@ 0x7f
 8006058:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800605c:	e016      	b.n	800608c <UART_Start_Receive_IT+0xa4>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006066:	d10d      	bne.n	8006084 <UART_Start_Receive_IT+0x9c>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d104      	bne.n	800607a <UART_Start_Receive_IT+0x92>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	227f      	movs	r2, #127	@ 0x7f
 8006074:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006078:	e008      	b.n	800608c <UART_Start_Receive_IT+0xa4>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	223f      	movs	r2, #63	@ 0x3f
 800607e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006082:	e003      	b.n	800608c <UART_Start_Receive_IT+0xa4>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2222      	movs	r2, #34	@ 0x22
 8006098:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3308      	adds	r3, #8
 80060a2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060a6:	e853 3f00 	ldrex	r3, [r3]
 80060aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80060ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3308      	adds	r3, #8
 80060bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80060c0:	673a      	str	r2, [r7, #112]	@ 0x70
 80060c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80060c6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80060ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e3      	bne.n	800609c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060dc:	d14f      	bne.n	800617e <UART_Start_Receive_IT+0x196>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80060e4:	88fa      	ldrh	r2, [r7, #6]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d349      	bcc.n	800617e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f2:	d107      	bne.n	8006104 <UART_Start_Receive_IT+0x11c>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4a47      	ldr	r2, [pc, #284]	@ (800621c <UART_Start_Receive_IT+0x234>)
 8006100:	675a      	str	r2, [r3, #116]	@ 0x74
 8006102:	e002      	b.n	800610a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4a46      	ldr	r2, [pc, #280]	@ (8006220 <UART_Start_Receive_IT+0x238>)
 8006108:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01a      	beq.n	8006148 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006126:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006136:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800613a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e4      	bne.n	8006112 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3308      	adds	r3, #8
 800614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800615e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006168:	64ba      	str	r2, [r7, #72]	@ 0x48
 800616a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800616e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e5      	bne.n	8006148 <UART_Start_Receive_IT+0x160>
 800617c:	e046      	b.n	800620c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006186:	d107      	bne.n	8006198 <UART_Start_Receive_IT+0x1b0>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d103      	bne.n	8006198 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a24      	ldr	r2, [pc, #144]	@ (8006224 <UART_Start_Receive_IT+0x23c>)
 8006194:	675a      	str	r2, [r3, #116]	@ 0x74
 8006196:	e002      	b.n	800619e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a23      	ldr	r2, [pc, #140]	@ (8006228 <UART_Start_Receive_IT+0x240>)
 800619c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d019      	beq.n	80061da <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80061ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80061d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e6      	bne.n	80061a6 <UART_Start_Receive_IT+0x1be>
 80061d8:	e018      	b.n	800620c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	613b      	str	r3, [r7, #16]
   return(result);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f043 0320 	orr.w	r3, r3, #32
 80061ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061f8:	623b      	str	r3, [r7, #32]
 80061fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	69f9      	ldr	r1, [r7, #28]
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	61bb      	str	r3, [r7, #24]
   return(result);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e6      	bne.n	80061da <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	378c      	adds	r7, #140	@ 0x8c
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	08006a49 	.word	0x08006a49
 8006220:	080066e5 	.word	0x080066e5
 8006224:	0800652d 	.word	0x0800652d
 8006228:	08006375 	.word	0x08006375

0800622c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b095      	sub	sp, #84	@ 0x54
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006252:	643b      	str	r3, [r7, #64]	@ 0x40
 8006254:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006258:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e6      	bne.n	8006234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3308      	adds	r3, #8
 800626c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	61fb      	str	r3, [r7, #28]
   return(result);
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3308      	adds	r3, #8
 8006288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800628a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800628c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e3      	bne.n	8006266 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d118      	bne.n	80062d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f023 0310 	bic.w	r3, r3, #16
 80062ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6979      	ldr	r1, [r7, #20]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	613b      	str	r3, [r7, #16]
   return(result);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e6      	bne.n	80062a6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062ec:	bf00      	nop
 80062ee:	3754      	adds	r7, #84	@ 0x54
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006304:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff f99e 	bl	8005650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006314:	bf00      	nop
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	60bb      	str	r3, [r7, #8]
   return(result);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6979      	ldr	r1, [r7, #20]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	613b      	str	r3, [r7, #16]
   return(result);
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e6      	bne.n	8006324 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff f969 	bl	800563c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800636a:	bf00      	nop
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b09c      	sub	sp, #112	@ 0x70
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006382:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800638c:	2b22      	cmp	r3, #34	@ 0x22
 800638e:	f040 80be 	bne.w	800650e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800639c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063a0:	b2d9      	uxtb	r1, r3
 80063a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ac:	400a      	ands	r2, r1
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f040 80a1 	bne.w	800651e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006400:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e6      	bne.n	80063dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3308      	adds	r3, #8
 8006414:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800641e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	667b      	str	r3, [r7, #100]	@ 0x64
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800642e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006430:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006434:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800643c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e5      	bne.n	800640e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a33      	ldr	r2, [pc, #204]	@ (8006528 <UART_RxISR_8BIT+0x1b4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d01f      	beq.n	80064a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	623b      	str	r3, [r7, #32]
   return(result);
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006482:	663b      	str	r3, [r7, #96]	@ 0x60
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800648c:	633b      	str	r3, [r7, #48]	@ 0x30
 800648e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800649a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e6      	bne.n	800646e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d12e      	bne.n	8006506 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	69b9      	ldr	r1, [r7, #24]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	617b      	str	r3, [r7, #20]
   return(result);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e6      	bne.n	80064ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d103      	bne.n	80064f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2210      	movs	r2, #16
 80064f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff f8b0 	bl	8005664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006504:	e00b      	b.n	800651e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fb f8be 	bl	8001688 <HAL_UART_RxCpltCallback>
}
 800650c:	e007      	b.n	800651e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0208 	orr.w	r2, r2, #8
 800651c:	619a      	str	r2, [r3, #24]
}
 800651e:	bf00      	nop
 8006520:	3770      	adds	r7, #112	@ 0x70
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40008000 	.word	0x40008000

0800652c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b09c      	sub	sp, #112	@ 0x70
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800653a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006544:	2b22      	cmp	r3, #34	@ 0x22
 8006546:	f040 80be 	bne.w	80066c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006558:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800655a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800655e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006562:	4013      	ands	r3, r2
 8006564:	b29a      	uxth	r2, r3
 8006566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006568:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656e:	1c9a      	adds	r2, r3, #2
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	f040 80a1 	bne.w	80066d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80065a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80065b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80065c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e6      	bne.n	8006594 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3308      	adds	r3, #8
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3308      	adds	r3, #8
 80065e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80065e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e5      	bne.n	80065c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a33      	ldr	r2, [pc, #204]	@ (80066e0 <UART_RxISR_16BIT+0x1b4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d01f      	beq.n	8006658 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d018      	beq.n	8006658 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	61fb      	str	r3, [r7, #28]
   return(result);
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800663a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006646:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800664a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e6      	bne.n	8006626 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d12e      	bne.n	80066be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	60bb      	str	r3, [r7, #8]
   return(result);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f023 0310 	bic.w	r3, r3, #16
 800667a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6979      	ldr	r1, [r7, #20]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	613b      	str	r3, [r7, #16]
   return(result);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e6      	bne.n	8006666 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d103      	bne.n	80066ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2210      	movs	r2, #16
 80066ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fe ffd4 	bl	8005664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066bc:	e00b      	b.n	80066d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fa ffe2 	bl	8001688 <HAL_UART_RxCpltCallback>
}
 80066c4:	e007      	b.n	80066d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0208 	orr.w	r2, r2, #8
 80066d4:	619a      	str	r2, [r3, #24]
}
 80066d6:	bf00      	nop
 80066d8:	3770      	adds	r7, #112	@ 0x70
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40008000 	.word	0x40008000

080066e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b0ac      	sub	sp, #176	@ 0xb0
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80066f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800671a:	2b22      	cmp	r3, #34	@ 0x22
 800671c:	f040 8183 	bne.w	8006a26 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006726:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800672a:	e126      	b.n	800697a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006732:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006736:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800673a:	b2d9      	uxtb	r1, r3
 800673c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006740:	b2da      	uxtb	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006746:	400a      	ands	r2, r1
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d053      	beq.n	8006826 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800677e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d011      	beq.n	80067ae <UART_RxISR_8BIT_FIFOEN+0xca>
 800678a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800678e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00b      	beq.n	80067ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2201      	movs	r2, #1
 800679c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a4:	f043 0201 	orr.w	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d011      	beq.n	80067de <UART_RxISR_8BIT_FIFOEN+0xfa>
 80067ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00b      	beq.n	80067de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2202      	movs	r2, #2
 80067cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d4:	f043 0204 	orr.w	r2, r3, #4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d011      	beq.n	800680e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80067ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2204      	movs	r2, #4
 80067fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006804:	f043 0202 	orr.w	r2, r3, #2
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006814:	2b00      	cmp	r3, #0
 8006816:	d006      	beq.n	8006826 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7fe ff19 	bl	8005650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 80a3 	bne.w	800697a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006856:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006858:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800685c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e4      	bne.n	8006834 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800687a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800687c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006880:	f023 0301 	bic.w	r3, r3, #1
 8006884:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3308      	adds	r3, #8
 800688e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006892:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006894:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006898:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80068a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e1      	bne.n	800686a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a60      	ldr	r2, [pc, #384]	@ (8006a40 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d021      	beq.n	8006908 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01a      	beq.n	8006908 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80068e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80068f6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e4      	bne.n	80068d2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800690c:	2b01      	cmp	r3, #1
 800690e:	d130      	bne.n	8006972 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006938:	643b      	str	r3, [r7, #64]	@ 0x40
 800693a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800693e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e4      	bne.n	8006916 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b10      	cmp	r3, #16
 8006958:	d103      	bne.n	8006962 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2210      	movs	r2, #16
 8006960:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fe fe7a 	bl	8005664 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006970:	e00e      	b.n	8006990 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa fe88 	bl	8001688 <HAL_UART_RxCpltCallback>
        break;
 8006978:	e00a      	b.n	8006990 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800697a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	f47f aece 	bne.w	800672c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006996:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800699a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d049      	beq.n	8006a36 <UART_RxISR_8BIT_FIFOEN+0x352>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80069a8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d242      	bcs.n	8006a36 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3308      	adds	r3, #8
 80069b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80069d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e3      	bne.n	80069b0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a16      	ldr	r2, [pc, #88]	@ (8006a44 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80069ec:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f043 0320 	orr.w	r3, r3, #32
 8006a02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6979      	ldr	r1, [r7, #20]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e4      	bne.n	80069ee <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a24:	e007      	b.n	8006a36 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699a      	ldr	r2, [r3, #24]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0208 	orr.w	r2, r2, #8
 8006a34:	619a      	str	r2, [r3, #24]
}
 8006a36:	bf00      	nop
 8006a38:	37b0      	adds	r7, #176	@ 0xb0
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40008000 	.word	0x40008000
 8006a44:	08006375 	.word	0x08006375

08006a48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b0ae      	sub	sp, #184	@ 0xb8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006a56:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a7e:	2b22      	cmp	r3, #34	@ 0x22
 8006a80:	f040 8187 	bne.w	8006d92 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a8e:	e12a      	b.n	8006ce6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006aa2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006aa6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006aaa:	4013      	ands	r3, r2
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ab2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d053      	beq.n	8006b8e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d011      	beq.n	8006b16 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00b      	beq.n	8006b16 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2201      	movs	r2, #1
 8006b04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0c:	f043 0201 	orr.w	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d011      	beq.n	8006b46 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006b22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00b      	beq.n	8006b46 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2202      	movs	r2, #2
 8006b34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3c:	f043 0204 	orr.w	r2, r3, #4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d011      	beq.n	8006b76 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2204      	movs	r2, #4
 8006b64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b6c:	f043 0202 	orr.w	r2, r3, #2
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d006      	beq.n	8006b8e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7fe fd65 	bl	8005650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f040 80a5 	bne.w	8006ce6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006baa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e2      	bne.n	8006b9c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006bfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e1      	bne.n	8006bd6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a60      	ldr	r2, [pc, #384]	@ (8006dac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d021      	beq.n	8006c74 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01a      	beq.n	8006c74 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c62:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e4      	bne.n	8006c3e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d130      	bne.n	8006cde <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c92:	f023 0310 	bic.w	r3, r3, #16
 8006c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ca6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e4      	bne.n	8006c82 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f003 0310 	and.w	r3, r3, #16
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d103      	bne.n	8006cce <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2210      	movs	r2, #16
 8006ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fe fcc4 	bl	8005664 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006cdc:	e00e      	b.n	8006cfc <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fa fcd2 	bl	8001688 <HAL_UART_RxCpltCallback>
        break;
 8006ce4:	e00a      	b.n	8006cfc <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ce6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d006      	beq.n	8006cfc <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006cee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f47f aeca 	bne.w	8006a90 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d02:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d049      	beq.n	8006da2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d14:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d242      	bcs.n	8006da2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006d40:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e3      	bne.n	8006d1c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a16      	ldr	r2, [pc, #88]	@ (8006db0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006d58:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f043 0320 	orr.w	r3, r3, #32
 8006d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	69b9      	ldr	r1, [r7, #24]
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	617b      	str	r3, [r7, #20]
   return(result);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e4      	bne.n	8006d5a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d90:	e007      	b.n	8006da2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0208 	orr.w	r2, r2, #8
 8006da0:	619a      	str	r2, [r3, #24]
}
 8006da2:	bf00      	nop
 8006da4:	37b8      	adds	r7, #184	@ 0xb8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40008000 	.word	0x40008000
 8006db0:	0800652d 	.word	0x0800652d

08006db4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e027      	b.n	8006e56 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2224      	movs	r2, #36	@ 0x24
 8006e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0201 	bic.w	r2, r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006e34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e76:	2302      	movs	r3, #2
 8006e78:	e02d      	b.n	8006ed6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2224      	movs	r2, #36	@ 0x24
 8006e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0201 	bic.w	r2, r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f850 	bl	8006f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e02d      	b.n	8006f52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2224      	movs	r2, #36	@ 0x24
 8006f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0201 	bic.w	r2, r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f812 	bl	8006f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d108      	bne.n	8006f7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f7c:	e031      	b.n	8006fe2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f7e:	2308      	movs	r3, #8
 8006f80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f82:	2308      	movs	r3, #8
 8006f84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	0e5b      	lsrs	r3, r3, #25
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	0f5b      	lsrs	r3, r3, #29
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	7b3a      	ldrb	r2, [r7, #12]
 8006faa:	4911      	ldr	r1, [pc, #68]	@ (8006ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8006fac:	5c8a      	ldrb	r2, [r1, r2]
 8006fae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fb2:	7b3a      	ldrb	r2, [r7, #12]
 8006fb4:	490f      	ldr	r1, [pc, #60]	@ (8006ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8006fb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	7b7a      	ldrb	r2, [r7, #13]
 8006fc8:	4909      	ldr	r1, [pc, #36]	@ (8006ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8006fca:	5c8a      	ldrb	r2, [r1, r2]
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fd0:	7b7a      	ldrb	r2, [r7, #13]
 8006fd2:	4908      	ldr	r1, [pc, #32]	@ (8006ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8006fd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	0800b914 	.word	0x0800b914
 8006ff4:	0800b91c 	.word	0x0800b91c

08006ff8 <__cvt>:
 8006ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	ec57 6b10 	vmov	r6, r7, d0
 8007000:	2f00      	cmp	r7, #0
 8007002:	460c      	mov	r4, r1
 8007004:	4619      	mov	r1, r3
 8007006:	463b      	mov	r3, r7
 8007008:	bfbb      	ittet	lt
 800700a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800700e:	461f      	movlt	r7, r3
 8007010:	2300      	movge	r3, #0
 8007012:	232d      	movlt	r3, #45	@ 0x2d
 8007014:	700b      	strb	r3, [r1, #0]
 8007016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007018:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800701c:	4691      	mov	r9, r2
 800701e:	f023 0820 	bic.w	r8, r3, #32
 8007022:	bfbc      	itt	lt
 8007024:	4632      	movlt	r2, r6
 8007026:	4616      	movlt	r6, r2
 8007028:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800702c:	d005      	beq.n	800703a <__cvt+0x42>
 800702e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007032:	d100      	bne.n	8007036 <__cvt+0x3e>
 8007034:	3401      	adds	r4, #1
 8007036:	2102      	movs	r1, #2
 8007038:	e000      	b.n	800703c <__cvt+0x44>
 800703a:	2103      	movs	r1, #3
 800703c:	ab03      	add	r3, sp, #12
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	ab02      	add	r3, sp, #8
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	ec47 6b10 	vmov	d0, r6, r7
 8007048:	4653      	mov	r3, sl
 800704a:	4622      	mov	r2, r4
 800704c:	f001 f8d8 	bl	8008200 <_dtoa_r>
 8007050:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007054:	4605      	mov	r5, r0
 8007056:	d119      	bne.n	800708c <__cvt+0x94>
 8007058:	f019 0f01 	tst.w	r9, #1
 800705c:	d00e      	beq.n	800707c <__cvt+0x84>
 800705e:	eb00 0904 	add.w	r9, r0, r4
 8007062:	2200      	movs	r2, #0
 8007064:	2300      	movs	r3, #0
 8007066:	4630      	mov	r0, r6
 8007068:	4639      	mov	r1, r7
 800706a:	f7f9 fd55 	bl	8000b18 <__aeabi_dcmpeq>
 800706e:	b108      	cbz	r0, 8007074 <__cvt+0x7c>
 8007070:	f8cd 900c 	str.w	r9, [sp, #12]
 8007074:	2230      	movs	r2, #48	@ 0x30
 8007076:	9b03      	ldr	r3, [sp, #12]
 8007078:	454b      	cmp	r3, r9
 800707a:	d31e      	bcc.n	80070ba <__cvt+0xc2>
 800707c:	9b03      	ldr	r3, [sp, #12]
 800707e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007080:	1b5b      	subs	r3, r3, r5
 8007082:	4628      	mov	r0, r5
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	b004      	add	sp, #16
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007090:	eb00 0904 	add.w	r9, r0, r4
 8007094:	d1e5      	bne.n	8007062 <__cvt+0x6a>
 8007096:	7803      	ldrb	r3, [r0, #0]
 8007098:	2b30      	cmp	r3, #48	@ 0x30
 800709a:	d10a      	bne.n	80070b2 <__cvt+0xba>
 800709c:	2200      	movs	r2, #0
 800709e:	2300      	movs	r3, #0
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 fd38 	bl	8000b18 <__aeabi_dcmpeq>
 80070a8:	b918      	cbnz	r0, 80070b2 <__cvt+0xba>
 80070aa:	f1c4 0401 	rsb	r4, r4, #1
 80070ae:	f8ca 4000 	str.w	r4, [sl]
 80070b2:	f8da 3000 	ldr.w	r3, [sl]
 80070b6:	4499      	add	r9, r3
 80070b8:	e7d3      	b.n	8007062 <__cvt+0x6a>
 80070ba:	1c59      	adds	r1, r3, #1
 80070bc:	9103      	str	r1, [sp, #12]
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	e7d9      	b.n	8007076 <__cvt+0x7e>

080070c2 <__exponent>:
 80070c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070c4:	2900      	cmp	r1, #0
 80070c6:	bfba      	itte	lt
 80070c8:	4249      	neglt	r1, r1
 80070ca:	232d      	movlt	r3, #45	@ 0x2d
 80070cc:	232b      	movge	r3, #43	@ 0x2b
 80070ce:	2909      	cmp	r1, #9
 80070d0:	7002      	strb	r2, [r0, #0]
 80070d2:	7043      	strb	r3, [r0, #1]
 80070d4:	dd29      	ble.n	800712a <__exponent+0x68>
 80070d6:	f10d 0307 	add.w	r3, sp, #7
 80070da:	461d      	mov	r5, r3
 80070dc:	270a      	movs	r7, #10
 80070de:	461a      	mov	r2, r3
 80070e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80070e4:	fb07 1416 	mls	r4, r7, r6, r1
 80070e8:	3430      	adds	r4, #48	@ 0x30
 80070ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80070ee:	460c      	mov	r4, r1
 80070f0:	2c63      	cmp	r4, #99	@ 0x63
 80070f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80070f6:	4631      	mov	r1, r6
 80070f8:	dcf1      	bgt.n	80070de <__exponent+0x1c>
 80070fa:	3130      	adds	r1, #48	@ 0x30
 80070fc:	1e94      	subs	r4, r2, #2
 80070fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007102:	1c41      	adds	r1, r0, #1
 8007104:	4623      	mov	r3, r4
 8007106:	42ab      	cmp	r3, r5
 8007108:	d30a      	bcc.n	8007120 <__exponent+0x5e>
 800710a:	f10d 0309 	add.w	r3, sp, #9
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	42ac      	cmp	r4, r5
 8007112:	bf88      	it	hi
 8007114:	2300      	movhi	r3, #0
 8007116:	3302      	adds	r3, #2
 8007118:	4403      	add	r3, r0
 800711a:	1a18      	subs	r0, r3, r0
 800711c:	b003      	add	sp, #12
 800711e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007120:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007124:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007128:	e7ed      	b.n	8007106 <__exponent+0x44>
 800712a:	2330      	movs	r3, #48	@ 0x30
 800712c:	3130      	adds	r1, #48	@ 0x30
 800712e:	7083      	strb	r3, [r0, #2]
 8007130:	70c1      	strb	r1, [r0, #3]
 8007132:	1d03      	adds	r3, r0, #4
 8007134:	e7f1      	b.n	800711a <__exponent+0x58>
	...

08007138 <_printf_float>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	b08d      	sub	sp, #52	@ 0x34
 800713e:	460c      	mov	r4, r1
 8007140:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007144:	4616      	mov	r6, r2
 8007146:	461f      	mov	r7, r3
 8007148:	4605      	mov	r5, r0
 800714a:	f000 ff4b 	bl	8007fe4 <_localeconv_r>
 800714e:	6803      	ldr	r3, [r0, #0]
 8007150:	9304      	str	r3, [sp, #16]
 8007152:	4618      	mov	r0, r3
 8007154:	f7f9 f8b4 	bl	80002c0 <strlen>
 8007158:	2300      	movs	r3, #0
 800715a:	930a      	str	r3, [sp, #40]	@ 0x28
 800715c:	f8d8 3000 	ldr.w	r3, [r8]
 8007160:	9005      	str	r0, [sp, #20]
 8007162:	3307      	adds	r3, #7
 8007164:	f023 0307 	bic.w	r3, r3, #7
 8007168:	f103 0208 	add.w	r2, r3, #8
 800716c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007170:	f8d4 b000 	ldr.w	fp, [r4]
 8007174:	f8c8 2000 	str.w	r2, [r8]
 8007178:	e9d3 8900 	ldrd	r8, r9, [r3]
 800717c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007180:	9307      	str	r3, [sp, #28]
 8007182:	f8cd 8018 	str.w	r8, [sp, #24]
 8007186:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800718a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800718e:	4b9c      	ldr	r3, [pc, #624]	@ (8007400 <_printf_float+0x2c8>)
 8007190:	f04f 32ff 	mov.w	r2, #4294967295
 8007194:	f7f9 fcf2 	bl	8000b7c <__aeabi_dcmpun>
 8007198:	bb70      	cbnz	r0, 80071f8 <_printf_float+0xc0>
 800719a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800719e:	4b98      	ldr	r3, [pc, #608]	@ (8007400 <_printf_float+0x2c8>)
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295
 80071a4:	f7f9 fccc 	bl	8000b40 <__aeabi_dcmple>
 80071a8:	bb30      	cbnz	r0, 80071f8 <_printf_float+0xc0>
 80071aa:	2200      	movs	r2, #0
 80071ac:	2300      	movs	r3, #0
 80071ae:	4640      	mov	r0, r8
 80071b0:	4649      	mov	r1, r9
 80071b2:	f7f9 fcbb 	bl	8000b2c <__aeabi_dcmplt>
 80071b6:	b110      	cbz	r0, 80071be <_printf_float+0x86>
 80071b8:	232d      	movs	r3, #45	@ 0x2d
 80071ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071be:	4a91      	ldr	r2, [pc, #580]	@ (8007404 <_printf_float+0x2cc>)
 80071c0:	4b91      	ldr	r3, [pc, #580]	@ (8007408 <_printf_float+0x2d0>)
 80071c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071c6:	bf94      	ite	ls
 80071c8:	4690      	movls	r8, r2
 80071ca:	4698      	movhi	r8, r3
 80071cc:	2303      	movs	r3, #3
 80071ce:	6123      	str	r3, [r4, #16]
 80071d0:	f02b 0304 	bic.w	r3, fp, #4
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	f04f 0900 	mov.w	r9, #0
 80071da:	9700      	str	r7, [sp, #0]
 80071dc:	4633      	mov	r3, r6
 80071de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80071e0:	4621      	mov	r1, r4
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 f9d2 	bl	800758c <_printf_common>
 80071e8:	3001      	adds	r0, #1
 80071ea:	f040 808d 	bne.w	8007308 <_printf_float+0x1d0>
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295
 80071f2:	b00d      	add	sp, #52	@ 0x34
 80071f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	4649      	mov	r1, r9
 8007200:	f7f9 fcbc 	bl	8000b7c <__aeabi_dcmpun>
 8007204:	b140      	cbz	r0, 8007218 <_printf_float+0xe0>
 8007206:	464b      	mov	r3, r9
 8007208:	2b00      	cmp	r3, #0
 800720a:	bfbc      	itt	lt
 800720c:	232d      	movlt	r3, #45	@ 0x2d
 800720e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007212:	4a7e      	ldr	r2, [pc, #504]	@ (800740c <_printf_float+0x2d4>)
 8007214:	4b7e      	ldr	r3, [pc, #504]	@ (8007410 <_printf_float+0x2d8>)
 8007216:	e7d4      	b.n	80071c2 <_printf_float+0x8a>
 8007218:	6863      	ldr	r3, [r4, #4]
 800721a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800721e:	9206      	str	r2, [sp, #24]
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	d13b      	bne.n	800729c <_printf_float+0x164>
 8007224:	2306      	movs	r3, #6
 8007226:	6063      	str	r3, [r4, #4]
 8007228:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800722c:	2300      	movs	r3, #0
 800722e:	6022      	str	r2, [r4, #0]
 8007230:	9303      	str	r3, [sp, #12]
 8007232:	ab0a      	add	r3, sp, #40	@ 0x28
 8007234:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007238:	ab09      	add	r3, sp, #36	@ 0x24
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	6861      	ldr	r1, [r4, #4]
 800723e:	ec49 8b10 	vmov	d0, r8, r9
 8007242:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007246:	4628      	mov	r0, r5
 8007248:	f7ff fed6 	bl	8006ff8 <__cvt>
 800724c:	9b06      	ldr	r3, [sp, #24]
 800724e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007250:	2b47      	cmp	r3, #71	@ 0x47
 8007252:	4680      	mov	r8, r0
 8007254:	d129      	bne.n	80072aa <_printf_float+0x172>
 8007256:	1cc8      	adds	r0, r1, #3
 8007258:	db02      	blt.n	8007260 <_printf_float+0x128>
 800725a:	6863      	ldr	r3, [r4, #4]
 800725c:	4299      	cmp	r1, r3
 800725e:	dd41      	ble.n	80072e4 <_printf_float+0x1ac>
 8007260:	f1aa 0a02 	sub.w	sl, sl, #2
 8007264:	fa5f fa8a 	uxtb.w	sl, sl
 8007268:	3901      	subs	r1, #1
 800726a:	4652      	mov	r2, sl
 800726c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007270:	9109      	str	r1, [sp, #36]	@ 0x24
 8007272:	f7ff ff26 	bl	80070c2 <__exponent>
 8007276:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007278:	1813      	adds	r3, r2, r0
 800727a:	2a01      	cmp	r2, #1
 800727c:	4681      	mov	r9, r0
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	dc02      	bgt.n	8007288 <_printf_float+0x150>
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	07d2      	lsls	r2, r2, #31
 8007286:	d501      	bpl.n	800728c <_printf_float+0x154>
 8007288:	3301      	adds	r3, #1
 800728a:	6123      	str	r3, [r4, #16]
 800728c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0a2      	beq.n	80071da <_printf_float+0xa2>
 8007294:	232d      	movs	r3, #45	@ 0x2d
 8007296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800729a:	e79e      	b.n	80071da <_printf_float+0xa2>
 800729c:	9a06      	ldr	r2, [sp, #24]
 800729e:	2a47      	cmp	r2, #71	@ 0x47
 80072a0:	d1c2      	bne.n	8007228 <_printf_float+0xf0>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1c0      	bne.n	8007228 <_printf_float+0xf0>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e7bd      	b.n	8007226 <_printf_float+0xee>
 80072aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072ae:	d9db      	bls.n	8007268 <_printf_float+0x130>
 80072b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072b4:	d118      	bne.n	80072e8 <_printf_float+0x1b0>
 80072b6:	2900      	cmp	r1, #0
 80072b8:	6863      	ldr	r3, [r4, #4]
 80072ba:	dd0b      	ble.n	80072d4 <_printf_float+0x19c>
 80072bc:	6121      	str	r1, [r4, #16]
 80072be:	b913      	cbnz	r3, 80072c6 <_printf_float+0x18e>
 80072c0:	6822      	ldr	r2, [r4, #0]
 80072c2:	07d0      	lsls	r0, r2, #31
 80072c4:	d502      	bpl.n	80072cc <_printf_float+0x194>
 80072c6:	3301      	adds	r3, #1
 80072c8:	440b      	add	r3, r1
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80072ce:	f04f 0900 	mov.w	r9, #0
 80072d2:	e7db      	b.n	800728c <_printf_float+0x154>
 80072d4:	b913      	cbnz	r3, 80072dc <_printf_float+0x1a4>
 80072d6:	6822      	ldr	r2, [r4, #0]
 80072d8:	07d2      	lsls	r2, r2, #31
 80072da:	d501      	bpl.n	80072e0 <_printf_float+0x1a8>
 80072dc:	3302      	adds	r3, #2
 80072de:	e7f4      	b.n	80072ca <_printf_float+0x192>
 80072e0:	2301      	movs	r3, #1
 80072e2:	e7f2      	b.n	80072ca <_printf_float+0x192>
 80072e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80072e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ea:	4299      	cmp	r1, r3
 80072ec:	db05      	blt.n	80072fa <_printf_float+0x1c2>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	6121      	str	r1, [r4, #16]
 80072f2:	07d8      	lsls	r0, r3, #31
 80072f4:	d5ea      	bpl.n	80072cc <_printf_float+0x194>
 80072f6:	1c4b      	adds	r3, r1, #1
 80072f8:	e7e7      	b.n	80072ca <_printf_float+0x192>
 80072fa:	2900      	cmp	r1, #0
 80072fc:	bfd4      	ite	le
 80072fe:	f1c1 0202 	rsble	r2, r1, #2
 8007302:	2201      	movgt	r2, #1
 8007304:	4413      	add	r3, r2
 8007306:	e7e0      	b.n	80072ca <_printf_float+0x192>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	055a      	lsls	r2, r3, #21
 800730c:	d407      	bmi.n	800731e <_printf_float+0x1e6>
 800730e:	6923      	ldr	r3, [r4, #16]
 8007310:	4642      	mov	r2, r8
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	d12b      	bne.n	8007374 <_printf_float+0x23c>
 800731c:	e767      	b.n	80071ee <_printf_float+0xb6>
 800731e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007322:	f240 80dd 	bls.w	80074e0 <_printf_float+0x3a8>
 8007326:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800732a:	2200      	movs	r2, #0
 800732c:	2300      	movs	r3, #0
 800732e:	f7f9 fbf3 	bl	8000b18 <__aeabi_dcmpeq>
 8007332:	2800      	cmp	r0, #0
 8007334:	d033      	beq.n	800739e <_printf_float+0x266>
 8007336:	4a37      	ldr	r2, [pc, #220]	@ (8007414 <_printf_float+0x2dc>)
 8007338:	2301      	movs	r3, #1
 800733a:	4631      	mov	r1, r6
 800733c:	4628      	mov	r0, r5
 800733e:	47b8      	blx	r7
 8007340:	3001      	adds	r0, #1
 8007342:	f43f af54 	beq.w	80071ee <_printf_float+0xb6>
 8007346:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800734a:	4543      	cmp	r3, r8
 800734c:	db02      	blt.n	8007354 <_printf_float+0x21c>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	07d8      	lsls	r0, r3, #31
 8007352:	d50f      	bpl.n	8007374 <_printf_float+0x23c>
 8007354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007358:	4631      	mov	r1, r6
 800735a:	4628      	mov	r0, r5
 800735c:	47b8      	blx	r7
 800735e:	3001      	adds	r0, #1
 8007360:	f43f af45 	beq.w	80071ee <_printf_float+0xb6>
 8007364:	f04f 0900 	mov.w	r9, #0
 8007368:	f108 38ff 	add.w	r8, r8, #4294967295
 800736c:	f104 0a1a 	add.w	sl, r4, #26
 8007370:	45c8      	cmp	r8, r9
 8007372:	dc09      	bgt.n	8007388 <_printf_float+0x250>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	079b      	lsls	r3, r3, #30
 8007378:	f100 8103 	bmi.w	8007582 <_printf_float+0x44a>
 800737c:	68e0      	ldr	r0, [r4, #12]
 800737e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007380:	4298      	cmp	r0, r3
 8007382:	bfb8      	it	lt
 8007384:	4618      	movlt	r0, r3
 8007386:	e734      	b.n	80071f2 <_printf_float+0xba>
 8007388:	2301      	movs	r3, #1
 800738a:	4652      	mov	r2, sl
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	f43f af2b 	beq.w	80071ee <_printf_float+0xb6>
 8007398:	f109 0901 	add.w	r9, r9, #1
 800739c:	e7e8      	b.n	8007370 <_printf_float+0x238>
 800739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	dc39      	bgt.n	8007418 <_printf_float+0x2e0>
 80073a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007414 <_printf_float+0x2dc>)
 80073a6:	2301      	movs	r3, #1
 80073a8:	4631      	mov	r1, r6
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f af1d 	beq.w	80071ee <_printf_float+0xb6>
 80073b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073b8:	ea59 0303 	orrs.w	r3, r9, r3
 80073bc:	d102      	bne.n	80073c4 <_printf_float+0x28c>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	07d9      	lsls	r1, r3, #31
 80073c2:	d5d7      	bpl.n	8007374 <_printf_float+0x23c>
 80073c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	f43f af0d 	beq.w	80071ee <_printf_float+0xb6>
 80073d4:	f04f 0a00 	mov.w	sl, #0
 80073d8:	f104 0b1a 	add.w	fp, r4, #26
 80073dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073de:	425b      	negs	r3, r3
 80073e0:	4553      	cmp	r3, sl
 80073e2:	dc01      	bgt.n	80073e8 <_printf_float+0x2b0>
 80073e4:	464b      	mov	r3, r9
 80073e6:	e793      	b.n	8007310 <_printf_float+0x1d8>
 80073e8:	2301      	movs	r3, #1
 80073ea:	465a      	mov	r2, fp
 80073ec:	4631      	mov	r1, r6
 80073ee:	4628      	mov	r0, r5
 80073f0:	47b8      	blx	r7
 80073f2:	3001      	adds	r0, #1
 80073f4:	f43f aefb 	beq.w	80071ee <_printf_float+0xb6>
 80073f8:	f10a 0a01 	add.w	sl, sl, #1
 80073fc:	e7ee      	b.n	80073dc <_printf_float+0x2a4>
 80073fe:	bf00      	nop
 8007400:	7fefffff 	.word	0x7fefffff
 8007404:	0800b924 	.word	0x0800b924
 8007408:	0800b928 	.word	0x0800b928
 800740c:	0800b92c 	.word	0x0800b92c
 8007410:	0800b930 	.word	0x0800b930
 8007414:	0800b934 	.word	0x0800b934
 8007418:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800741a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800741e:	4553      	cmp	r3, sl
 8007420:	bfa8      	it	ge
 8007422:	4653      	movge	r3, sl
 8007424:	2b00      	cmp	r3, #0
 8007426:	4699      	mov	r9, r3
 8007428:	dc36      	bgt.n	8007498 <_printf_float+0x360>
 800742a:	f04f 0b00 	mov.w	fp, #0
 800742e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007432:	f104 021a 	add.w	r2, r4, #26
 8007436:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007438:	9306      	str	r3, [sp, #24]
 800743a:	eba3 0309 	sub.w	r3, r3, r9
 800743e:	455b      	cmp	r3, fp
 8007440:	dc31      	bgt.n	80074a6 <_printf_float+0x36e>
 8007442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007444:	459a      	cmp	sl, r3
 8007446:	dc3a      	bgt.n	80074be <_printf_float+0x386>
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	07da      	lsls	r2, r3, #31
 800744c:	d437      	bmi.n	80074be <_printf_float+0x386>
 800744e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007450:	ebaa 0903 	sub.w	r9, sl, r3
 8007454:	9b06      	ldr	r3, [sp, #24]
 8007456:	ebaa 0303 	sub.w	r3, sl, r3
 800745a:	4599      	cmp	r9, r3
 800745c:	bfa8      	it	ge
 800745e:	4699      	movge	r9, r3
 8007460:	f1b9 0f00 	cmp.w	r9, #0
 8007464:	dc33      	bgt.n	80074ce <_printf_float+0x396>
 8007466:	f04f 0800 	mov.w	r8, #0
 800746a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800746e:	f104 0b1a 	add.w	fp, r4, #26
 8007472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007474:	ebaa 0303 	sub.w	r3, sl, r3
 8007478:	eba3 0309 	sub.w	r3, r3, r9
 800747c:	4543      	cmp	r3, r8
 800747e:	f77f af79 	ble.w	8007374 <_printf_float+0x23c>
 8007482:	2301      	movs	r3, #1
 8007484:	465a      	mov	r2, fp
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	f43f aeae 	beq.w	80071ee <_printf_float+0xb6>
 8007492:	f108 0801 	add.w	r8, r8, #1
 8007496:	e7ec      	b.n	8007472 <_printf_float+0x33a>
 8007498:	4642      	mov	r2, r8
 800749a:	4631      	mov	r1, r6
 800749c:	4628      	mov	r0, r5
 800749e:	47b8      	blx	r7
 80074a0:	3001      	adds	r0, #1
 80074a2:	d1c2      	bne.n	800742a <_printf_float+0x2f2>
 80074a4:	e6a3      	b.n	80071ee <_printf_float+0xb6>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4631      	mov	r1, r6
 80074aa:	4628      	mov	r0, r5
 80074ac:	9206      	str	r2, [sp, #24]
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	f43f ae9c 	beq.w	80071ee <_printf_float+0xb6>
 80074b6:	9a06      	ldr	r2, [sp, #24]
 80074b8:	f10b 0b01 	add.w	fp, fp, #1
 80074bc:	e7bb      	b.n	8007436 <_printf_float+0x2fe>
 80074be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074c2:	4631      	mov	r1, r6
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b8      	blx	r7
 80074c8:	3001      	adds	r0, #1
 80074ca:	d1c0      	bne.n	800744e <_printf_float+0x316>
 80074cc:	e68f      	b.n	80071ee <_printf_float+0xb6>
 80074ce:	9a06      	ldr	r2, [sp, #24]
 80074d0:	464b      	mov	r3, r9
 80074d2:	4442      	add	r2, r8
 80074d4:	4631      	mov	r1, r6
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b8      	blx	r7
 80074da:	3001      	adds	r0, #1
 80074dc:	d1c3      	bne.n	8007466 <_printf_float+0x32e>
 80074de:	e686      	b.n	80071ee <_printf_float+0xb6>
 80074e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074e4:	f1ba 0f01 	cmp.w	sl, #1
 80074e8:	dc01      	bgt.n	80074ee <_printf_float+0x3b6>
 80074ea:	07db      	lsls	r3, r3, #31
 80074ec:	d536      	bpl.n	800755c <_printf_float+0x424>
 80074ee:	2301      	movs	r3, #1
 80074f0:	4642      	mov	r2, r8
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b8      	blx	r7
 80074f8:	3001      	adds	r0, #1
 80074fa:	f43f ae78 	beq.w	80071ee <_printf_float+0xb6>
 80074fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	f43f ae70 	beq.w	80071ee <_printf_float+0xb6>
 800750e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007512:	2200      	movs	r2, #0
 8007514:	2300      	movs	r3, #0
 8007516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800751a:	f7f9 fafd 	bl	8000b18 <__aeabi_dcmpeq>
 800751e:	b9c0      	cbnz	r0, 8007552 <_printf_float+0x41a>
 8007520:	4653      	mov	r3, sl
 8007522:	f108 0201 	add.w	r2, r8, #1
 8007526:	4631      	mov	r1, r6
 8007528:	4628      	mov	r0, r5
 800752a:	47b8      	blx	r7
 800752c:	3001      	adds	r0, #1
 800752e:	d10c      	bne.n	800754a <_printf_float+0x412>
 8007530:	e65d      	b.n	80071ee <_printf_float+0xb6>
 8007532:	2301      	movs	r3, #1
 8007534:	465a      	mov	r2, fp
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	f43f ae56 	beq.w	80071ee <_printf_float+0xb6>
 8007542:	f108 0801 	add.w	r8, r8, #1
 8007546:	45d0      	cmp	r8, sl
 8007548:	dbf3      	blt.n	8007532 <_printf_float+0x3fa>
 800754a:	464b      	mov	r3, r9
 800754c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007550:	e6df      	b.n	8007312 <_printf_float+0x1da>
 8007552:	f04f 0800 	mov.w	r8, #0
 8007556:	f104 0b1a 	add.w	fp, r4, #26
 800755a:	e7f4      	b.n	8007546 <_printf_float+0x40e>
 800755c:	2301      	movs	r3, #1
 800755e:	4642      	mov	r2, r8
 8007560:	e7e1      	b.n	8007526 <_printf_float+0x3ee>
 8007562:	2301      	movs	r3, #1
 8007564:	464a      	mov	r2, r9
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	47b8      	blx	r7
 800756c:	3001      	adds	r0, #1
 800756e:	f43f ae3e 	beq.w	80071ee <_printf_float+0xb6>
 8007572:	f108 0801 	add.w	r8, r8, #1
 8007576:	68e3      	ldr	r3, [r4, #12]
 8007578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800757a:	1a5b      	subs	r3, r3, r1
 800757c:	4543      	cmp	r3, r8
 800757e:	dcf0      	bgt.n	8007562 <_printf_float+0x42a>
 8007580:	e6fc      	b.n	800737c <_printf_float+0x244>
 8007582:	f04f 0800 	mov.w	r8, #0
 8007586:	f104 0919 	add.w	r9, r4, #25
 800758a:	e7f4      	b.n	8007576 <_printf_float+0x43e>

0800758c <_printf_common>:
 800758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	4616      	mov	r6, r2
 8007592:	4698      	mov	r8, r3
 8007594:	688a      	ldr	r2, [r1, #8]
 8007596:	690b      	ldr	r3, [r1, #16]
 8007598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800759c:	4293      	cmp	r3, r2
 800759e:	bfb8      	it	lt
 80075a0:	4613      	movlt	r3, r2
 80075a2:	6033      	str	r3, [r6, #0]
 80075a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075a8:	4607      	mov	r7, r0
 80075aa:	460c      	mov	r4, r1
 80075ac:	b10a      	cbz	r2, 80075b2 <_printf_common+0x26>
 80075ae:	3301      	adds	r3, #1
 80075b0:	6033      	str	r3, [r6, #0]
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	0699      	lsls	r1, r3, #26
 80075b6:	bf42      	ittt	mi
 80075b8:	6833      	ldrmi	r3, [r6, #0]
 80075ba:	3302      	addmi	r3, #2
 80075bc:	6033      	strmi	r3, [r6, #0]
 80075be:	6825      	ldr	r5, [r4, #0]
 80075c0:	f015 0506 	ands.w	r5, r5, #6
 80075c4:	d106      	bne.n	80075d4 <_printf_common+0x48>
 80075c6:	f104 0a19 	add.w	sl, r4, #25
 80075ca:	68e3      	ldr	r3, [r4, #12]
 80075cc:	6832      	ldr	r2, [r6, #0]
 80075ce:	1a9b      	subs	r3, r3, r2
 80075d0:	42ab      	cmp	r3, r5
 80075d2:	dc26      	bgt.n	8007622 <_printf_common+0x96>
 80075d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	3b00      	subs	r3, #0
 80075dc:	bf18      	it	ne
 80075de:	2301      	movne	r3, #1
 80075e0:	0692      	lsls	r2, r2, #26
 80075e2:	d42b      	bmi.n	800763c <_printf_common+0xb0>
 80075e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075e8:	4641      	mov	r1, r8
 80075ea:	4638      	mov	r0, r7
 80075ec:	47c8      	blx	r9
 80075ee:	3001      	adds	r0, #1
 80075f0:	d01e      	beq.n	8007630 <_printf_common+0xa4>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	6922      	ldr	r2, [r4, #16]
 80075f6:	f003 0306 	and.w	r3, r3, #6
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	bf02      	ittt	eq
 80075fe:	68e5      	ldreq	r5, [r4, #12]
 8007600:	6833      	ldreq	r3, [r6, #0]
 8007602:	1aed      	subeq	r5, r5, r3
 8007604:	68a3      	ldr	r3, [r4, #8]
 8007606:	bf0c      	ite	eq
 8007608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800760c:	2500      	movne	r5, #0
 800760e:	4293      	cmp	r3, r2
 8007610:	bfc4      	itt	gt
 8007612:	1a9b      	subgt	r3, r3, r2
 8007614:	18ed      	addgt	r5, r5, r3
 8007616:	2600      	movs	r6, #0
 8007618:	341a      	adds	r4, #26
 800761a:	42b5      	cmp	r5, r6
 800761c:	d11a      	bne.n	8007654 <_printf_common+0xc8>
 800761e:	2000      	movs	r0, #0
 8007620:	e008      	b.n	8007634 <_printf_common+0xa8>
 8007622:	2301      	movs	r3, #1
 8007624:	4652      	mov	r2, sl
 8007626:	4641      	mov	r1, r8
 8007628:	4638      	mov	r0, r7
 800762a:	47c8      	blx	r9
 800762c:	3001      	adds	r0, #1
 800762e:	d103      	bne.n	8007638 <_printf_common+0xac>
 8007630:	f04f 30ff 	mov.w	r0, #4294967295
 8007634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007638:	3501      	adds	r5, #1
 800763a:	e7c6      	b.n	80075ca <_printf_common+0x3e>
 800763c:	18e1      	adds	r1, r4, r3
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	2030      	movs	r0, #48	@ 0x30
 8007642:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007646:	4422      	add	r2, r4
 8007648:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800764c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007650:	3302      	adds	r3, #2
 8007652:	e7c7      	b.n	80075e4 <_printf_common+0x58>
 8007654:	2301      	movs	r3, #1
 8007656:	4622      	mov	r2, r4
 8007658:	4641      	mov	r1, r8
 800765a:	4638      	mov	r0, r7
 800765c:	47c8      	blx	r9
 800765e:	3001      	adds	r0, #1
 8007660:	d0e6      	beq.n	8007630 <_printf_common+0xa4>
 8007662:	3601      	adds	r6, #1
 8007664:	e7d9      	b.n	800761a <_printf_common+0x8e>
	...

08007668 <_printf_i>:
 8007668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800766c:	7e0f      	ldrb	r7, [r1, #24]
 800766e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007670:	2f78      	cmp	r7, #120	@ 0x78
 8007672:	4691      	mov	r9, r2
 8007674:	4680      	mov	r8, r0
 8007676:	460c      	mov	r4, r1
 8007678:	469a      	mov	sl, r3
 800767a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800767e:	d807      	bhi.n	8007690 <_printf_i+0x28>
 8007680:	2f62      	cmp	r7, #98	@ 0x62
 8007682:	d80a      	bhi.n	800769a <_printf_i+0x32>
 8007684:	2f00      	cmp	r7, #0
 8007686:	f000 80d2 	beq.w	800782e <_printf_i+0x1c6>
 800768a:	2f58      	cmp	r7, #88	@ 0x58
 800768c:	f000 80b9 	beq.w	8007802 <_printf_i+0x19a>
 8007690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007694:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007698:	e03a      	b.n	8007710 <_printf_i+0xa8>
 800769a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800769e:	2b15      	cmp	r3, #21
 80076a0:	d8f6      	bhi.n	8007690 <_printf_i+0x28>
 80076a2:	a101      	add	r1, pc, #4	@ (adr r1, 80076a8 <_printf_i+0x40>)
 80076a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076a8:	08007701 	.word	0x08007701
 80076ac:	08007715 	.word	0x08007715
 80076b0:	08007691 	.word	0x08007691
 80076b4:	08007691 	.word	0x08007691
 80076b8:	08007691 	.word	0x08007691
 80076bc:	08007691 	.word	0x08007691
 80076c0:	08007715 	.word	0x08007715
 80076c4:	08007691 	.word	0x08007691
 80076c8:	08007691 	.word	0x08007691
 80076cc:	08007691 	.word	0x08007691
 80076d0:	08007691 	.word	0x08007691
 80076d4:	08007815 	.word	0x08007815
 80076d8:	0800773f 	.word	0x0800773f
 80076dc:	080077cf 	.word	0x080077cf
 80076e0:	08007691 	.word	0x08007691
 80076e4:	08007691 	.word	0x08007691
 80076e8:	08007837 	.word	0x08007837
 80076ec:	08007691 	.word	0x08007691
 80076f0:	0800773f 	.word	0x0800773f
 80076f4:	08007691 	.word	0x08007691
 80076f8:	08007691 	.word	0x08007691
 80076fc:	080077d7 	.word	0x080077d7
 8007700:	6833      	ldr	r3, [r6, #0]
 8007702:	1d1a      	adds	r2, r3, #4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6032      	str	r2, [r6, #0]
 8007708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800770c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007710:	2301      	movs	r3, #1
 8007712:	e09d      	b.n	8007850 <_printf_i+0x1e8>
 8007714:	6833      	ldr	r3, [r6, #0]
 8007716:	6820      	ldr	r0, [r4, #0]
 8007718:	1d19      	adds	r1, r3, #4
 800771a:	6031      	str	r1, [r6, #0]
 800771c:	0606      	lsls	r6, r0, #24
 800771e:	d501      	bpl.n	8007724 <_printf_i+0xbc>
 8007720:	681d      	ldr	r5, [r3, #0]
 8007722:	e003      	b.n	800772c <_printf_i+0xc4>
 8007724:	0645      	lsls	r5, r0, #25
 8007726:	d5fb      	bpl.n	8007720 <_printf_i+0xb8>
 8007728:	f9b3 5000 	ldrsh.w	r5, [r3]
 800772c:	2d00      	cmp	r5, #0
 800772e:	da03      	bge.n	8007738 <_printf_i+0xd0>
 8007730:	232d      	movs	r3, #45	@ 0x2d
 8007732:	426d      	negs	r5, r5
 8007734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007738:	4859      	ldr	r0, [pc, #356]	@ (80078a0 <_printf_i+0x238>)
 800773a:	230a      	movs	r3, #10
 800773c:	e011      	b.n	8007762 <_printf_i+0xfa>
 800773e:	6821      	ldr	r1, [r4, #0]
 8007740:	6833      	ldr	r3, [r6, #0]
 8007742:	0608      	lsls	r0, r1, #24
 8007744:	f853 5b04 	ldr.w	r5, [r3], #4
 8007748:	d402      	bmi.n	8007750 <_printf_i+0xe8>
 800774a:	0649      	lsls	r1, r1, #25
 800774c:	bf48      	it	mi
 800774e:	b2ad      	uxthmi	r5, r5
 8007750:	2f6f      	cmp	r7, #111	@ 0x6f
 8007752:	4853      	ldr	r0, [pc, #332]	@ (80078a0 <_printf_i+0x238>)
 8007754:	6033      	str	r3, [r6, #0]
 8007756:	bf14      	ite	ne
 8007758:	230a      	movne	r3, #10
 800775a:	2308      	moveq	r3, #8
 800775c:	2100      	movs	r1, #0
 800775e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007762:	6866      	ldr	r6, [r4, #4]
 8007764:	60a6      	str	r6, [r4, #8]
 8007766:	2e00      	cmp	r6, #0
 8007768:	bfa2      	ittt	ge
 800776a:	6821      	ldrge	r1, [r4, #0]
 800776c:	f021 0104 	bicge.w	r1, r1, #4
 8007770:	6021      	strge	r1, [r4, #0]
 8007772:	b90d      	cbnz	r5, 8007778 <_printf_i+0x110>
 8007774:	2e00      	cmp	r6, #0
 8007776:	d04b      	beq.n	8007810 <_printf_i+0x1a8>
 8007778:	4616      	mov	r6, r2
 800777a:	fbb5 f1f3 	udiv	r1, r5, r3
 800777e:	fb03 5711 	mls	r7, r3, r1, r5
 8007782:	5dc7      	ldrb	r7, [r0, r7]
 8007784:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007788:	462f      	mov	r7, r5
 800778a:	42bb      	cmp	r3, r7
 800778c:	460d      	mov	r5, r1
 800778e:	d9f4      	bls.n	800777a <_printf_i+0x112>
 8007790:	2b08      	cmp	r3, #8
 8007792:	d10b      	bne.n	80077ac <_printf_i+0x144>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	07df      	lsls	r7, r3, #31
 8007798:	d508      	bpl.n	80077ac <_printf_i+0x144>
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	6861      	ldr	r1, [r4, #4]
 800779e:	4299      	cmp	r1, r3
 80077a0:	bfde      	ittt	le
 80077a2:	2330      	movle	r3, #48	@ 0x30
 80077a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077ac:	1b92      	subs	r2, r2, r6
 80077ae:	6122      	str	r2, [r4, #16]
 80077b0:	f8cd a000 	str.w	sl, [sp]
 80077b4:	464b      	mov	r3, r9
 80077b6:	aa03      	add	r2, sp, #12
 80077b8:	4621      	mov	r1, r4
 80077ba:	4640      	mov	r0, r8
 80077bc:	f7ff fee6 	bl	800758c <_printf_common>
 80077c0:	3001      	adds	r0, #1
 80077c2:	d14a      	bne.n	800785a <_printf_i+0x1f2>
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	b004      	add	sp, #16
 80077ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	f043 0320 	orr.w	r3, r3, #32
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	4833      	ldr	r0, [pc, #204]	@ (80078a4 <_printf_i+0x23c>)
 80077d8:	2778      	movs	r7, #120	@ 0x78
 80077da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	6831      	ldr	r1, [r6, #0]
 80077e2:	061f      	lsls	r7, r3, #24
 80077e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80077e8:	d402      	bmi.n	80077f0 <_printf_i+0x188>
 80077ea:	065f      	lsls	r7, r3, #25
 80077ec:	bf48      	it	mi
 80077ee:	b2ad      	uxthmi	r5, r5
 80077f0:	6031      	str	r1, [r6, #0]
 80077f2:	07d9      	lsls	r1, r3, #31
 80077f4:	bf44      	itt	mi
 80077f6:	f043 0320 	orrmi.w	r3, r3, #32
 80077fa:	6023      	strmi	r3, [r4, #0]
 80077fc:	b11d      	cbz	r5, 8007806 <_printf_i+0x19e>
 80077fe:	2310      	movs	r3, #16
 8007800:	e7ac      	b.n	800775c <_printf_i+0xf4>
 8007802:	4827      	ldr	r0, [pc, #156]	@ (80078a0 <_printf_i+0x238>)
 8007804:	e7e9      	b.n	80077da <_printf_i+0x172>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	f023 0320 	bic.w	r3, r3, #32
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	e7f6      	b.n	80077fe <_printf_i+0x196>
 8007810:	4616      	mov	r6, r2
 8007812:	e7bd      	b.n	8007790 <_printf_i+0x128>
 8007814:	6833      	ldr	r3, [r6, #0]
 8007816:	6825      	ldr	r5, [r4, #0]
 8007818:	6961      	ldr	r1, [r4, #20]
 800781a:	1d18      	adds	r0, r3, #4
 800781c:	6030      	str	r0, [r6, #0]
 800781e:	062e      	lsls	r6, r5, #24
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	d501      	bpl.n	8007828 <_printf_i+0x1c0>
 8007824:	6019      	str	r1, [r3, #0]
 8007826:	e002      	b.n	800782e <_printf_i+0x1c6>
 8007828:	0668      	lsls	r0, r5, #25
 800782a:	d5fb      	bpl.n	8007824 <_printf_i+0x1bc>
 800782c:	8019      	strh	r1, [r3, #0]
 800782e:	2300      	movs	r3, #0
 8007830:	6123      	str	r3, [r4, #16]
 8007832:	4616      	mov	r6, r2
 8007834:	e7bc      	b.n	80077b0 <_printf_i+0x148>
 8007836:	6833      	ldr	r3, [r6, #0]
 8007838:	1d1a      	adds	r2, r3, #4
 800783a:	6032      	str	r2, [r6, #0]
 800783c:	681e      	ldr	r6, [r3, #0]
 800783e:	6862      	ldr	r2, [r4, #4]
 8007840:	2100      	movs	r1, #0
 8007842:	4630      	mov	r0, r6
 8007844:	f7f8 fcec 	bl	8000220 <memchr>
 8007848:	b108      	cbz	r0, 800784e <_printf_i+0x1e6>
 800784a:	1b80      	subs	r0, r0, r6
 800784c:	6060      	str	r0, [r4, #4]
 800784e:	6863      	ldr	r3, [r4, #4]
 8007850:	6123      	str	r3, [r4, #16]
 8007852:	2300      	movs	r3, #0
 8007854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007858:	e7aa      	b.n	80077b0 <_printf_i+0x148>
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	4632      	mov	r2, r6
 800785e:	4649      	mov	r1, r9
 8007860:	4640      	mov	r0, r8
 8007862:	47d0      	blx	sl
 8007864:	3001      	adds	r0, #1
 8007866:	d0ad      	beq.n	80077c4 <_printf_i+0x15c>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	079b      	lsls	r3, r3, #30
 800786c:	d413      	bmi.n	8007896 <_printf_i+0x22e>
 800786e:	68e0      	ldr	r0, [r4, #12]
 8007870:	9b03      	ldr	r3, [sp, #12]
 8007872:	4298      	cmp	r0, r3
 8007874:	bfb8      	it	lt
 8007876:	4618      	movlt	r0, r3
 8007878:	e7a6      	b.n	80077c8 <_printf_i+0x160>
 800787a:	2301      	movs	r3, #1
 800787c:	4632      	mov	r2, r6
 800787e:	4649      	mov	r1, r9
 8007880:	4640      	mov	r0, r8
 8007882:	47d0      	blx	sl
 8007884:	3001      	adds	r0, #1
 8007886:	d09d      	beq.n	80077c4 <_printf_i+0x15c>
 8007888:	3501      	adds	r5, #1
 800788a:	68e3      	ldr	r3, [r4, #12]
 800788c:	9903      	ldr	r1, [sp, #12]
 800788e:	1a5b      	subs	r3, r3, r1
 8007890:	42ab      	cmp	r3, r5
 8007892:	dcf2      	bgt.n	800787a <_printf_i+0x212>
 8007894:	e7eb      	b.n	800786e <_printf_i+0x206>
 8007896:	2500      	movs	r5, #0
 8007898:	f104 0619 	add.w	r6, r4, #25
 800789c:	e7f5      	b.n	800788a <_printf_i+0x222>
 800789e:	bf00      	nop
 80078a0:	0800b936 	.word	0x0800b936
 80078a4:	0800b947 	.word	0x0800b947

080078a8 <_scanf_float>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	b087      	sub	sp, #28
 80078ae:	4617      	mov	r7, r2
 80078b0:	9303      	str	r3, [sp, #12]
 80078b2:	688b      	ldr	r3, [r1, #8]
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80078ba:	bf81      	itttt	hi
 80078bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80078c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80078c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80078c8:	608b      	strhi	r3, [r1, #8]
 80078ca:	680b      	ldr	r3, [r1, #0]
 80078cc:	460a      	mov	r2, r1
 80078ce:	f04f 0500 	mov.w	r5, #0
 80078d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80078d6:	f842 3b1c 	str.w	r3, [r2], #28
 80078da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078de:	4680      	mov	r8, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	bf98      	it	ls
 80078e4:	f04f 0b00 	movls.w	fp, #0
 80078e8:	9201      	str	r2, [sp, #4]
 80078ea:	4616      	mov	r6, r2
 80078ec:	46aa      	mov	sl, r5
 80078ee:	46a9      	mov	r9, r5
 80078f0:	9502      	str	r5, [sp, #8]
 80078f2:	68a2      	ldr	r2, [r4, #8]
 80078f4:	b152      	cbz	r2, 800790c <_scanf_float+0x64>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80078fc:	d864      	bhi.n	80079c8 <_scanf_float+0x120>
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d83c      	bhi.n	800797c <_scanf_float+0xd4>
 8007902:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007906:	b2c8      	uxtb	r0, r1
 8007908:	280e      	cmp	r0, #14
 800790a:	d93a      	bls.n	8007982 <_scanf_float+0xda>
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	d003      	beq.n	800791a <_scanf_float+0x72>
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800791e:	f1ba 0f01 	cmp.w	sl, #1
 8007922:	f200 8117 	bhi.w	8007b54 <_scanf_float+0x2ac>
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	429e      	cmp	r6, r3
 800792a:	f200 8108 	bhi.w	8007b3e <_scanf_float+0x296>
 800792e:	2001      	movs	r0, #1
 8007930:	b007      	add	sp, #28
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007936:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800793a:	2a0d      	cmp	r2, #13
 800793c:	d8e6      	bhi.n	800790c <_scanf_float+0x64>
 800793e:	a101      	add	r1, pc, #4	@ (adr r1, 8007944 <_scanf_float+0x9c>)
 8007940:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007944:	08007a8b 	.word	0x08007a8b
 8007948:	0800790d 	.word	0x0800790d
 800794c:	0800790d 	.word	0x0800790d
 8007950:	0800790d 	.word	0x0800790d
 8007954:	08007aeb 	.word	0x08007aeb
 8007958:	08007ac3 	.word	0x08007ac3
 800795c:	0800790d 	.word	0x0800790d
 8007960:	0800790d 	.word	0x0800790d
 8007964:	08007a99 	.word	0x08007a99
 8007968:	0800790d 	.word	0x0800790d
 800796c:	0800790d 	.word	0x0800790d
 8007970:	0800790d 	.word	0x0800790d
 8007974:	0800790d 	.word	0x0800790d
 8007978:	08007a51 	.word	0x08007a51
 800797c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007980:	e7db      	b.n	800793a <_scanf_float+0x92>
 8007982:	290e      	cmp	r1, #14
 8007984:	d8c2      	bhi.n	800790c <_scanf_float+0x64>
 8007986:	a001      	add	r0, pc, #4	@ (adr r0, 800798c <_scanf_float+0xe4>)
 8007988:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800798c:	08007a41 	.word	0x08007a41
 8007990:	0800790d 	.word	0x0800790d
 8007994:	08007a41 	.word	0x08007a41
 8007998:	08007ad7 	.word	0x08007ad7
 800799c:	0800790d 	.word	0x0800790d
 80079a0:	080079e9 	.word	0x080079e9
 80079a4:	08007a27 	.word	0x08007a27
 80079a8:	08007a27 	.word	0x08007a27
 80079ac:	08007a27 	.word	0x08007a27
 80079b0:	08007a27 	.word	0x08007a27
 80079b4:	08007a27 	.word	0x08007a27
 80079b8:	08007a27 	.word	0x08007a27
 80079bc:	08007a27 	.word	0x08007a27
 80079c0:	08007a27 	.word	0x08007a27
 80079c4:	08007a27 	.word	0x08007a27
 80079c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80079ca:	d809      	bhi.n	80079e0 <_scanf_float+0x138>
 80079cc:	2b60      	cmp	r3, #96	@ 0x60
 80079ce:	d8b2      	bhi.n	8007936 <_scanf_float+0x8e>
 80079d0:	2b54      	cmp	r3, #84	@ 0x54
 80079d2:	d07b      	beq.n	8007acc <_scanf_float+0x224>
 80079d4:	2b59      	cmp	r3, #89	@ 0x59
 80079d6:	d199      	bne.n	800790c <_scanf_float+0x64>
 80079d8:	2d07      	cmp	r5, #7
 80079da:	d197      	bne.n	800790c <_scanf_float+0x64>
 80079dc:	2508      	movs	r5, #8
 80079de:	e02c      	b.n	8007a3a <_scanf_float+0x192>
 80079e0:	2b74      	cmp	r3, #116	@ 0x74
 80079e2:	d073      	beq.n	8007acc <_scanf_float+0x224>
 80079e4:	2b79      	cmp	r3, #121	@ 0x79
 80079e6:	e7f6      	b.n	80079d6 <_scanf_float+0x12e>
 80079e8:	6821      	ldr	r1, [r4, #0]
 80079ea:	05c8      	lsls	r0, r1, #23
 80079ec:	d51b      	bpl.n	8007a26 <_scanf_float+0x17e>
 80079ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80079f2:	6021      	str	r1, [r4, #0]
 80079f4:	f109 0901 	add.w	r9, r9, #1
 80079f8:	f1bb 0f00 	cmp.w	fp, #0
 80079fc:	d003      	beq.n	8007a06 <_scanf_float+0x15e>
 80079fe:	3201      	adds	r2, #1
 8007a00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a04:	60a2      	str	r2, [r4, #8]
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	60a3      	str	r3, [r4, #8]
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	6123      	str	r3, [r4, #16]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	607b      	str	r3, [r7, #4]
 8007a1a:	f340 8087 	ble.w	8007b2c <_scanf_float+0x284>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	3301      	adds	r3, #1
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	e765      	b.n	80078f2 <_scanf_float+0x4a>
 8007a26:	eb1a 0105 	adds.w	r1, sl, r5
 8007a2a:	f47f af6f 	bne.w	800790c <_scanf_float+0x64>
 8007a2e:	6822      	ldr	r2, [r4, #0]
 8007a30:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007a34:	6022      	str	r2, [r4, #0]
 8007a36:	460d      	mov	r5, r1
 8007a38:	468a      	mov	sl, r1
 8007a3a:	f806 3b01 	strb.w	r3, [r6], #1
 8007a3e:	e7e2      	b.n	8007a06 <_scanf_float+0x15e>
 8007a40:	6822      	ldr	r2, [r4, #0]
 8007a42:	0610      	lsls	r0, r2, #24
 8007a44:	f57f af62 	bpl.w	800790c <_scanf_float+0x64>
 8007a48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a4c:	6022      	str	r2, [r4, #0]
 8007a4e:	e7f4      	b.n	8007a3a <_scanf_float+0x192>
 8007a50:	f1ba 0f00 	cmp.w	sl, #0
 8007a54:	d10e      	bne.n	8007a74 <_scanf_float+0x1cc>
 8007a56:	f1b9 0f00 	cmp.w	r9, #0
 8007a5a:	d10e      	bne.n	8007a7a <_scanf_float+0x1d2>
 8007a5c:	6822      	ldr	r2, [r4, #0]
 8007a5e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a62:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a66:	d108      	bne.n	8007a7a <_scanf_float+0x1d2>
 8007a68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a6c:	6022      	str	r2, [r4, #0]
 8007a6e:	f04f 0a01 	mov.w	sl, #1
 8007a72:	e7e2      	b.n	8007a3a <_scanf_float+0x192>
 8007a74:	f1ba 0f02 	cmp.w	sl, #2
 8007a78:	d055      	beq.n	8007b26 <_scanf_float+0x27e>
 8007a7a:	2d01      	cmp	r5, #1
 8007a7c:	d002      	beq.n	8007a84 <_scanf_float+0x1dc>
 8007a7e:	2d04      	cmp	r5, #4
 8007a80:	f47f af44 	bne.w	800790c <_scanf_float+0x64>
 8007a84:	3501      	adds	r5, #1
 8007a86:	b2ed      	uxtb	r5, r5
 8007a88:	e7d7      	b.n	8007a3a <_scanf_float+0x192>
 8007a8a:	f1ba 0f01 	cmp.w	sl, #1
 8007a8e:	f47f af3d 	bne.w	800790c <_scanf_float+0x64>
 8007a92:	f04f 0a02 	mov.w	sl, #2
 8007a96:	e7d0      	b.n	8007a3a <_scanf_float+0x192>
 8007a98:	b97d      	cbnz	r5, 8007aba <_scanf_float+0x212>
 8007a9a:	f1b9 0f00 	cmp.w	r9, #0
 8007a9e:	f47f af38 	bne.w	8007912 <_scanf_float+0x6a>
 8007aa2:	6822      	ldr	r2, [r4, #0]
 8007aa4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007aa8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007aac:	f040 8108 	bne.w	8007cc0 <_scanf_float+0x418>
 8007ab0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ab4:	6022      	str	r2, [r4, #0]
 8007ab6:	2501      	movs	r5, #1
 8007ab8:	e7bf      	b.n	8007a3a <_scanf_float+0x192>
 8007aba:	2d03      	cmp	r5, #3
 8007abc:	d0e2      	beq.n	8007a84 <_scanf_float+0x1dc>
 8007abe:	2d05      	cmp	r5, #5
 8007ac0:	e7de      	b.n	8007a80 <_scanf_float+0x1d8>
 8007ac2:	2d02      	cmp	r5, #2
 8007ac4:	f47f af22 	bne.w	800790c <_scanf_float+0x64>
 8007ac8:	2503      	movs	r5, #3
 8007aca:	e7b6      	b.n	8007a3a <_scanf_float+0x192>
 8007acc:	2d06      	cmp	r5, #6
 8007ace:	f47f af1d 	bne.w	800790c <_scanf_float+0x64>
 8007ad2:	2507      	movs	r5, #7
 8007ad4:	e7b1      	b.n	8007a3a <_scanf_float+0x192>
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	0591      	lsls	r1, r2, #22
 8007ada:	f57f af17 	bpl.w	800790c <_scanf_float+0x64>
 8007ade:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007ae2:	6022      	str	r2, [r4, #0]
 8007ae4:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ae8:	e7a7      	b.n	8007a3a <_scanf_float+0x192>
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007af0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007af4:	d006      	beq.n	8007b04 <_scanf_float+0x25c>
 8007af6:	0550      	lsls	r0, r2, #21
 8007af8:	f57f af08 	bpl.w	800790c <_scanf_float+0x64>
 8007afc:	f1b9 0f00 	cmp.w	r9, #0
 8007b00:	f000 80de 	beq.w	8007cc0 <_scanf_float+0x418>
 8007b04:	0591      	lsls	r1, r2, #22
 8007b06:	bf58      	it	pl
 8007b08:	9902      	ldrpl	r1, [sp, #8]
 8007b0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b0e:	bf58      	it	pl
 8007b10:	eba9 0101 	subpl.w	r1, r9, r1
 8007b14:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007b18:	bf58      	it	pl
 8007b1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b1e:	6022      	str	r2, [r4, #0]
 8007b20:	f04f 0900 	mov.w	r9, #0
 8007b24:	e789      	b.n	8007a3a <_scanf_float+0x192>
 8007b26:	f04f 0a03 	mov.w	sl, #3
 8007b2a:	e786      	b.n	8007a3a <_scanf_float+0x192>
 8007b2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b30:	4639      	mov	r1, r7
 8007b32:	4640      	mov	r0, r8
 8007b34:	4798      	blx	r3
 8007b36:	2800      	cmp	r0, #0
 8007b38:	f43f aedb 	beq.w	80078f2 <_scanf_float+0x4a>
 8007b3c:	e6e6      	b.n	800790c <_scanf_float+0x64>
 8007b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b46:	463a      	mov	r2, r7
 8007b48:	4640      	mov	r0, r8
 8007b4a:	4798      	blx	r3
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	e6e8      	b.n	8007926 <_scanf_float+0x7e>
 8007b54:	1e6b      	subs	r3, r5, #1
 8007b56:	2b06      	cmp	r3, #6
 8007b58:	d824      	bhi.n	8007ba4 <_scanf_float+0x2fc>
 8007b5a:	2d02      	cmp	r5, #2
 8007b5c:	d836      	bhi.n	8007bcc <_scanf_float+0x324>
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	429e      	cmp	r6, r3
 8007b62:	f67f aee4 	bls.w	800792e <_scanf_float+0x86>
 8007b66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b6e:	463a      	mov	r2, r7
 8007b70:	4640      	mov	r0, r8
 8007b72:	4798      	blx	r3
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	6123      	str	r3, [r4, #16]
 8007b7a:	e7f0      	b.n	8007b5e <_scanf_float+0x2b6>
 8007b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b80:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007b84:	463a      	mov	r2, r7
 8007b86:	4640      	mov	r0, r8
 8007b88:	4798      	blx	r3
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	6123      	str	r3, [r4, #16]
 8007b90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b94:	fa5f fa8a 	uxtb.w	sl, sl
 8007b98:	f1ba 0f02 	cmp.w	sl, #2
 8007b9c:	d1ee      	bne.n	8007b7c <_scanf_float+0x2d4>
 8007b9e:	3d03      	subs	r5, #3
 8007ba0:	b2ed      	uxtb	r5, r5
 8007ba2:	1b76      	subs	r6, r6, r5
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	05da      	lsls	r2, r3, #23
 8007ba8:	d530      	bpl.n	8007c0c <_scanf_float+0x364>
 8007baa:	055b      	lsls	r3, r3, #21
 8007bac:	d511      	bpl.n	8007bd2 <_scanf_float+0x32a>
 8007bae:	9b01      	ldr	r3, [sp, #4]
 8007bb0:	429e      	cmp	r6, r3
 8007bb2:	f67f aebc 	bls.w	800792e <_scanf_float+0x86>
 8007bb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bbe:	463a      	mov	r2, r7
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4798      	blx	r3
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	e7f0      	b.n	8007bae <_scanf_float+0x306>
 8007bcc:	46aa      	mov	sl, r5
 8007bce:	46b3      	mov	fp, r6
 8007bd0:	e7de      	b.n	8007b90 <_scanf_float+0x2e8>
 8007bd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007bd6:	6923      	ldr	r3, [r4, #16]
 8007bd8:	2965      	cmp	r1, #101	@ 0x65
 8007bda:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bde:	f106 35ff 	add.w	r5, r6, #4294967295
 8007be2:	6123      	str	r3, [r4, #16]
 8007be4:	d00c      	beq.n	8007c00 <_scanf_float+0x358>
 8007be6:	2945      	cmp	r1, #69	@ 0x45
 8007be8:	d00a      	beq.n	8007c00 <_scanf_float+0x358>
 8007bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bee:	463a      	mov	r2, r7
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	4798      	blx	r3
 8007bf4:	6923      	ldr	r3, [r4, #16]
 8007bf6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	1eb5      	subs	r5, r6, #2
 8007bfe:	6123      	str	r3, [r4, #16]
 8007c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c04:	463a      	mov	r2, r7
 8007c06:	4640      	mov	r0, r8
 8007c08:	4798      	blx	r3
 8007c0a:	462e      	mov	r6, r5
 8007c0c:	6822      	ldr	r2, [r4, #0]
 8007c0e:	f012 0210 	ands.w	r2, r2, #16
 8007c12:	d001      	beq.n	8007c18 <_scanf_float+0x370>
 8007c14:	2000      	movs	r0, #0
 8007c16:	e68b      	b.n	8007930 <_scanf_float+0x88>
 8007c18:	7032      	strb	r2, [r6, #0]
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c24:	d11c      	bne.n	8007c60 <_scanf_float+0x3b8>
 8007c26:	9b02      	ldr	r3, [sp, #8]
 8007c28:	454b      	cmp	r3, r9
 8007c2a:	eba3 0209 	sub.w	r2, r3, r9
 8007c2e:	d123      	bne.n	8007c78 <_scanf_float+0x3d0>
 8007c30:	9901      	ldr	r1, [sp, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	4640      	mov	r0, r8
 8007c36:	f002 fc5b 	bl	800a4f0 <_strtod_r>
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	6821      	ldr	r1, [r4, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f011 0f02 	tst.w	r1, #2
 8007c44:	ec57 6b10 	vmov	r6, r7, d0
 8007c48:	f103 0204 	add.w	r2, r3, #4
 8007c4c:	d01f      	beq.n	8007c8e <_scanf_float+0x3e6>
 8007c4e:	9903      	ldr	r1, [sp, #12]
 8007c50:	600a      	str	r2, [r1, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	e9c3 6700 	strd	r6, r7, [r3]
 8007c58:	68e3      	ldr	r3, [r4, #12]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	60e3      	str	r3, [r4, #12]
 8007c5e:	e7d9      	b.n	8007c14 <_scanf_float+0x36c>
 8007c60:	9b04      	ldr	r3, [sp, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0e4      	beq.n	8007c30 <_scanf_float+0x388>
 8007c66:	9905      	ldr	r1, [sp, #20]
 8007c68:	230a      	movs	r3, #10
 8007c6a:	3101      	adds	r1, #1
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	f002 fcbf 	bl	800a5f0 <_strtol_r>
 8007c72:	9b04      	ldr	r3, [sp, #16]
 8007c74:	9e05      	ldr	r6, [sp, #20]
 8007c76:	1ac2      	subs	r2, r0, r3
 8007c78:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007c7c:	429e      	cmp	r6, r3
 8007c7e:	bf28      	it	cs
 8007c80:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007c84:	4910      	ldr	r1, [pc, #64]	@ (8007cc8 <_scanf_float+0x420>)
 8007c86:	4630      	mov	r0, r6
 8007c88:	f000 f92a 	bl	8007ee0 <siprintf>
 8007c8c:	e7d0      	b.n	8007c30 <_scanf_float+0x388>
 8007c8e:	f011 0f04 	tst.w	r1, #4
 8007c92:	9903      	ldr	r1, [sp, #12]
 8007c94:	600a      	str	r2, [r1, #0]
 8007c96:	d1dc      	bne.n	8007c52 <_scanf_float+0x3aa>
 8007c98:	681d      	ldr	r5, [r3, #0]
 8007c9a:	4632      	mov	r2, r6
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	f7f8 ff6b 	bl	8000b7c <__aeabi_dcmpun>
 8007ca6:	b128      	cbz	r0, 8007cb4 <_scanf_float+0x40c>
 8007ca8:	4808      	ldr	r0, [pc, #32]	@ (8007ccc <_scanf_float+0x424>)
 8007caa:	f000 fa1b 	bl	80080e4 <nanf>
 8007cae:	ed85 0a00 	vstr	s0, [r5]
 8007cb2:	e7d1      	b.n	8007c58 <_scanf_float+0x3b0>
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 ffbe 	bl	8000c38 <__aeabi_d2f>
 8007cbc:	6028      	str	r0, [r5, #0]
 8007cbe:	e7cb      	b.n	8007c58 <_scanf_float+0x3b0>
 8007cc0:	f04f 0900 	mov.w	r9, #0
 8007cc4:	e629      	b.n	800791a <_scanf_float+0x72>
 8007cc6:	bf00      	nop
 8007cc8:	0800b958 	.word	0x0800b958
 8007ccc:	0800bced 	.word	0x0800bced

08007cd0 <std>:
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cde:	6083      	str	r3, [r0, #8]
 8007ce0:	8181      	strh	r1, [r0, #12]
 8007ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ce4:	81c2      	strh	r2, [r0, #14]
 8007ce6:	6183      	str	r3, [r0, #24]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	2208      	movs	r2, #8
 8007cec:	305c      	adds	r0, #92	@ 0x5c
 8007cee:	f000 f95a 	bl	8007fa6 <memset>
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d28 <std+0x58>)
 8007cf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d2c <std+0x5c>)
 8007cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007d30 <std+0x60>)
 8007cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <std+0x64>)
 8007d00:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <std+0x68>)
 8007d04:	6224      	str	r4, [r4, #32]
 8007d06:	429c      	cmp	r4, r3
 8007d08:	d006      	beq.n	8007d18 <std+0x48>
 8007d0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d0e:	4294      	cmp	r4, r2
 8007d10:	d002      	beq.n	8007d18 <std+0x48>
 8007d12:	33d0      	adds	r3, #208	@ 0xd0
 8007d14:	429c      	cmp	r4, r3
 8007d16:	d105      	bne.n	8007d24 <std+0x54>
 8007d18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d20:	f000 b9d4 	b.w	80080cc <__retarget_lock_init_recursive>
 8007d24:	bd10      	pop	{r4, pc}
 8007d26:	bf00      	nop
 8007d28:	08007f21 	.word	0x08007f21
 8007d2c:	08007f43 	.word	0x08007f43
 8007d30:	08007f7b 	.word	0x08007f7b
 8007d34:	08007f9f 	.word	0x08007f9f
 8007d38:	20000544 	.word	0x20000544

08007d3c <stdio_exit_handler>:
 8007d3c:	4a02      	ldr	r2, [pc, #8]	@ (8007d48 <stdio_exit_handler+0xc>)
 8007d3e:	4903      	ldr	r1, [pc, #12]	@ (8007d4c <stdio_exit_handler+0x10>)
 8007d40:	4803      	ldr	r0, [pc, #12]	@ (8007d50 <stdio_exit_handler+0x14>)
 8007d42:	f000 b869 	b.w	8007e18 <_fwalk_sglue>
 8007d46:	bf00      	nop
 8007d48:	20000010 	.word	0x20000010
 8007d4c:	0800ac31 	.word	0x0800ac31
 8007d50:	20000020 	.word	0x20000020

08007d54 <cleanup_stdio>:
 8007d54:	6841      	ldr	r1, [r0, #4]
 8007d56:	4b0c      	ldr	r3, [pc, #48]	@ (8007d88 <cleanup_stdio+0x34>)
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	d001      	beq.n	8007d64 <cleanup_stdio+0x10>
 8007d60:	f002 ff66 	bl	800ac30 <_fflush_r>
 8007d64:	68a1      	ldr	r1, [r4, #8]
 8007d66:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <cleanup_stdio+0x38>)
 8007d68:	4299      	cmp	r1, r3
 8007d6a:	d002      	beq.n	8007d72 <cleanup_stdio+0x1e>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f002 ff5f 	bl	800ac30 <_fflush_r>
 8007d72:	68e1      	ldr	r1, [r4, #12]
 8007d74:	4b06      	ldr	r3, [pc, #24]	@ (8007d90 <cleanup_stdio+0x3c>)
 8007d76:	4299      	cmp	r1, r3
 8007d78:	d004      	beq.n	8007d84 <cleanup_stdio+0x30>
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d80:	f002 bf56 	b.w	800ac30 <_fflush_r>
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	bf00      	nop
 8007d88:	20000544 	.word	0x20000544
 8007d8c:	200005ac 	.word	0x200005ac
 8007d90:	20000614 	.word	0x20000614

08007d94 <global_stdio_init.part.0>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc4 <global_stdio_init.part.0+0x30>)
 8007d98:	4c0b      	ldr	r4, [pc, #44]	@ (8007dc8 <global_stdio_init.part.0+0x34>)
 8007d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dcc <global_stdio_init.part.0+0x38>)
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	4620      	mov	r0, r4
 8007da0:	2200      	movs	r2, #0
 8007da2:	2104      	movs	r1, #4
 8007da4:	f7ff ff94 	bl	8007cd0 <std>
 8007da8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dac:	2201      	movs	r2, #1
 8007dae:	2109      	movs	r1, #9
 8007db0:	f7ff ff8e 	bl	8007cd0 <std>
 8007db4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007db8:	2202      	movs	r2, #2
 8007dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dbe:	2112      	movs	r1, #18
 8007dc0:	f7ff bf86 	b.w	8007cd0 <std>
 8007dc4:	2000067c 	.word	0x2000067c
 8007dc8:	20000544 	.word	0x20000544
 8007dcc:	08007d3d 	.word	0x08007d3d

08007dd0 <__sfp_lock_acquire>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	@ (8007dd8 <__sfp_lock_acquire+0x8>)
 8007dd2:	f000 b97c 	b.w	80080ce <__retarget_lock_acquire_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	20000685 	.word	0x20000685

08007ddc <__sfp_lock_release>:
 8007ddc:	4801      	ldr	r0, [pc, #4]	@ (8007de4 <__sfp_lock_release+0x8>)
 8007dde:	f000 b977 	b.w	80080d0 <__retarget_lock_release_recursive>
 8007de2:	bf00      	nop
 8007de4:	20000685 	.word	0x20000685

08007de8 <__sinit>:
 8007de8:	b510      	push	{r4, lr}
 8007dea:	4604      	mov	r4, r0
 8007dec:	f7ff fff0 	bl	8007dd0 <__sfp_lock_acquire>
 8007df0:	6a23      	ldr	r3, [r4, #32]
 8007df2:	b11b      	cbz	r3, 8007dfc <__sinit+0x14>
 8007df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df8:	f7ff bff0 	b.w	8007ddc <__sfp_lock_release>
 8007dfc:	4b04      	ldr	r3, [pc, #16]	@ (8007e10 <__sinit+0x28>)
 8007dfe:	6223      	str	r3, [r4, #32]
 8007e00:	4b04      	ldr	r3, [pc, #16]	@ (8007e14 <__sinit+0x2c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1f5      	bne.n	8007df4 <__sinit+0xc>
 8007e08:	f7ff ffc4 	bl	8007d94 <global_stdio_init.part.0>
 8007e0c:	e7f2      	b.n	8007df4 <__sinit+0xc>
 8007e0e:	bf00      	nop
 8007e10:	08007d55 	.word	0x08007d55
 8007e14:	2000067c 	.word	0x2000067c

08007e18 <_fwalk_sglue>:
 8007e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	4688      	mov	r8, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	2600      	movs	r6, #0
 8007e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e28:	f1b9 0901 	subs.w	r9, r9, #1
 8007e2c:	d505      	bpl.n	8007e3a <_fwalk_sglue+0x22>
 8007e2e:	6824      	ldr	r4, [r4, #0]
 8007e30:	2c00      	cmp	r4, #0
 8007e32:	d1f7      	bne.n	8007e24 <_fwalk_sglue+0xc>
 8007e34:	4630      	mov	r0, r6
 8007e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3a:	89ab      	ldrh	r3, [r5, #12]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d907      	bls.n	8007e50 <_fwalk_sglue+0x38>
 8007e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e44:	3301      	adds	r3, #1
 8007e46:	d003      	beq.n	8007e50 <_fwalk_sglue+0x38>
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	47c0      	blx	r8
 8007e4e:	4306      	orrs	r6, r0
 8007e50:	3568      	adds	r5, #104	@ 0x68
 8007e52:	e7e9      	b.n	8007e28 <_fwalk_sglue+0x10>

08007e54 <iprintf>:
 8007e54:	b40f      	push	{r0, r1, r2, r3}
 8007e56:	b507      	push	{r0, r1, r2, lr}
 8007e58:	4906      	ldr	r1, [pc, #24]	@ (8007e74 <iprintf+0x20>)
 8007e5a:	ab04      	add	r3, sp, #16
 8007e5c:	6808      	ldr	r0, [r1, #0]
 8007e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e62:	6881      	ldr	r1, [r0, #8]
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	f002 fd47 	bl	800a8f8 <_vfiprintf_r>
 8007e6a:	b003      	add	sp, #12
 8007e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e70:	b004      	add	sp, #16
 8007e72:	4770      	bx	lr
 8007e74:	2000001c 	.word	0x2000001c

08007e78 <sniprintf>:
 8007e78:	b40c      	push	{r2, r3}
 8007e7a:	b530      	push	{r4, r5, lr}
 8007e7c:	4b17      	ldr	r3, [pc, #92]	@ (8007edc <sniprintf+0x64>)
 8007e7e:	1e0c      	subs	r4, r1, #0
 8007e80:	681d      	ldr	r5, [r3, #0]
 8007e82:	b09d      	sub	sp, #116	@ 0x74
 8007e84:	da08      	bge.n	8007e98 <sniprintf+0x20>
 8007e86:	238b      	movs	r3, #139	@ 0x8b
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8e:	b01d      	add	sp, #116	@ 0x74
 8007e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e94:	b002      	add	sp, #8
 8007e96:	4770      	bx	lr
 8007e98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ea0:	bf14      	ite	ne
 8007ea2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ea6:	4623      	moveq	r3, r4
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	9307      	str	r3, [sp, #28]
 8007eac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007eb0:	9002      	str	r0, [sp, #8]
 8007eb2:	9006      	str	r0, [sp, #24]
 8007eb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007eb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007eba:	ab21      	add	r3, sp, #132	@ 0x84
 8007ebc:	a902      	add	r1, sp, #8
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	f002 fbf3 	bl	800a6ac <_svfiprintf_r>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	bfbc      	itt	lt
 8007eca:	238b      	movlt	r3, #139	@ 0x8b
 8007ecc:	602b      	strlt	r3, [r5, #0]
 8007ece:	2c00      	cmp	r4, #0
 8007ed0:	d0dd      	beq.n	8007e8e <sniprintf+0x16>
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
 8007ed8:	e7d9      	b.n	8007e8e <sniprintf+0x16>
 8007eda:	bf00      	nop
 8007edc:	2000001c 	.word	0x2000001c

08007ee0 <siprintf>:
 8007ee0:	b40e      	push	{r1, r2, r3}
 8007ee2:	b500      	push	{lr}
 8007ee4:	b09c      	sub	sp, #112	@ 0x70
 8007ee6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ee8:	9002      	str	r0, [sp, #8]
 8007eea:	9006      	str	r0, [sp, #24]
 8007eec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ef0:	4809      	ldr	r0, [pc, #36]	@ (8007f18 <siprintf+0x38>)
 8007ef2:	9107      	str	r1, [sp, #28]
 8007ef4:	9104      	str	r1, [sp, #16]
 8007ef6:	4909      	ldr	r1, [pc, #36]	@ (8007f1c <siprintf+0x3c>)
 8007ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007efc:	9105      	str	r1, [sp, #20]
 8007efe:	6800      	ldr	r0, [r0, #0]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	a902      	add	r1, sp, #8
 8007f04:	f002 fbd2 	bl	800a6ac <_svfiprintf_r>
 8007f08:	9b02      	ldr	r3, [sp, #8]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	b01c      	add	sp, #112	@ 0x70
 8007f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f14:	b003      	add	sp, #12
 8007f16:	4770      	bx	lr
 8007f18:	2000001c 	.word	0x2000001c
 8007f1c:	ffff0208 	.word	0xffff0208

08007f20 <__sread>:
 8007f20:	b510      	push	{r4, lr}
 8007f22:	460c      	mov	r4, r1
 8007f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f28:	f000 f882 	bl	8008030 <_read_r>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	bfab      	itete	ge
 8007f30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f32:	89a3      	ldrhlt	r3, [r4, #12]
 8007f34:	181b      	addge	r3, r3, r0
 8007f36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f3a:	bfac      	ite	ge
 8007f3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f3e:	81a3      	strhlt	r3, [r4, #12]
 8007f40:	bd10      	pop	{r4, pc}

08007f42 <__swrite>:
 8007f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f46:	461f      	mov	r7, r3
 8007f48:	898b      	ldrh	r3, [r1, #12]
 8007f4a:	05db      	lsls	r3, r3, #23
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4616      	mov	r6, r2
 8007f52:	d505      	bpl.n	8007f60 <__swrite+0x1e>
 8007f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f58:	2302      	movs	r3, #2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f000 f856 	bl	800800c <_lseek_r>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	463b      	mov	r3, r7
 8007f70:	4628      	mov	r0, r5
 8007f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f76:	f000 b86d 	b.w	8008054 <_write_r>

08007f7a <__sseek>:
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f82:	f000 f843 	bl	800800c <_lseek_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	bf15      	itete	ne
 8007f8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f96:	81a3      	strheq	r3, [r4, #12]
 8007f98:	bf18      	it	ne
 8007f9a:	81a3      	strhne	r3, [r4, #12]
 8007f9c:	bd10      	pop	{r4, pc}

08007f9e <__sclose>:
 8007f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa2:	f000 b823 	b.w	8007fec <_close_r>

08007fa6 <memset>:
 8007fa6:	4402      	add	r2, r0
 8007fa8:	4603      	mov	r3, r0
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d100      	bne.n	8007fb0 <memset+0xa>
 8007fae:	4770      	bx	lr
 8007fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8007fb4:	e7f9      	b.n	8007faa <memset+0x4>

08007fb6 <strstr>:
 8007fb6:	780a      	ldrb	r2, [r1, #0]
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	b96a      	cbnz	r2, 8007fd8 <strstr+0x22>
 8007fbc:	bd70      	pop	{r4, r5, r6, pc}
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d109      	bne.n	8007fd6 <strstr+0x20>
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0f6      	beq.n	8007fbc <strstr+0x6>
 8007fce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007fd2:	429e      	cmp	r6, r3
 8007fd4:	d0f7      	beq.n	8007fc6 <strstr+0x10>
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	7803      	ldrb	r3, [r0, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1ef      	bne.n	8007fbe <strstr+0x8>
 8007fde:	4618      	mov	r0, r3
 8007fe0:	e7ec      	b.n	8007fbc <strstr+0x6>
	...

08007fe4 <_localeconv_r>:
 8007fe4:	4800      	ldr	r0, [pc, #0]	@ (8007fe8 <_localeconv_r+0x4>)
 8007fe6:	4770      	bx	lr
 8007fe8:	2000015c 	.word	0x2000015c

08007fec <_close_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	4d06      	ldr	r5, [pc, #24]	@ (8008008 <_close_r+0x1c>)
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	602b      	str	r3, [r5, #0]
 8007ff8:	f7fa f80f 	bl	800201a <_close>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_close_r+0x1a>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_close_r+0x1a>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20000680 	.word	0x20000680

0800800c <_lseek_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d07      	ldr	r5, [pc, #28]	@ (800802c <_lseek_r+0x20>)
 8008010:	4604      	mov	r4, r0
 8008012:	4608      	mov	r0, r1
 8008014:	4611      	mov	r1, r2
 8008016:	2200      	movs	r2, #0
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f7fa f824 	bl	8002068 <_lseek>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_lseek_r+0x1e>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_lseek_r+0x1e>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	20000680 	.word	0x20000680

08008030 <_read_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d07      	ldr	r5, [pc, #28]	@ (8008050 <_read_r+0x20>)
 8008034:	4604      	mov	r4, r0
 8008036:	4608      	mov	r0, r1
 8008038:	4611      	mov	r1, r2
 800803a:	2200      	movs	r2, #0
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	f7f9 ffb2 	bl	8001fa8 <_read>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_read_r+0x1e>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_read_r+0x1e>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20000680 	.word	0x20000680

08008054 <_write_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d07      	ldr	r5, [pc, #28]	@ (8008074 <_write_r+0x20>)
 8008058:	4604      	mov	r4, r0
 800805a:	4608      	mov	r0, r1
 800805c:	4611      	mov	r1, r2
 800805e:	2200      	movs	r2, #0
 8008060:	602a      	str	r2, [r5, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	f7f9 ffbd 	bl	8001fe2 <_write>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_write_r+0x1e>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	b103      	cbz	r3, 8008072 <_write_r+0x1e>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	20000680 	.word	0x20000680

08008078 <__errno>:
 8008078:	4b01      	ldr	r3, [pc, #4]	@ (8008080 <__errno+0x8>)
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	2000001c 	.word	0x2000001c

08008084 <__libc_init_array>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	4d0d      	ldr	r5, [pc, #52]	@ (80080bc <__libc_init_array+0x38>)
 8008088:	4c0d      	ldr	r4, [pc, #52]	@ (80080c0 <__libc_init_array+0x3c>)
 800808a:	1b64      	subs	r4, r4, r5
 800808c:	10a4      	asrs	r4, r4, #2
 800808e:	2600      	movs	r6, #0
 8008090:	42a6      	cmp	r6, r4
 8008092:	d109      	bne.n	80080a8 <__libc_init_array+0x24>
 8008094:	4d0b      	ldr	r5, [pc, #44]	@ (80080c4 <__libc_init_array+0x40>)
 8008096:	4c0c      	ldr	r4, [pc, #48]	@ (80080c8 <__libc_init_array+0x44>)
 8008098:	f003 fb7c 	bl	800b794 <_init>
 800809c:	1b64      	subs	r4, r4, r5
 800809e:	10a4      	asrs	r4, r4, #2
 80080a0:	2600      	movs	r6, #0
 80080a2:	42a6      	cmp	r6, r4
 80080a4:	d105      	bne.n	80080b2 <__libc_init_array+0x2e>
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ac:	4798      	blx	r3
 80080ae:	3601      	adds	r6, #1
 80080b0:	e7ee      	b.n	8008090 <__libc_init_array+0xc>
 80080b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b6:	4798      	blx	r3
 80080b8:	3601      	adds	r6, #1
 80080ba:	e7f2      	b.n	80080a2 <__libc_init_array+0x1e>
 80080bc:	0800bd58 	.word	0x0800bd58
 80080c0:	0800bd58 	.word	0x0800bd58
 80080c4:	0800bd58 	.word	0x0800bd58
 80080c8:	0800bd5c 	.word	0x0800bd5c

080080cc <__retarget_lock_init_recursive>:
 80080cc:	4770      	bx	lr

080080ce <__retarget_lock_acquire_recursive>:
 80080ce:	4770      	bx	lr

080080d0 <__retarget_lock_release_recursive>:
 80080d0:	4770      	bx	lr

080080d2 <strcpy>:
 80080d2:	4603      	mov	r3, r0
 80080d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080d8:	f803 2b01 	strb.w	r2, [r3], #1
 80080dc:	2a00      	cmp	r2, #0
 80080de:	d1f9      	bne.n	80080d4 <strcpy+0x2>
 80080e0:	4770      	bx	lr
	...

080080e4 <nanf>:
 80080e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80080ec <nanf+0x8>
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	7fc00000 	.word	0x7fc00000

080080f0 <quorem>:
 80080f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	6903      	ldr	r3, [r0, #16]
 80080f6:	690c      	ldr	r4, [r1, #16]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	4607      	mov	r7, r0
 80080fc:	db7e      	blt.n	80081fc <quorem+0x10c>
 80080fe:	3c01      	subs	r4, #1
 8008100:	f101 0814 	add.w	r8, r1, #20
 8008104:	00a3      	lsls	r3, r4, #2
 8008106:	f100 0514 	add.w	r5, r0, #20
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008116:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800811a:	3301      	adds	r3, #1
 800811c:	429a      	cmp	r2, r3
 800811e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008122:	fbb2 f6f3 	udiv	r6, r2, r3
 8008126:	d32e      	bcc.n	8008186 <quorem+0x96>
 8008128:	f04f 0a00 	mov.w	sl, #0
 800812c:	46c4      	mov	ip, r8
 800812e:	46ae      	mov	lr, r5
 8008130:	46d3      	mov	fp, sl
 8008132:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008136:	b298      	uxth	r0, r3
 8008138:	fb06 a000 	mla	r0, r6, r0, sl
 800813c:	0c02      	lsrs	r2, r0, #16
 800813e:	0c1b      	lsrs	r3, r3, #16
 8008140:	fb06 2303 	mla	r3, r6, r3, r2
 8008144:	f8de 2000 	ldr.w	r2, [lr]
 8008148:	b280      	uxth	r0, r0
 800814a:	b292      	uxth	r2, r2
 800814c:	1a12      	subs	r2, r2, r0
 800814e:	445a      	add	r2, fp
 8008150:	f8de 0000 	ldr.w	r0, [lr]
 8008154:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008158:	b29b      	uxth	r3, r3
 800815a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800815e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008162:	b292      	uxth	r2, r2
 8008164:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008168:	45e1      	cmp	r9, ip
 800816a:	f84e 2b04 	str.w	r2, [lr], #4
 800816e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008172:	d2de      	bcs.n	8008132 <quorem+0x42>
 8008174:	9b00      	ldr	r3, [sp, #0]
 8008176:	58eb      	ldr	r3, [r5, r3]
 8008178:	b92b      	cbnz	r3, 8008186 <quorem+0x96>
 800817a:	9b01      	ldr	r3, [sp, #4]
 800817c:	3b04      	subs	r3, #4
 800817e:	429d      	cmp	r5, r3
 8008180:	461a      	mov	r2, r3
 8008182:	d32f      	bcc.n	80081e4 <quorem+0xf4>
 8008184:	613c      	str	r4, [r7, #16]
 8008186:	4638      	mov	r0, r7
 8008188:	f001 f9c2 	bl	8009510 <__mcmp>
 800818c:	2800      	cmp	r0, #0
 800818e:	db25      	blt.n	80081dc <quorem+0xec>
 8008190:	4629      	mov	r1, r5
 8008192:	2000      	movs	r0, #0
 8008194:	f858 2b04 	ldr.w	r2, [r8], #4
 8008198:	f8d1 c000 	ldr.w	ip, [r1]
 800819c:	fa1f fe82 	uxth.w	lr, r2
 80081a0:	fa1f f38c 	uxth.w	r3, ip
 80081a4:	eba3 030e 	sub.w	r3, r3, lr
 80081a8:	4403      	add	r3, r0
 80081aa:	0c12      	lsrs	r2, r2, #16
 80081ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ba:	45c1      	cmp	r9, r8
 80081bc:	f841 3b04 	str.w	r3, [r1], #4
 80081c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081c4:	d2e6      	bcs.n	8008194 <quorem+0xa4>
 80081c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ce:	b922      	cbnz	r2, 80081da <quorem+0xea>
 80081d0:	3b04      	subs	r3, #4
 80081d2:	429d      	cmp	r5, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	d30b      	bcc.n	80081f0 <quorem+0x100>
 80081d8:	613c      	str	r4, [r7, #16]
 80081da:	3601      	adds	r6, #1
 80081dc:	4630      	mov	r0, r6
 80081de:	b003      	add	sp, #12
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e4:	6812      	ldr	r2, [r2, #0]
 80081e6:	3b04      	subs	r3, #4
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	d1cb      	bne.n	8008184 <quorem+0x94>
 80081ec:	3c01      	subs	r4, #1
 80081ee:	e7c6      	b.n	800817e <quorem+0x8e>
 80081f0:	6812      	ldr	r2, [r2, #0]
 80081f2:	3b04      	subs	r3, #4
 80081f4:	2a00      	cmp	r2, #0
 80081f6:	d1ef      	bne.n	80081d8 <quorem+0xe8>
 80081f8:	3c01      	subs	r4, #1
 80081fa:	e7ea      	b.n	80081d2 <quorem+0xe2>
 80081fc:	2000      	movs	r0, #0
 80081fe:	e7ee      	b.n	80081de <quorem+0xee>

08008200 <_dtoa_r>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	69c7      	ldr	r7, [r0, #28]
 8008206:	b099      	sub	sp, #100	@ 0x64
 8008208:	ed8d 0b02 	vstr	d0, [sp, #8]
 800820c:	ec55 4b10 	vmov	r4, r5, d0
 8008210:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008212:	9109      	str	r1, [sp, #36]	@ 0x24
 8008214:	4683      	mov	fp, r0
 8008216:	920e      	str	r2, [sp, #56]	@ 0x38
 8008218:	9313      	str	r3, [sp, #76]	@ 0x4c
 800821a:	b97f      	cbnz	r7, 800823c <_dtoa_r+0x3c>
 800821c:	2010      	movs	r0, #16
 800821e:	f000 fdfd 	bl	8008e1c <malloc>
 8008222:	4602      	mov	r2, r0
 8008224:	f8cb 001c 	str.w	r0, [fp, #28]
 8008228:	b920      	cbnz	r0, 8008234 <_dtoa_r+0x34>
 800822a:	4ba7      	ldr	r3, [pc, #668]	@ (80084c8 <_dtoa_r+0x2c8>)
 800822c:	21ef      	movs	r1, #239	@ 0xef
 800822e:	48a7      	ldr	r0, [pc, #668]	@ (80084cc <_dtoa_r+0x2cc>)
 8008230:	f002 fe0e 	bl	800ae50 <__assert_func>
 8008234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008238:	6007      	str	r7, [r0, #0]
 800823a:	60c7      	str	r7, [r0, #12]
 800823c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008240:	6819      	ldr	r1, [r3, #0]
 8008242:	b159      	cbz	r1, 800825c <_dtoa_r+0x5c>
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	604a      	str	r2, [r1, #4]
 8008248:	2301      	movs	r3, #1
 800824a:	4093      	lsls	r3, r2
 800824c:	608b      	str	r3, [r1, #8]
 800824e:	4658      	mov	r0, fp
 8008250:	f000 feda 	bl	8009008 <_Bfree>
 8008254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	1e2b      	subs	r3, r5, #0
 800825e:	bfb9      	ittee	lt
 8008260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008264:	9303      	strlt	r3, [sp, #12]
 8008266:	2300      	movge	r3, #0
 8008268:	6033      	strge	r3, [r6, #0]
 800826a:	9f03      	ldr	r7, [sp, #12]
 800826c:	4b98      	ldr	r3, [pc, #608]	@ (80084d0 <_dtoa_r+0x2d0>)
 800826e:	bfbc      	itt	lt
 8008270:	2201      	movlt	r2, #1
 8008272:	6032      	strlt	r2, [r6, #0]
 8008274:	43bb      	bics	r3, r7
 8008276:	d112      	bne.n	800829e <_dtoa_r+0x9e>
 8008278:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800827a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008284:	4323      	orrs	r3, r4
 8008286:	f000 854d 	beq.w	8008d24 <_dtoa_r+0xb24>
 800828a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800828c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80084e4 <_dtoa_r+0x2e4>
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 854f 	beq.w	8008d34 <_dtoa_r+0xb34>
 8008296:	f10a 0303 	add.w	r3, sl, #3
 800829a:	f000 bd49 	b.w	8008d30 <_dtoa_r+0xb30>
 800829e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082a2:	2200      	movs	r2, #0
 80082a4:	ec51 0b17 	vmov	r0, r1, d7
 80082a8:	2300      	movs	r3, #0
 80082aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80082ae:	f7f8 fc33 	bl	8000b18 <__aeabi_dcmpeq>
 80082b2:	4680      	mov	r8, r0
 80082b4:	b158      	cbz	r0, 80082ce <_dtoa_r+0xce>
 80082b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082b8:	2301      	movs	r3, #1
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082be:	b113      	cbz	r3, 80082c6 <_dtoa_r+0xc6>
 80082c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082c2:	4b84      	ldr	r3, [pc, #528]	@ (80084d4 <_dtoa_r+0x2d4>)
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80084e8 <_dtoa_r+0x2e8>
 80082ca:	f000 bd33 	b.w	8008d34 <_dtoa_r+0xb34>
 80082ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082d2:	aa16      	add	r2, sp, #88	@ 0x58
 80082d4:	a917      	add	r1, sp, #92	@ 0x5c
 80082d6:	4658      	mov	r0, fp
 80082d8:	f001 fa3a 	bl	8009750 <__d2b>
 80082dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80082e0:	4681      	mov	r9, r0
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	d077      	beq.n	80083d6 <_dtoa_r+0x1d6>
 80082e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80082ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008300:	4619      	mov	r1, r3
 8008302:	2200      	movs	r2, #0
 8008304:	4b74      	ldr	r3, [pc, #464]	@ (80084d8 <_dtoa_r+0x2d8>)
 8008306:	f7f7 ffe7 	bl	80002d8 <__aeabi_dsub>
 800830a:	a369      	add	r3, pc, #420	@ (adr r3, 80084b0 <_dtoa_r+0x2b0>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f8 f99a 	bl	8000648 <__aeabi_dmul>
 8008314:	a368      	add	r3, pc, #416	@ (adr r3, 80084b8 <_dtoa_r+0x2b8>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f7 ffdf 	bl	80002dc <__adddf3>
 800831e:	4604      	mov	r4, r0
 8008320:	4630      	mov	r0, r6
 8008322:	460d      	mov	r5, r1
 8008324:	f7f8 f926 	bl	8000574 <__aeabi_i2d>
 8008328:	a365      	add	r3, pc, #404	@ (adr r3, 80084c0 <_dtoa_r+0x2c0>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 f98b 	bl	8000648 <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f7 ffcf 	bl	80002dc <__adddf3>
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	f7f8 fc31 	bl	8000ba8 <__aeabi_d2iz>
 8008346:	2200      	movs	r2, #0
 8008348:	4607      	mov	r7, r0
 800834a:	2300      	movs	r3, #0
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	f7f8 fbec 	bl	8000b2c <__aeabi_dcmplt>
 8008354:	b140      	cbz	r0, 8008368 <_dtoa_r+0x168>
 8008356:	4638      	mov	r0, r7
 8008358:	f7f8 f90c 	bl	8000574 <__aeabi_i2d>
 800835c:	4622      	mov	r2, r4
 800835e:	462b      	mov	r3, r5
 8008360:	f7f8 fbda 	bl	8000b18 <__aeabi_dcmpeq>
 8008364:	b900      	cbnz	r0, 8008368 <_dtoa_r+0x168>
 8008366:	3f01      	subs	r7, #1
 8008368:	2f16      	cmp	r7, #22
 800836a:	d851      	bhi.n	8008410 <_dtoa_r+0x210>
 800836c:	4b5b      	ldr	r3, [pc, #364]	@ (80084dc <_dtoa_r+0x2dc>)
 800836e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800837a:	f7f8 fbd7 	bl	8000b2c <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	d048      	beq.n	8008414 <_dtoa_r+0x214>
 8008382:	3f01      	subs	r7, #1
 8008384:	2300      	movs	r3, #0
 8008386:	9312      	str	r3, [sp, #72]	@ 0x48
 8008388:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800838a:	1b9b      	subs	r3, r3, r6
 800838c:	1e5a      	subs	r2, r3, #1
 800838e:	bf44      	itt	mi
 8008390:	f1c3 0801 	rsbmi	r8, r3, #1
 8008394:	2300      	movmi	r3, #0
 8008396:	9208      	str	r2, [sp, #32]
 8008398:	bf54      	ite	pl
 800839a:	f04f 0800 	movpl.w	r8, #0
 800839e:	9308      	strmi	r3, [sp, #32]
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	db39      	blt.n	8008418 <_dtoa_r+0x218>
 80083a4:	9b08      	ldr	r3, [sp, #32]
 80083a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80083a8:	443b      	add	r3, r7
 80083aa:	9308      	str	r3, [sp, #32]
 80083ac:	2300      	movs	r3, #0
 80083ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80083b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b2:	2b09      	cmp	r3, #9
 80083b4:	d864      	bhi.n	8008480 <_dtoa_r+0x280>
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	bfc4      	itt	gt
 80083ba:	3b04      	subgt	r3, #4
 80083bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80083be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c0:	f1a3 0302 	sub.w	r3, r3, #2
 80083c4:	bfcc      	ite	gt
 80083c6:	2400      	movgt	r4, #0
 80083c8:	2401      	movle	r4, #1
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d863      	bhi.n	8008496 <_dtoa_r+0x296>
 80083ce:	e8df f003 	tbb	[pc, r3]
 80083d2:	372a      	.short	0x372a
 80083d4:	5535      	.short	0x5535
 80083d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80083da:	441e      	add	r6, r3
 80083dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	bfc1      	itttt	gt
 80083e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083e8:	409f      	lslgt	r7, r3
 80083ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80083ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80083f2:	bfd6      	itet	le
 80083f4:	f1c3 0320 	rsble	r3, r3, #32
 80083f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80083fc:	fa04 f003 	lslle.w	r0, r4, r3
 8008400:	f7f8 f8a8 	bl	8000554 <__aeabi_ui2d>
 8008404:	2201      	movs	r2, #1
 8008406:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800840a:	3e01      	subs	r6, #1
 800840c:	9214      	str	r2, [sp, #80]	@ 0x50
 800840e:	e777      	b.n	8008300 <_dtoa_r+0x100>
 8008410:	2301      	movs	r3, #1
 8008412:	e7b8      	b.n	8008386 <_dtoa_r+0x186>
 8008414:	9012      	str	r0, [sp, #72]	@ 0x48
 8008416:	e7b7      	b.n	8008388 <_dtoa_r+0x188>
 8008418:	427b      	negs	r3, r7
 800841a:	930a      	str	r3, [sp, #40]	@ 0x28
 800841c:	2300      	movs	r3, #0
 800841e:	eba8 0807 	sub.w	r8, r8, r7
 8008422:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008424:	e7c4      	b.n	80083b0 <_dtoa_r+0x1b0>
 8008426:	2300      	movs	r3, #0
 8008428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800842a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800842c:	2b00      	cmp	r3, #0
 800842e:	dc35      	bgt.n	800849c <_dtoa_r+0x29c>
 8008430:	2301      	movs	r3, #1
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	9307      	str	r3, [sp, #28]
 8008436:	461a      	mov	r2, r3
 8008438:	920e      	str	r2, [sp, #56]	@ 0x38
 800843a:	e00b      	b.n	8008454 <_dtoa_r+0x254>
 800843c:	2301      	movs	r3, #1
 800843e:	e7f3      	b.n	8008428 <_dtoa_r+0x228>
 8008440:	2300      	movs	r3, #0
 8008442:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008446:	18fb      	adds	r3, r7, r3
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	3301      	adds	r3, #1
 800844c:	2b01      	cmp	r3, #1
 800844e:	9307      	str	r3, [sp, #28]
 8008450:	bfb8      	it	lt
 8008452:	2301      	movlt	r3, #1
 8008454:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008458:	2100      	movs	r1, #0
 800845a:	2204      	movs	r2, #4
 800845c:	f102 0514 	add.w	r5, r2, #20
 8008460:	429d      	cmp	r5, r3
 8008462:	d91f      	bls.n	80084a4 <_dtoa_r+0x2a4>
 8008464:	6041      	str	r1, [r0, #4]
 8008466:	4658      	mov	r0, fp
 8008468:	f000 fd8e 	bl	8008f88 <_Balloc>
 800846c:	4682      	mov	sl, r0
 800846e:	2800      	cmp	r0, #0
 8008470:	d13c      	bne.n	80084ec <_dtoa_r+0x2ec>
 8008472:	4b1b      	ldr	r3, [pc, #108]	@ (80084e0 <_dtoa_r+0x2e0>)
 8008474:	4602      	mov	r2, r0
 8008476:	f240 11af 	movw	r1, #431	@ 0x1af
 800847a:	e6d8      	b.n	800822e <_dtoa_r+0x2e>
 800847c:	2301      	movs	r3, #1
 800847e:	e7e0      	b.n	8008442 <_dtoa_r+0x242>
 8008480:	2401      	movs	r4, #1
 8008482:	2300      	movs	r3, #0
 8008484:	9309      	str	r3, [sp, #36]	@ 0x24
 8008486:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008488:	f04f 33ff 	mov.w	r3, #4294967295
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	2200      	movs	r2, #0
 8008492:	2312      	movs	r3, #18
 8008494:	e7d0      	b.n	8008438 <_dtoa_r+0x238>
 8008496:	2301      	movs	r3, #1
 8008498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800849a:	e7f5      	b.n	8008488 <_dtoa_r+0x288>
 800849c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	9307      	str	r3, [sp, #28]
 80084a2:	e7d7      	b.n	8008454 <_dtoa_r+0x254>
 80084a4:	3101      	adds	r1, #1
 80084a6:	0052      	lsls	r2, r2, #1
 80084a8:	e7d8      	b.n	800845c <_dtoa_r+0x25c>
 80084aa:	bf00      	nop
 80084ac:	f3af 8000 	nop.w
 80084b0:	636f4361 	.word	0x636f4361
 80084b4:	3fd287a7 	.word	0x3fd287a7
 80084b8:	8b60c8b3 	.word	0x8b60c8b3
 80084bc:	3fc68a28 	.word	0x3fc68a28
 80084c0:	509f79fb 	.word	0x509f79fb
 80084c4:	3fd34413 	.word	0x3fd34413
 80084c8:	0800b96a 	.word	0x0800b96a
 80084cc:	0800b981 	.word	0x0800b981
 80084d0:	7ff00000 	.word	0x7ff00000
 80084d4:	0800b935 	.word	0x0800b935
 80084d8:	3ff80000 	.word	0x3ff80000
 80084dc:	0800ba78 	.word	0x0800ba78
 80084e0:	0800b9d9 	.word	0x0800b9d9
 80084e4:	0800b966 	.word	0x0800b966
 80084e8:	0800b934 	.word	0x0800b934
 80084ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084f0:	6018      	str	r0, [r3, #0]
 80084f2:	9b07      	ldr	r3, [sp, #28]
 80084f4:	2b0e      	cmp	r3, #14
 80084f6:	f200 80a4 	bhi.w	8008642 <_dtoa_r+0x442>
 80084fa:	2c00      	cmp	r4, #0
 80084fc:	f000 80a1 	beq.w	8008642 <_dtoa_r+0x442>
 8008500:	2f00      	cmp	r7, #0
 8008502:	dd33      	ble.n	800856c <_dtoa_r+0x36c>
 8008504:	4bad      	ldr	r3, [pc, #692]	@ (80087bc <_dtoa_r+0x5bc>)
 8008506:	f007 020f 	and.w	r2, r7, #15
 800850a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800850e:	ed93 7b00 	vldr	d7, [r3]
 8008512:	05f8      	lsls	r0, r7, #23
 8008514:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008518:	ea4f 1427 	mov.w	r4, r7, asr #4
 800851c:	d516      	bpl.n	800854c <_dtoa_r+0x34c>
 800851e:	4ba8      	ldr	r3, [pc, #672]	@ (80087c0 <_dtoa_r+0x5c0>)
 8008520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008524:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008528:	f7f8 f9b8 	bl	800089c <__aeabi_ddiv>
 800852c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008530:	f004 040f 	and.w	r4, r4, #15
 8008534:	2603      	movs	r6, #3
 8008536:	4da2      	ldr	r5, [pc, #648]	@ (80087c0 <_dtoa_r+0x5c0>)
 8008538:	b954      	cbnz	r4, 8008550 <_dtoa_r+0x350>
 800853a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800853e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008542:	f7f8 f9ab 	bl	800089c <__aeabi_ddiv>
 8008546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800854a:	e028      	b.n	800859e <_dtoa_r+0x39e>
 800854c:	2602      	movs	r6, #2
 800854e:	e7f2      	b.n	8008536 <_dtoa_r+0x336>
 8008550:	07e1      	lsls	r1, r4, #31
 8008552:	d508      	bpl.n	8008566 <_dtoa_r+0x366>
 8008554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008558:	e9d5 2300 	ldrd	r2, r3, [r5]
 800855c:	f7f8 f874 	bl	8000648 <__aeabi_dmul>
 8008560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008564:	3601      	adds	r6, #1
 8008566:	1064      	asrs	r4, r4, #1
 8008568:	3508      	adds	r5, #8
 800856a:	e7e5      	b.n	8008538 <_dtoa_r+0x338>
 800856c:	f000 80d2 	beq.w	8008714 <_dtoa_r+0x514>
 8008570:	427c      	negs	r4, r7
 8008572:	4b92      	ldr	r3, [pc, #584]	@ (80087bc <_dtoa_r+0x5bc>)
 8008574:	4d92      	ldr	r5, [pc, #584]	@ (80087c0 <_dtoa_r+0x5c0>)
 8008576:	f004 020f 	and.w	r2, r4, #15
 800857a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008586:	f7f8 f85f 	bl	8000648 <__aeabi_dmul>
 800858a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858e:	1124      	asrs	r4, r4, #4
 8008590:	2300      	movs	r3, #0
 8008592:	2602      	movs	r6, #2
 8008594:	2c00      	cmp	r4, #0
 8008596:	f040 80b2 	bne.w	80086fe <_dtoa_r+0x4fe>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1d3      	bne.n	8008546 <_dtoa_r+0x346>
 800859e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 80b7 	beq.w	8008718 <_dtoa_r+0x518>
 80085aa:	4b86      	ldr	r3, [pc, #536]	@ (80087c4 <_dtoa_r+0x5c4>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f8 fabb 	bl	8000b2c <__aeabi_dcmplt>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f000 80ae 	beq.w	8008718 <_dtoa_r+0x518>
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 80aa 	beq.w	8008718 <_dtoa_r+0x518>
 80085c4:	9b00      	ldr	r3, [sp, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dd37      	ble.n	800863a <_dtoa_r+0x43a>
 80085ca:	1e7b      	subs	r3, r7, #1
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	4620      	mov	r0, r4
 80085d0:	4b7d      	ldr	r3, [pc, #500]	@ (80087c8 <_dtoa_r+0x5c8>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	4629      	mov	r1, r5
 80085d6:	f7f8 f837 	bl	8000648 <__aeabi_dmul>
 80085da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085de:	9c00      	ldr	r4, [sp, #0]
 80085e0:	3601      	adds	r6, #1
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7f7 ffc6 	bl	8000574 <__aeabi_i2d>
 80085e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ec:	f7f8 f82c 	bl	8000648 <__aeabi_dmul>
 80085f0:	4b76      	ldr	r3, [pc, #472]	@ (80087cc <_dtoa_r+0x5cc>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7f7 fe72 	bl	80002dc <__adddf3>
 80085f8:	4605      	mov	r5, r0
 80085fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085fe:	2c00      	cmp	r4, #0
 8008600:	f040 808d 	bne.w	800871e <_dtoa_r+0x51e>
 8008604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008608:	4b71      	ldr	r3, [pc, #452]	@ (80087d0 <_dtoa_r+0x5d0>)
 800860a:	2200      	movs	r2, #0
 800860c:	f7f7 fe64 	bl	80002d8 <__aeabi_dsub>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008618:	462a      	mov	r2, r5
 800861a:	4633      	mov	r3, r6
 800861c:	f7f8 faa4 	bl	8000b68 <__aeabi_dcmpgt>
 8008620:	2800      	cmp	r0, #0
 8008622:	f040 828b 	bne.w	8008b3c <_dtoa_r+0x93c>
 8008626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800862a:	462a      	mov	r2, r5
 800862c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008630:	f7f8 fa7c 	bl	8000b2c <__aeabi_dcmplt>
 8008634:	2800      	cmp	r0, #0
 8008636:	f040 8128 	bne.w	800888a <_dtoa_r+0x68a>
 800863a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800863e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008644:	2b00      	cmp	r3, #0
 8008646:	f2c0 815a 	blt.w	80088fe <_dtoa_r+0x6fe>
 800864a:	2f0e      	cmp	r7, #14
 800864c:	f300 8157 	bgt.w	80088fe <_dtoa_r+0x6fe>
 8008650:	4b5a      	ldr	r3, [pc, #360]	@ (80087bc <_dtoa_r+0x5bc>)
 8008652:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008656:	ed93 7b00 	vldr	d7, [r3]
 800865a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800865c:	2b00      	cmp	r3, #0
 800865e:	ed8d 7b00 	vstr	d7, [sp]
 8008662:	da03      	bge.n	800866c <_dtoa_r+0x46c>
 8008664:	9b07      	ldr	r3, [sp, #28]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f340 8101 	ble.w	800886e <_dtoa_r+0x66e>
 800866c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008670:	4656      	mov	r6, sl
 8008672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f8 f90f 	bl	800089c <__aeabi_ddiv>
 800867e:	f7f8 fa93 	bl	8000ba8 <__aeabi_d2iz>
 8008682:	4680      	mov	r8, r0
 8008684:	f7f7 ff76 	bl	8000574 <__aeabi_i2d>
 8008688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800868c:	f7f7 ffdc 	bl	8000648 <__aeabi_dmul>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4620      	mov	r0, r4
 8008696:	4629      	mov	r1, r5
 8008698:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800869c:	f7f7 fe1c 	bl	80002d8 <__aeabi_dsub>
 80086a0:	f806 4b01 	strb.w	r4, [r6], #1
 80086a4:	9d07      	ldr	r5, [sp, #28]
 80086a6:	eba6 040a 	sub.w	r4, r6, sl
 80086aa:	42a5      	cmp	r5, r4
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	f040 8117 	bne.w	80088e2 <_dtoa_r+0x6e2>
 80086b4:	f7f7 fe12 	bl	80002dc <__adddf3>
 80086b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086bc:	4604      	mov	r4, r0
 80086be:	460d      	mov	r5, r1
 80086c0:	f7f8 fa52 	bl	8000b68 <__aeabi_dcmpgt>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	f040 80f9 	bne.w	80088bc <_dtoa_r+0x6bc>
 80086ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f8 fa21 	bl	8000b18 <__aeabi_dcmpeq>
 80086d6:	b118      	cbz	r0, 80086e0 <_dtoa_r+0x4e0>
 80086d8:	f018 0f01 	tst.w	r8, #1
 80086dc:	f040 80ee 	bne.w	80088bc <_dtoa_r+0x6bc>
 80086e0:	4649      	mov	r1, r9
 80086e2:	4658      	mov	r0, fp
 80086e4:	f000 fc90 	bl	8009008 <_Bfree>
 80086e8:	2300      	movs	r3, #0
 80086ea:	7033      	strb	r3, [r6, #0]
 80086ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086ee:	3701      	adds	r7, #1
 80086f0:	601f      	str	r7, [r3, #0]
 80086f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 831d 	beq.w	8008d34 <_dtoa_r+0xb34>
 80086fa:	601e      	str	r6, [r3, #0]
 80086fc:	e31a      	b.n	8008d34 <_dtoa_r+0xb34>
 80086fe:	07e2      	lsls	r2, r4, #31
 8008700:	d505      	bpl.n	800870e <_dtoa_r+0x50e>
 8008702:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008706:	f7f7 ff9f 	bl	8000648 <__aeabi_dmul>
 800870a:	3601      	adds	r6, #1
 800870c:	2301      	movs	r3, #1
 800870e:	1064      	asrs	r4, r4, #1
 8008710:	3508      	adds	r5, #8
 8008712:	e73f      	b.n	8008594 <_dtoa_r+0x394>
 8008714:	2602      	movs	r6, #2
 8008716:	e742      	b.n	800859e <_dtoa_r+0x39e>
 8008718:	9c07      	ldr	r4, [sp, #28]
 800871a:	9704      	str	r7, [sp, #16]
 800871c:	e761      	b.n	80085e2 <_dtoa_r+0x3e2>
 800871e:	4b27      	ldr	r3, [pc, #156]	@ (80087bc <_dtoa_r+0x5bc>)
 8008720:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008722:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008726:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800872a:	4454      	add	r4, sl
 800872c:	2900      	cmp	r1, #0
 800872e:	d053      	beq.n	80087d8 <_dtoa_r+0x5d8>
 8008730:	4928      	ldr	r1, [pc, #160]	@ (80087d4 <_dtoa_r+0x5d4>)
 8008732:	2000      	movs	r0, #0
 8008734:	f7f8 f8b2 	bl	800089c <__aeabi_ddiv>
 8008738:	4633      	mov	r3, r6
 800873a:	462a      	mov	r2, r5
 800873c:	f7f7 fdcc 	bl	80002d8 <__aeabi_dsub>
 8008740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008744:	4656      	mov	r6, sl
 8008746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800874a:	f7f8 fa2d 	bl	8000ba8 <__aeabi_d2iz>
 800874e:	4605      	mov	r5, r0
 8008750:	f7f7 ff10 	bl	8000574 <__aeabi_i2d>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800875c:	f7f7 fdbc 	bl	80002d8 <__aeabi_dsub>
 8008760:	3530      	adds	r5, #48	@ 0x30
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800876a:	f806 5b01 	strb.w	r5, [r6], #1
 800876e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008772:	f7f8 f9db 	bl	8000b2c <__aeabi_dcmplt>
 8008776:	2800      	cmp	r0, #0
 8008778:	d171      	bne.n	800885e <_dtoa_r+0x65e>
 800877a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800877e:	4911      	ldr	r1, [pc, #68]	@ (80087c4 <_dtoa_r+0x5c4>)
 8008780:	2000      	movs	r0, #0
 8008782:	f7f7 fda9 	bl	80002d8 <__aeabi_dsub>
 8008786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800878a:	f7f8 f9cf 	bl	8000b2c <__aeabi_dcmplt>
 800878e:	2800      	cmp	r0, #0
 8008790:	f040 8095 	bne.w	80088be <_dtoa_r+0x6be>
 8008794:	42a6      	cmp	r6, r4
 8008796:	f43f af50 	beq.w	800863a <_dtoa_r+0x43a>
 800879a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800879e:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <_dtoa_r+0x5c8>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	f7f7 ff51 	bl	8000648 <__aeabi_dmul>
 80087a6:	4b08      	ldr	r3, [pc, #32]	@ (80087c8 <_dtoa_r+0x5c8>)
 80087a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087ac:	2200      	movs	r2, #0
 80087ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b2:	f7f7 ff49 	bl	8000648 <__aeabi_dmul>
 80087b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087ba:	e7c4      	b.n	8008746 <_dtoa_r+0x546>
 80087bc:	0800ba78 	.word	0x0800ba78
 80087c0:	0800ba50 	.word	0x0800ba50
 80087c4:	3ff00000 	.word	0x3ff00000
 80087c8:	40240000 	.word	0x40240000
 80087cc:	401c0000 	.word	0x401c0000
 80087d0:	40140000 	.word	0x40140000
 80087d4:	3fe00000 	.word	0x3fe00000
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	f7f7 ff34 	bl	8000648 <__aeabi_dmul>
 80087e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80087e6:	4656      	mov	r6, sl
 80087e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ec:	f7f8 f9dc 	bl	8000ba8 <__aeabi_d2iz>
 80087f0:	4605      	mov	r5, r0
 80087f2:	f7f7 febf 	bl	8000574 <__aeabi_i2d>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fe:	f7f7 fd6b 	bl	80002d8 <__aeabi_dsub>
 8008802:	3530      	adds	r5, #48	@ 0x30
 8008804:	f806 5b01 	strb.w	r5, [r6], #1
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	42a6      	cmp	r6, r4
 800880e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	d124      	bne.n	8008862 <_dtoa_r+0x662>
 8008818:	4bac      	ldr	r3, [pc, #688]	@ (8008acc <_dtoa_r+0x8cc>)
 800881a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800881e:	f7f7 fd5d 	bl	80002dc <__adddf3>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800882a:	f7f8 f99d 	bl	8000b68 <__aeabi_dcmpgt>
 800882e:	2800      	cmp	r0, #0
 8008830:	d145      	bne.n	80088be <_dtoa_r+0x6be>
 8008832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008836:	49a5      	ldr	r1, [pc, #660]	@ (8008acc <_dtoa_r+0x8cc>)
 8008838:	2000      	movs	r0, #0
 800883a:	f7f7 fd4d 	bl	80002d8 <__aeabi_dsub>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008846:	f7f8 f971 	bl	8000b2c <__aeabi_dcmplt>
 800884a:	2800      	cmp	r0, #0
 800884c:	f43f aef5 	beq.w	800863a <_dtoa_r+0x43a>
 8008850:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008852:	1e73      	subs	r3, r6, #1
 8008854:	9315      	str	r3, [sp, #84]	@ 0x54
 8008856:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800885a:	2b30      	cmp	r3, #48	@ 0x30
 800885c:	d0f8      	beq.n	8008850 <_dtoa_r+0x650>
 800885e:	9f04      	ldr	r7, [sp, #16]
 8008860:	e73e      	b.n	80086e0 <_dtoa_r+0x4e0>
 8008862:	4b9b      	ldr	r3, [pc, #620]	@ (8008ad0 <_dtoa_r+0x8d0>)
 8008864:	f7f7 fef0 	bl	8000648 <__aeabi_dmul>
 8008868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800886c:	e7bc      	b.n	80087e8 <_dtoa_r+0x5e8>
 800886e:	d10c      	bne.n	800888a <_dtoa_r+0x68a>
 8008870:	4b98      	ldr	r3, [pc, #608]	@ (8008ad4 <_dtoa_r+0x8d4>)
 8008872:	2200      	movs	r2, #0
 8008874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008878:	f7f7 fee6 	bl	8000648 <__aeabi_dmul>
 800887c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008880:	f7f8 f968 	bl	8000b54 <__aeabi_dcmpge>
 8008884:	2800      	cmp	r0, #0
 8008886:	f000 8157 	beq.w	8008b38 <_dtoa_r+0x938>
 800888a:	2400      	movs	r4, #0
 800888c:	4625      	mov	r5, r4
 800888e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008890:	43db      	mvns	r3, r3
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	4656      	mov	r6, sl
 8008896:	2700      	movs	r7, #0
 8008898:	4621      	mov	r1, r4
 800889a:	4658      	mov	r0, fp
 800889c:	f000 fbb4 	bl	8009008 <_Bfree>
 80088a0:	2d00      	cmp	r5, #0
 80088a2:	d0dc      	beq.n	800885e <_dtoa_r+0x65e>
 80088a4:	b12f      	cbz	r7, 80088b2 <_dtoa_r+0x6b2>
 80088a6:	42af      	cmp	r7, r5
 80088a8:	d003      	beq.n	80088b2 <_dtoa_r+0x6b2>
 80088aa:	4639      	mov	r1, r7
 80088ac:	4658      	mov	r0, fp
 80088ae:	f000 fbab 	bl	8009008 <_Bfree>
 80088b2:	4629      	mov	r1, r5
 80088b4:	4658      	mov	r0, fp
 80088b6:	f000 fba7 	bl	8009008 <_Bfree>
 80088ba:	e7d0      	b.n	800885e <_dtoa_r+0x65e>
 80088bc:	9704      	str	r7, [sp, #16]
 80088be:	4633      	mov	r3, r6
 80088c0:	461e      	mov	r6, r3
 80088c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088c6:	2a39      	cmp	r2, #57	@ 0x39
 80088c8:	d107      	bne.n	80088da <_dtoa_r+0x6da>
 80088ca:	459a      	cmp	sl, r3
 80088cc:	d1f8      	bne.n	80088c0 <_dtoa_r+0x6c0>
 80088ce:	9a04      	ldr	r2, [sp, #16]
 80088d0:	3201      	adds	r2, #1
 80088d2:	9204      	str	r2, [sp, #16]
 80088d4:	2230      	movs	r2, #48	@ 0x30
 80088d6:	f88a 2000 	strb.w	r2, [sl]
 80088da:	781a      	ldrb	r2, [r3, #0]
 80088dc:	3201      	adds	r2, #1
 80088de:	701a      	strb	r2, [r3, #0]
 80088e0:	e7bd      	b.n	800885e <_dtoa_r+0x65e>
 80088e2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ad0 <_dtoa_r+0x8d0>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	f7f7 feaf 	bl	8000648 <__aeabi_dmul>
 80088ea:	2200      	movs	r2, #0
 80088ec:	2300      	movs	r3, #0
 80088ee:	4604      	mov	r4, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	f7f8 f911 	bl	8000b18 <__aeabi_dcmpeq>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f43f aebb 	beq.w	8008672 <_dtoa_r+0x472>
 80088fc:	e6f0      	b.n	80086e0 <_dtoa_r+0x4e0>
 80088fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008900:	2a00      	cmp	r2, #0
 8008902:	f000 80db 	beq.w	8008abc <_dtoa_r+0x8bc>
 8008906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008908:	2a01      	cmp	r2, #1
 800890a:	f300 80bf 	bgt.w	8008a8c <_dtoa_r+0x88c>
 800890e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008910:	2a00      	cmp	r2, #0
 8008912:	f000 80b7 	beq.w	8008a84 <_dtoa_r+0x884>
 8008916:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800891a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800891c:	4646      	mov	r6, r8
 800891e:	9a08      	ldr	r2, [sp, #32]
 8008920:	2101      	movs	r1, #1
 8008922:	441a      	add	r2, r3
 8008924:	4658      	mov	r0, fp
 8008926:	4498      	add	r8, r3
 8008928:	9208      	str	r2, [sp, #32]
 800892a:	f000 fc6b 	bl	8009204 <__i2b>
 800892e:	4605      	mov	r5, r0
 8008930:	b15e      	cbz	r6, 800894a <_dtoa_r+0x74a>
 8008932:	9b08      	ldr	r3, [sp, #32]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd08      	ble.n	800894a <_dtoa_r+0x74a>
 8008938:	42b3      	cmp	r3, r6
 800893a:	9a08      	ldr	r2, [sp, #32]
 800893c:	bfa8      	it	ge
 800893e:	4633      	movge	r3, r6
 8008940:	eba8 0803 	sub.w	r8, r8, r3
 8008944:	1af6      	subs	r6, r6, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	9308      	str	r3, [sp, #32]
 800894a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800894c:	b1f3      	cbz	r3, 800898c <_dtoa_r+0x78c>
 800894e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80b7 	beq.w	8008ac4 <_dtoa_r+0x8c4>
 8008956:	b18c      	cbz	r4, 800897c <_dtoa_r+0x77c>
 8008958:	4629      	mov	r1, r5
 800895a:	4622      	mov	r2, r4
 800895c:	4658      	mov	r0, fp
 800895e:	f000 fd11 	bl	8009384 <__pow5mult>
 8008962:	464a      	mov	r2, r9
 8008964:	4601      	mov	r1, r0
 8008966:	4605      	mov	r5, r0
 8008968:	4658      	mov	r0, fp
 800896a:	f000 fc61 	bl	8009230 <__multiply>
 800896e:	4649      	mov	r1, r9
 8008970:	9004      	str	r0, [sp, #16]
 8008972:	4658      	mov	r0, fp
 8008974:	f000 fb48 	bl	8009008 <_Bfree>
 8008978:	9b04      	ldr	r3, [sp, #16]
 800897a:	4699      	mov	r9, r3
 800897c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800897e:	1b1a      	subs	r2, r3, r4
 8008980:	d004      	beq.n	800898c <_dtoa_r+0x78c>
 8008982:	4649      	mov	r1, r9
 8008984:	4658      	mov	r0, fp
 8008986:	f000 fcfd 	bl	8009384 <__pow5mult>
 800898a:	4681      	mov	r9, r0
 800898c:	2101      	movs	r1, #1
 800898e:	4658      	mov	r0, fp
 8008990:	f000 fc38 	bl	8009204 <__i2b>
 8008994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008996:	4604      	mov	r4, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 81cf 	beq.w	8008d3c <_dtoa_r+0xb3c>
 800899e:	461a      	mov	r2, r3
 80089a0:	4601      	mov	r1, r0
 80089a2:	4658      	mov	r0, fp
 80089a4:	f000 fcee 	bl	8009384 <__pow5mult>
 80089a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	4604      	mov	r4, r0
 80089ae:	f300 8095 	bgt.w	8008adc <_dtoa_r+0x8dc>
 80089b2:	9b02      	ldr	r3, [sp, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f040 8087 	bne.w	8008ac8 <_dtoa_r+0x8c8>
 80089ba:	9b03      	ldr	r3, [sp, #12]
 80089bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f040 8089 	bne.w	8008ad8 <_dtoa_r+0x8d8>
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089cc:	0d1b      	lsrs	r3, r3, #20
 80089ce:	051b      	lsls	r3, r3, #20
 80089d0:	b12b      	cbz	r3, 80089de <_dtoa_r+0x7de>
 80089d2:	9b08      	ldr	r3, [sp, #32]
 80089d4:	3301      	adds	r3, #1
 80089d6:	9308      	str	r3, [sp, #32]
 80089d8:	f108 0801 	add.w	r8, r8, #1
 80089dc:	2301      	movs	r3, #1
 80089de:	930a      	str	r3, [sp, #40]	@ 0x28
 80089e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 81b0 	beq.w	8008d48 <_dtoa_r+0xb48>
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089ee:	6918      	ldr	r0, [r3, #16]
 80089f0:	f000 fbbc 	bl	800916c <__hi0bits>
 80089f4:	f1c0 0020 	rsb	r0, r0, #32
 80089f8:	9b08      	ldr	r3, [sp, #32]
 80089fa:	4418      	add	r0, r3
 80089fc:	f010 001f 	ands.w	r0, r0, #31
 8008a00:	d077      	beq.n	8008af2 <_dtoa_r+0x8f2>
 8008a02:	f1c0 0320 	rsb	r3, r0, #32
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	dd6b      	ble.n	8008ae2 <_dtoa_r+0x8e2>
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	f1c0 001c 	rsb	r0, r0, #28
 8008a10:	4403      	add	r3, r0
 8008a12:	4480      	add	r8, r0
 8008a14:	4406      	add	r6, r0
 8008a16:	9308      	str	r3, [sp, #32]
 8008a18:	f1b8 0f00 	cmp.w	r8, #0
 8008a1c:	dd05      	ble.n	8008a2a <_dtoa_r+0x82a>
 8008a1e:	4649      	mov	r1, r9
 8008a20:	4642      	mov	r2, r8
 8008a22:	4658      	mov	r0, fp
 8008a24:	f000 fd08 	bl	8009438 <__lshift>
 8008a28:	4681      	mov	r9, r0
 8008a2a:	9b08      	ldr	r3, [sp, #32]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dd05      	ble.n	8008a3c <_dtoa_r+0x83c>
 8008a30:	4621      	mov	r1, r4
 8008a32:	461a      	mov	r2, r3
 8008a34:	4658      	mov	r0, fp
 8008a36:	f000 fcff 	bl	8009438 <__lshift>
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d059      	beq.n	8008af6 <_dtoa_r+0x8f6>
 8008a42:	4621      	mov	r1, r4
 8008a44:	4648      	mov	r0, r9
 8008a46:	f000 fd63 	bl	8009510 <__mcmp>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	da53      	bge.n	8008af6 <_dtoa_r+0x8f6>
 8008a4e:	1e7b      	subs	r3, r7, #1
 8008a50:	9304      	str	r3, [sp, #16]
 8008a52:	4649      	mov	r1, r9
 8008a54:	2300      	movs	r3, #0
 8008a56:	220a      	movs	r2, #10
 8008a58:	4658      	mov	r0, fp
 8008a5a:	f000 faf7 	bl	800904c <__multadd>
 8008a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a60:	4681      	mov	r9, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 8172 	beq.w	8008d4c <_dtoa_r+0xb4c>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	220a      	movs	r2, #10
 8008a6e:	4658      	mov	r0, fp
 8008a70:	f000 faec 	bl	800904c <__multadd>
 8008a74:	9b00      	ldr	r3, [sp, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	4605      	mov	r5, r0
 8008a7a:	dc67      	bgt.n	8008b4c <_dtoa_r+0x94c>
 8008a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	dc41      	bgt.n	8008b06 <_dtoa_r+0x906>
 8008a82:	e063      	b.n	8008b4c <_dtoa_r+0x94c>
 8008a84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a8a:	e746      	b.n	800891a <_dtoa_r+0x71a>
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	1e5c      	subs	r4, r3, #1
 8008a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	bfbf      	itttt	lt
 8008a96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a9c:	1ae3      	sublt	r3, r4, r3
 8008a9e:	bfb4      	ite	lt
 8008aa0:	18d2      	addlt	r2, r2, r3
 8008aa2:	1b1c      	subge	r4, r3, r4
 8008aa4:	9b07      	ldr	r3, [sp, #28]
 8008aa6:	bfbc      	itt	lt
 8008aa8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008aaa:	2400      	movlt	r4, #0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	bfb5      	itete	lt
 8008ab0:	eba8 0603 	sublt.w	r6, r8, r3
 8008ab4:	9b07      	ldrge	r3, [sp, #28]
 8008ab6:	2300      	movlt	r3, #0
 8008ab8:	4646      	movge	r6, r8
 8008aba:	e730      	b.n	800891e <_dtoa_r+0x71e>
 8008abc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008abe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ac0:	4646      	mov	r6, r8
 8008ac2:	e735      	b.n	8008930 <_dtoa_r+0x730>
 8008ac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ac6:	e75c      	b.n	8008982 <_dtoa_r+0x782>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e788      	b.n	80089de <_dtoa_r+0x7de>
 8008acc:	3fe00000 	.word	0x3fe00000
 8008ad0:	40240000 	.word	0x40240000
 8008ad4:	40140000 	.word	0x40140000
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	e780      	b.n	80089de <_dtoa_r+0x7de>
 8008adc:	2300      	movs	r3, #0
 8008ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ae0:	e782      	b.n	80089e8 <_dtoa_r+0x7e8>
 8008ae2:	d099      	beq.n	8008a18 <_dtoa_r+0x818>
 8008ae4:	9a08      	ldr	r2, [sp, #32]
 8008ae6:	331c      	adds	r3, #28
 8008ae8:	441a      	add	r2, r3
 8008aea:	4498      	add	r8, r3
 8008aec:	441e      	add	r6, r3
 8008aee:	9208      	str	r2, [sp, #32]
 8008af0:	e792      	b.n	8008a18 <_dtoa_r+0x818>
 8008af2:	4603      	mov	r3, r0
 8008af4:	e7f6      	b.n	8008ae4 <_dtoa_r+0x8e4>
 8008af6:	9b07      	ldr	r3, [sp, #28]
 8008af8:	9704      	str	r7, [sp, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dc20      	bgt.n	8008b40 <_dtoa_r+0x940>
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	dd1e      	ble.n	8008b44 <_dtoa_r+0x944>
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f47f aec0 	bne.w	800888e <_dtoa_r+0x68e>
 8008b0e:	4621      	mov	r1, r4
 8008b10:	2205      	movs	r2, #5
 8008b12:	4658      	mov	r0, fp
 8008b14:	f000 fa9a 	bl	800904c <__multadd>
 8008b18:	4601      	mov	r1, r0
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	f000 fcf7 	bl	8009510 <__mcmp>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	f77f aeb3 	ble.w	800888e <_dtoa_r+0x68e>
 8008b28:	4656      	mov	r6, sl
 8008b2a:	2331      	movs	r3, #49	@ 0x31
 8008b2c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b30:	9b04      	ldr	r3, [sp, #16]
 8008b32:	3301      	adds	r3, #1
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	e6ae      	b.n	8008896 <_dtoa_r+0x696>
 8008b38:	9c07      	ldr	r4, [sp, #28]
 8008b3a:	9704      	str	r7, [sp, #16]
 8008b3c:	4625      	mov	r5, r4
 8008b3e:	e7f3      	b.n	8008b28 <_dtoa_r+0x928>
 8008b40:	9b07      	ldr	r3, [sp, #28]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 8104 	beq.w	8008d54 <_dtoa_r+0xb54>
 8008b4c:	2e00      	cmp	r6, #0
 8008b4e:	dd05      	ble.n	8008b5c <_dtoa_r+0x95c>
 8008b50:	4629      	mov	r1, r5
 8008b52:	4632      	mov	r2, r6
 8008b54:	4658      	mov	r0, fp
 8008b56:	f000 fc6f 	bl	8009438 <__lshift>
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d05a      	beq.n	8008c18 <_dtoa_r+0xa18>
 8008b62:	6869      	ldr	r1, [r5, #4]
 8008b64:	4658      	mov	r0, fp
 8008b66:	f000 fa0f 	bl	8008f88 <_Balloc>
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	b928      	cbnz	r0, 8008b7a <_dtoa_r+0x97a>
 8008b6e:	4b84      	ldr	r3, [pc, #528]	@ (8008d80 <_dtoa_r+0xb80>)
 8008b70:	4602      	mov	r2, r0
 8008b72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b76:	f7ff bb5a 	b.w	800822e <_dtoa_r+0x2e>
 8008b7a:	692a      	ldr	r2, [r5, #16]
 8008b7c:	3202      	adds	r2, #2
 8008b7e:	0092      	lsls	r2, r2, #2
 8008b80:	f105 010c 	add.w	r1, r5, #12
 8008b84:	300c      	adds	r0, #12
 8008b86:	f002 f94b 	bl	800ae20 <memcpy>
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4658      	mov	r0, fp
 8008b90:	f000 fc52 	bl	8009438 <__lshift>
 8008b94:	f10a 0301 	add.w	r3, sl, #1
 8008b98:	9307      	str	r3, [sp, #28]
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	4453      	add	r3, sl
 8008b9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ba0:	9b02      	ldr	r3, [sp, #8]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	462f      	mov	r7, r5
 8008ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008baa:	4605      	mov	r5, r0
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	4621      	mov	r1, r4
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	4648      	mov	r0, r9
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	f7ff fa9b 	bl	80080f0 <quorem>
 8008bba:	4639      	mov	r1, r7
 8008bbc:	9002      	str	r0, [sp, #8]
 8008bbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bc2:	4648      	mov	r0, r9
 8008bc4:	f000 fca4 	bl	8009510 <__mcmp>
 8008bc8:	462a      	mov	r2, r5
 8008bca:	9008      	str	r0, [sp, #32]
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4658      	mov	r0, fp
 8008bd0:	f000 fcba 	bl	8009548 <__mdiff>
 8008bd4:	68c2      	ldr	r2, [r0, #12]
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	bb02      	cbnz	r2, 8008c1c <_dtoa_r+0xa1c>
 8008bda:	4601      	mov	r1, r0
 8008bdc:	4648      	mov	r0, r9
 8008bde:	f000 fc97 	bl	8009510 <__mcmp>
 8008be2:	4602      	mov	r2, r0
 8008be4:	4631      	mov	r1, r6
 8008be6:	4658      	mov	r0, fp
 8008be8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bea:	f000 fa0d 	bl	8009008 <_Bfree>
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bf2:	9e07      	ldr	r6, [sp, #28]
 8008bf4:	ea43 0102 	orr.w	r1, r3, r2
 8008bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bfa:	4319      	orrs	r1, r3
 8008bfc:	d110      	bne.n	8008c20 <_dtoa_r+0xa20>
 8008bfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c02:	d029      	beq.n	8008c58 <_dtoa_r+0xa58>
 8008c04:	9b08      	ldr	r3, [sp, #32]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dd02      	ble.n	8008c10 <_dtoa_r+0xa10>
 8008c0a:	9b02      	ldr	r3, [sp, #8]
 8008c0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c10:	9b00      	ldr	r3, [sp, #0]
 8008c12:	f883 8000 	strb.w	r8, [r3]
 8008c16:	e63f      	b.n	8008898 <_dtoa_r+0x698>
 8008c18:	4628      	mov	r0, r5
 8008c1a:	e7bb      	b.n	8008b94 <_dtoa_r+0x994>
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	e7e1      	b.n	8008be4 <_dtoa_r+0x9e4>
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	db04      	blt.n	8008c30 <_dtoa_r+0xa30>
 8008c26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	d120      	bne.n	8008c72 <_dtoa_r+0xa72>
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	dded      	ble.n	8008c10 <_dtoa_r+0xa10>
 8008c34:	4649      	mov	r1, r9
 8008c36:	2201      	movs	r2, #1
 8008c38:	4658      	mov	r0, fp
 8008c3a:	f000 fbfd 	bl	8009438 <__lshift>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4681      	mov	r9, r0
 8008c42:	f000 fc65 	bl	8009510 <__mcmp>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	dc03      	bgt.n	8008c52 <_dtoa_r+0xa52>
 8008c4a:	d1e1      	bne.n	8008c10 <_dtoa_r+0xa10>
 8008c4c:	f018 0f01 	tst.w	r8, #1
 8008c50:	d0de      	beq.n	8008c10 <_dtoa_r+0xa10>
 8008c52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c56:	d1d8      	bne.n	8008c0a <_dtoa_r+0xa0a>
 8008c58:	9a00      	ldr	r2, [sp, #0]
 8008c5a:	2339      	movs	r3, #57	@ 0x39
 8008c5c:	7013      	strb	r3, [r2, #0]
 8008c5e:	4633      	mov	r3, r6
 8008c60:	461e      	mov	r6, r3
 8008c62:	3b01      	subs	r3, #1
 8008c64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c68:	2a39      	cmp	r2, #57	@ 0x39
 8008c6a:	d052      	beq.n	8008d12 <_dtoa_r+0xb12>
 8008c6c:	3201      	adds	r2, #1
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	e612      	b.n	8008898 <_dtoa_r+0x698>
 8008c72:	2a00      	cmp	r2, #0
 8008c74:	dd07      	ble.n	8008c86 <_dtoa_r+0xa86>
 8008c76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c7a:	d0ed      	beq.n	8008c58 <_dtoa_r+0xa58>
 8008c7c:	9a00      	ldr	r2, [sp, #0]
 8008c7e:	f108 0301 	add.w	r3, r8, #1
 8008c82:	7013      	strb	r3, [r2, #0]
 8008c84:	e608      	b.n	8008898 <_dtoa_r+0x698>
 8008c86:	9b07      	ldr	r3, [sp, #28]
 8008c88:	9a07      	ldr	r2, [sp, #28]
 8008c8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d028      	beq.n	8008ce6 <_dtoa_r+0xae6>
 8008c94:	4649      	mov	r1, r9
 8008c96:	2300      	movs	r3, #0
 8008c98:	220a      	movs	r2, #10
 8008c9a:	4658      	mov	r0, fp
 8008c9c:	f000 f9d6 	bl	800904c <__multadd>
 8008ca0:	42af      	cmp	r7, r5
 8008ca2:	4681      	mov	r9, r0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	f04f 020a 	mov.w	r2, #10
 8008cac:	4639      	mov	r1, r7
 8008cae:	4658      	mov	r0, fp
 8008cb0:	d107      	bne.n	8008cc2 <_dtoa_r+0xac2>
 8008cb2:	f000 f9cb 	bl	800904c <__multadd>
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	4605      	mov	r5, r0
 8008cba:	9b07      	ldr	r3, [sp, #28]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	9307      	str	r3, [sp, #28]
 8008cc0:	e774      	b.n	8008bac <_dtoa_r+0x9ac>
 8008cc2:	f000 f9c3 	bl	800904c <__multadd>
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	4607      	mov	r7, r0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	220a      	movs	r2, #10
 8008cce:	4658      	mov	r0, fp
 8008cd0:	f000 f9bc 	bl	800904c <__multadd>
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	e7f0      	b.n	8008cba <_dtoa_r+0xaba>
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bfcc      	ite	gt
 8008cde:	461e      	movgt	r6, r3
 8008ce0:	2601      	movle	r6, #1
 8008ce2:	4456      	add	r6, sl
 8008ce4:	2700      	movs	r7, #0
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	2201      	movs	r2, #1
 8008cea:	4658      	mov	r0, fp
 8008cec:	f000 fba4 	bl	8009438 <__lshift>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	4681      	mov	r9, r0
 8008cf4:	f000 fc0c 	bl	8009510 <__mcmp>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	dcb0      	bgt.n	8008c5e <_dtoa_r+0xa5e>
 8008cfc:	d102      	bne.n	8008d04 <_dtoa_r+0xb04>
 8008cfe:	f018 0f01 	tst.w	r8, #1
 8008d02:	d1ac      	bne.n	8008c5e <_dtoa_r+0xa5e>
 8008d04:	4633      	mov	r3, r6
 8008d06:	461e      	mov	r6, r3
 8008d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d0c:	2a30      	cmp	r2, #48	@ 0x30
 8008d0e:	d0fa      	beq.n	8008d06 <_dtoa_r+0xb06>
 8008d10:	e5c2      	b.n	8008898 <_dtoa_r+0x698>
 8008d12:	459a      	cmp	sl, r3
 8008d14:	d1a4      	bne.n	8008c60 <_dtoa_r+0xa60>
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	2331      	movs	r3, #49	@ 0x31
 8008d1e:	f88a 3000 	strb.w	r3, [sl]
 8008d22:	e5b9      	b.n	8008898 <_dtoa_r+0x698>
 8008d24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d84 <_dtoa_r+0xb84>
 8008d2a:	b11b      	cbz	r3, 8008d34 <_dtoa_r+0xb34>
 8008d2c:	f10a 0308 	add.w	r3, sl, #8
 8008d30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	4650      	mov	r0, sl
 8008d36:	b019      	add	sp, #100	@ 0x64
 8008d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	f77f ae37 	ble.w	80089b2 <_dtoa_r+0x7b2>
 8008d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d48:	2001      	movs	r0, #1
 8008d4a:	e655      	b.n	80089f8 <_dtoa_r+0x7f8>
 8008d4c:	9b00      	ldr	r3, [sp, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f77f aed6 	ble.w	8008b00 <_dtoa_r+0x900>
 8008d54:	4656      	mov	r6, sl
 8008d56:	4621      	mov	r1, r4
 8008d58:	4648      	mov	r0, r9
 8008d5a:	f7ff f9c9 	bl	80080f0 <quorem>
 8008d5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d62:	f806 8b01 	strb.w	r8, [r6], #1
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	eba6 020a 	sub.w	r2, r6, sl
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	ddb3      	ble.n	8008cd8 <_dtoa_r+0xad8>
 8008d70:	4649      	mov	r1, r9
 8008d72:	2300      	movs	r3, #0
 8008d74:	220a      	movs	r2, #10
 8008d76:	4658      	mov	r0, fp
 8008d78:	f000 f968 	bl	800904c <__multadd>
 8008d7c:	4681      	mov	r9, r0
 8008d7e:	e7ea      	b.n	8008d56 <_dtoa_r+0xb56>
 8008d80:	0800b9d9 	.word	0x0800b9d9
 8008d84:	0800b95d 	.word	0x0800b95d

08008d88 <_free_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d041      	beq.n	8008e14 <_free_r+0x8c>
 8008d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d94:	1f0c      	subs	r4, r1, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfb8      	it	lt
 8008d9a:	18e4      	addlt	r4, r4, r3
 8008d9c:	f000 f8e8 	bl	8008f70 <__malloc_lock>
 8008da0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e18 <_free_r+0x90>)
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	b933      	cbnz	r3, 8008db4 <_free_r+0x2c>
 8008da6:	6063      	str	r3, [r4, #4]
 8008da8:	6014      	str	r4, [r2, #0]
 8008daa:	4628      	mov	r0, r5
 8008dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008db0:	f000 b8e4 	b.w	8008f7c <__malloc_unlock>
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d908      	bls.n	8008dca <_free_r+0x42>
 8008db8:	6820      	ldr	r0, [r4, #0]
 8008dba:	1821      	adds	r1, r4, r0
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	bf01      	itttt	eq
 8008dc0:	6819      	ldreq	r1, [r3, #0]
 8008dc2:	685b      	ldreq	r3, [r3, #4]
 8008dc4:	1809      	addeq	r1, r1, r0
 8008dc6:	6021      	streq	r1, [r4, #0]
 8008dc8:	e7ed      	b.n	8008da6 <_free_r+0x1e>
 8008dca:	461a      	mov	r2, r3
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b10b      	cbz	r3, 8008dd4 <_free_r+0x4c>
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	d9fa      	bls.n	8008dca <_free_r+0x42>
 8008dd4:	6811      	ldr	r1, [r2, #0]
 8008dd6:	1850      	adds	r0, r2, r1
 8008dd8:	42a0      	cmp	r0, r4
 8008dda:	d10b      	bne.n	8008df4 <_free_r+0x6c>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	4401      	add	r1, r0
 8008de0:	1850      	adds	r0, r2, r1
 8008de2:	4283      	cmp	r3, r0
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	d1e0      	bne.n	8008daa <_free_r+0x22>
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	6053      	str	r3, [r2, #4]
 8008dee:	4408      	add	r0, r1
 8008df0:	6010      	str	r0, [r2, #0]
 8008df2:	e7da      	b.n	8008daa <_free_r+0x22>
 8008df4:	d902      	bls.n	8008dfc <_free_r+0x74>
 8008df6:	230c      	movs	r3, #12
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	e7d6      	b.n	8008daa <_free_r+0x22>
 8008dfc:	6820      	ldr	r0, [r4, #0]
 8008dfe:	1821      	adds	r1, r4, r0
 8008e00:	428b      	cmp	r3, r1
 8008e02:	bf04      	itt	eq
 8008e04:	6819      	ldreq	r1, [r3, #0]
 8008e06:	685b      	ldreq	r3, [r3, #4]
 8008e08:	6063      	str	r3, [r4, #4]
 8008e0a:	bf04      	itt	eq
 8008e0c:	1809      	addeq	r1, r1, r0
 8008e0e:	6021      	streq	r1, [r4, #0]
 8008e10:	6054      	str	r4, [r2, #4]
 8008e12:	e7ca      	b.n	8008daa <_free_r+0x22>
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	bf00      	nop
 8008e18:	2000068c 	.word	0x2000068c

08008e1c <malloc>:
 8008e1c:	4b02      	ldr	r3, [pc, #8]	@ (8008e28 <malloc+0xc>)
 8008e1e:	4601      	mov	r1, r0
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	f000 b825 	b.w	8008e70 <_malloc_r>
 8008e26:	bf00      	nop
 8008e28:	2000001c 	.word	0x2000001c

08008e2c <sbrk_aligned>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8008e6c <sbrk_aligned+0x40>)
 8008e30:	460c      	mov	r4, r1
 8008e32:	6831      	ldr	r1, [r6, #0]
 8008e34:	4605      	mov	r5, r0
 8008e36:	b911      	cbnz	r1, 8008e3e <sbrk_aligned+0x12>
 8008e38:	f001 ffe2 	bl	800ae00 <_sbrk_r>
 8008e3c:	6030      	str	r0, [r6, #0]
 8008e3e:	4621      	mov	r1, r4
 8008e40:	4628      	mov	r0, r5
 8008e42:	f001 ffdd 	bl	800ae00 <_sbrk_r>
 8008e46:	1c43      	adds	r3, r0, #1
 8008e48:	d103      	bne.n	8008e52 <sbrk_aligned+0x26>
 8008e4a:	f04f 34ff 	mov.w	r4, #4294967295
 8008e4e:	4620      	mov	r0, r4
 8008e50:	bd70      	pop	{r4, r5, r6, pc}
 8008e52:	1cc4      	adds	r4, r0, #3
 8008e54:	f024 0403 	bic.w	r4, r4, #3
 8008e58:	42a0      	cmp	r0, r4
 8008e5a:	d0f8      	beq.n	8008e4e <sbrk_aligned+0x22>
 8008e5c:	1a21      	subs	r1, r4, r0
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f001 ffce 	bl	800ae00 <_sbrk_r>
 8008e64:	3001      	adds	r0, #1
 8008e66:	d1f2      	bne.n	8008e4e <sbrk_aligned+0x22>
 8008e68:	e7ef      	b.n	8008e4a <sbrk_aligned+0x1e>
 8008e6a:	bf00      	nop
 8008e6c:	20000688 	.word	0x20000688

08008e70 <_malloc_r>:
 8008e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e74:	1ccd      	adds	r5, r1, #3
 8008e76:	f025 0503 	bic.w	r5, r5, #3
 8008e7a:	3508      	adds	r5, #8
 8008e7c:	2d0c      	cmp	r5, #12
 8008e7e:	bf38      	it	cc
 8008e80:	250c      	movcc	r5, #12
 8008e82:	2d00      	cmp	r5, #0
 8008e84:	4606      	mov	r6, r0
 8008e86:	db01      	blt.n	8008e8c <_malloc_r+0x1c>
 8008e88:	42a9      	cmp	r1, r5
 8008e8a:	d904      	bls.n	8008e96 <_malloc_r+0x26>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	6033      	str	r3, [r6, #0]
 8008e90:	2000      	movs	r0, #0
 8008e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f6c <_malloc_r+0xfc>
 8008e9a:	f000 f869 	bl	8008f70 <__malloc_lock>
 8008e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008ea2:	461c      	mov	r4, r3
 8008ea4:	bb44      	cbnz	r4, 8008ef8 <_malloc_r+0x88>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7ff ffbf 	bl	8008e2c <sbrk_aligned>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	d158      	bne.n	8008f66 <_malloc_r+0xf6>
 8008eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8008eb8:	4627      	mov	r7, r4
 8008eba:	2f00      	cmp	r7, #0
 8008ebc:	d143      	bne.n	8008f46 <_malloc_r+0xd6>
 8008ebe:	2c00      	cmp	r4, #0
 8008ec0:	d04b      	beq.n	8008f5a <_malloc_r+0xea>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	eb04 0903 	add.w	r9, r4, r3
 8008ecc:	f001 ff98 	bl	800ae00 <_sbrk_r>
 8008ed0:	4581      	cmp	r9, r0
 8008ed2:	d142      	bne.n	8008f5a <_malloc_r+0xea>
 8008ed4:	6821      	ldr	r1, [r4, #0]
 8008ed6:	1a6d      	subs	r5, r5, r1
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ffa6 	bl	8008e2c <sbrk_aligned>
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d03a      	beq.n	8008f5a <_malloc_r+0xea>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	442b      	add	r3, r5
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	f8d8 3000 	ldr.w	r3, [r8]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	bb62      	cbnz	r2, 8008f4c <_malloc_r+0xdc>
 8008ef2:	f8c8 7000 	str.w	r7, [r8]
 8008ef6:	e00f      	b.n	8008f18 <_malloc_r+0xa8>
 8008ef8:	6822      	ldr	r2, [r4, #0]
 8008efa:	1b52      	subs	r2, r2, r5
 8008efc:	d420      	bmi.n	8008f40 <_malloc_r+0xd0>
 8008efe:	2a0b      	cmp	r2, #11
 8008f00:	d917      	bls.n	8008f32 <_malloc_r+0xc2>
 8008f02:	1961      	adds	r1, r4, r5
 8008f04:	42a3      	cmp	r3, r4
 8008f06:	6025      	str	r5, [r4, #0]
 8008f08:	bf18      	it	ne
 8008f0a:	6059      	strne	r1, [r3, #4]
 8008f0c:	6863      	ldr	r3, [r4, #4]
 8008f0e:	bf08      	it	eq
 8008f10:	f8c8 1000 	streq.w	r1, [r8]
 8008f14:	5162      	str	r2, [r4, r5]
 8008f16:	604b      	str	r3, [r1, #4]
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 f82f 	bl	8008f7c <__malloc_unlock>
 8008f1e:	f104 000b 	add.w	r0, r4, #11
 8008f22:	1d23      	adds	r3, r4, #4
 8008f24:	f020 0007 	bic.w	r0, r0, #7
 8008f28:	1ac2      	subs	r2, r0, r3
 8008f2a:	bf1c      	itt	ne
 8008f2c:	1a1b      	subne	r3, r3, r0
 8008f2e:	50a3      	strne	r3, [r4, r2]
 8008f30:	e7af      	b.n	8008e92 <_malloc_r+0x22>
 8008f32:	6862      	ldr	r2, [r4, #4]
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	bf0c      	ite	eq
 8008f38:	f8c8 2000 	streq.w	r2, [r8]
 8008f3c:	605a      	strne	r2, [r3, #4]
 8008f3e:	e7eb      	b.n	8008f18 <_malloc_r+0xa8>
 8008f40:	4623      	mov	r3, r4
 8008f42:	6864      	ldr	r4, [r4, #4]
 8008f44:	e7ae      	b.n	8008ea4 <_malloc_r+0x34>
 8008f46:	463c      	mov	r4, r7
 8008f48:	687f      	ldr	r7, [r7, #4]
 8008f4a:	e7b6      	b.n	8008eba <_malloc_r+0x4a>
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	d1fb      	bne.n	8008f4c <_malloc_r+0xdc>
 8008f54:	2300      	movs	r3, #0
 8008f56:	6053      	str	r3, [r2, #4]
 8008f58:	e7de      	b.n	8008f18 <_malloc_r+0xa8>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	6033      	str	r3, [r6, #0]
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f000 f80c 	bl	8008f7c <__malloc_unlock>
 8008f64:	e794      	b.n	8008e90 <_malloc_r+0x20>
 8008f66:	6005      	str	r5, [r0, #0]
 8008f68:	e7d6      	b.n	8008f18 <_malloc_r+0xa8>
 8008f6a:	bf00      	nop
 8008f6c:	2000068c 	.word	0x2000068c

08008f70 <__malloc_lock>:
 8008f70:	4801      	ldr	r0, [pc, #4]	@ (8008f78 <__malloc_lock+0x8>)
 8008f72:	f7ff b8ac 	b.w	80080ce <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	20000684 	.word	0x20000684

08008f7c <__malloc_unlock>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	@ (8008f84 <__malloc_unlock+0x8>)
 8008f7e:	f7ff b8a7 	b.w	80080d0 <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	20000684 	.word	0x20000684

08008f88 <_Balloc>:
 8008f88:	b570      	push	{r4, r5, r6, lr}
 8008f8a:	69c6      	ldr	r6, [r0, #28]
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	460d      	mov	r5, r1
 8008f90:	b976      	cbnz	r6, 8008fb0 <_Balloc+0x28>
 8008f92:	2010      	movs	r0, #16
 8008f94:	f7ff ff42 	bl	8008e1c <malloc>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	61e0      	str	r0, [r4, #28]
 8008f9c:	b920      	cbnz	r0, 8008fa8 <_Balloc+0x20>
 8008f9e:	4b18      	ldr	r3, [pc, #96]	@ (8009000 <_Balloc+0x78>)
 8008fa0:	4818      	ldr	r0, [pc, #96]	@ (8009004 <_Balloc+0x7c>)
 8008fa2:	216b      	movs	r1, #107	@ 0x6b
 8008fa4:	f001 ff54 	bl	800ae50 <__assert_func>
 8008fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fac:	6006      	str	r6, [r0, #0]
 8008fae:	60c6      	str	r6, [r0, #12]
 8008fb0:	69e6      	ldr	r6, [r4, #28]
 8008fb2:	68f3      	ldr	r3, [r6, #12]
 8008fb4:	b183      	cbz	r3, 8008fd8 <_Balloc+0x50>
 8008fb6:	69e3      	ldr	r3, [r4, #28]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fbe:	b9b8      	cbnz	r0, 8008ff0 <_Balloc+0x68>
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	fa01 f605 	lsl.w	r6, r1, r5
 8008fc6:	1d72      	adds	r2, r6, #5
 8008fc8:	0092      	lsls	r2, r2, #2
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f001 ff5e 	bl	800ae8c <_calloc_r>
 8008fd0:	b160      	cbz	r0, 8008fec <_Balloc+0x64>
 8008fd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fd6:	e00e      	b.n	8008ff6 <_Balloc+0x6e>
 8008fd8:	2221      	movs	r2, #33	@ 0x21
 8008fda:	2104      	movs	r1, #4
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f001 ff55 	bl	800ae8c <_calloc_r>
 8008fe2:	69e3      	ldr	r3, [r4, #28]
 8008fe4:	60f0      	str	r0, [r6, #12]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e4      	bne.n	8008fb6 <_Balloc+0x2e>
 8008fec:	2000      	movs	r0, #0
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	6802      	ldr	r2, [r0, #0]
 8008ff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ffc:	e7f7      	b.n	8008fee <_Balloc+0x66>
 8008ffe:	bf00      	nop
 8009000:	0800b96a 	.word	0x0800b96a
 8009004:	0800b9ea 	.word	0x0800b9ea

08009008 <_Bfree>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	69c6      	ldr	r6, [r0, #28]
 800900c:	4605      	mov	r5, r0
 800900e:	460c      	mov	r4, r1
 8009010:	b976      	cbnz	r6, 8009030 <_Bfree+0x28>
 8009012:	2010      	movs	r0, #16
 8009014:	f7ff ff02 	bl	8008e1c <malloc>
 8009018:	4602      	mov	r2, r0
 800901a:	61e8      	str	r0, [r5, #28]
 800901c:	b920      	cbnz	r0, 8009028 <_Bfree+0x20>
 800901e:	4b09      	ldr	r3, [pc, #36]	@ (8009044 <_Bfree+0x3c>)
 8009020:	4809      	ldr	r0, [pc, #36]	@ (8009048 <_Bfree+0x40>)
 8009022:	218f      	movs	r1, #143	@ 0x8f
 8009024:	f001 ff14 	bl	800ae50 <__assert_func>
 8009028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800902c:	6006      	str	r6, [r0, #0]
 800902e:	60c6      	str	r6, [r0, #12]
 8009030:	b13c      	cbz	r4, 8009042 <_Bfree+0x3a>
 8009032:	69eb      	ldr	r3, [r5, #28]
 8009034:	6862      	ldr	r2, [r4, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800903c:	6021      	str	r1, [r4, #0]
 800903e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	0800b96a 	.word	0x0800b96a
 8009048:	0800b9ea 	.word	0x0800b9ea

0800904c <__multadd>:
 800904c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009050:	690d      	ldr	r5, [r1, #16]
 8009052:	4607      	mov	r7, r0
 8009054:	460c      	mov	r4, r1
 8009056:	461e      	mov	r6, r3
 8009058:	f101 0c14 	add.w	ip, r1, #20
 800905c:	2000      	movs	r0, #0
 800905e:	f8dc 3000 	ldr.w	r3, [ip]
 8009062:	b299      	uxth	r1, r3
 8009064:	fb02 6101 	mla	r1, r2, r1, r6
 8009068:	0c1e      	lsrs	r6, r3, #16
 800906a:	0c0b      	lsrs	r3, r1, #16
 800906c:	fb02 3306 	mla	r3, r2, r6, r3
 8009070:	b289      	uxth	r1, r1
 8009072:	3001      	adds	r0, #1
 8009074:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009078:	4285      	cmp	r5, r0
 800907a:	f84c 1b04 	str.w	r1, [ip], #4
 800907e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009082:	dcec      	bgt.n	800905e <__multadd+0x12>
 8009084:	b30e      	cbz	r6, 80090ca <__multadd+0x7e>
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	42ab      	cmp	r3, r5
 800908a:	dc19      	bgt.n	80090c0 <__multadd+0x74>
 800908c:	6861      	ldr	r1, [r4, #4]
 800908e:	4638      	mov	r0, r7
 8009090:	3101      	adds	r1, #1
 8009092:	f7ff ff79 	bl	8008f88 <_Balloc>
 8009096:	4680      	mov	r8, r0
 8009098:	b928      	cbnz	r0, 80090a6 <__multadd+0x5a>
 800909a:	4602      	mov	r2, r0
 800909c:	4b0c      	ldr	r3, [pc, #48]	@ (80090d0 <__multadd+0x84>)
 800909e:	480d      	ldr	r0, [pc, #52]	@ (80090d4 <__multadd+0x88>)
 80090a0:	21ba      	movs	r1, #186	@ 0xba
 80090a2:	f001 fed5 	bl	800ae50 <__assert_func>
 80090a6:	6922      	ldr	r2, [r4, #16]
 80090a8:	3202      	adds	r2, #2
 80090aa:	f104 010c 	add.w	r1, r4, #12
 80090ae:	0092      	lsls	r2, r2, #2
 80090b0:	300c      	adds	r0, #12
 80090b2:	f001 feb5 	bl	800ae20 <memcpy>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff ffa5 	bl	8009008 <_Bfree>
 80090be:	4644      	mov	r4, r8
 80090c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090c4:	3501      	adds	r5, #1
 80090c6:	615e      	str	r6, [r3, #20]
 80090c8:	6125      	str	r5, [r4, #16]
 80090ca:	4620      	mov	r0, r4
 80090cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d0:	0800b9d9 	.word	0x0800b9d9
 80090d4:	0800b9ea 	.word	0x0800b9ea

080090d8 <__s2b>:
 80090d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090dc:	460c      	mov	r4, r1
 80090de:	4615      	mov	r5, r2
 80090e0:	461f      	mov	r7, r3
 80090e2:	2209      	movs	r2, #9
 80090e4:	3308      	adds	r3, #8
 80090e6:	4606      	mov	r6, r0
 80090e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ec:	2100      	movs	r1, #0
 80090ee:	2201      	movs	r2, #1
 80090f0:	429a      	cmp	r2, r3
 80090f2:	db09      	blt.n	8009108 <__s2b+0x30>
 80090f4:	4630      	mov	r0, r6
 80090f6:	f7ff ff47 	bl	8008f88 <_Balloc>
 80090fa:	b940      	cbnz	r0, 800910e <__s2b+0x36>
 80090fc:	4602      	mov	r2, r0
 80090fe:	4b19      	ldr	r3, [pc, #100]	@ (8009164 <__s2b+0x8c>)
 8009100:	4819      	ldr	r0, [pc, #100]	@ (8009168 <__s2b+0x90>)
 8009102:	21d3      	movs	r1, #211	@ 0xd3
 8009104:	f001 fea4 	bl	800ae50 <__assert_func>
 8009108:	0052      	lsls	r2, r2, #1
 800910a:	3101      	adds	r1, #1
 800910c:	e7f0      	b.n	80090f0 <__s2b+0x18>
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	6143      	str	r3, [r0, #20]
 8009112:	2d09      	cmp	r5, #9
 8009114:	f04f 0301 	mov.w	r3, #1
 8009118:	6103      	str	r3, [r0, #16]
 800911a:	dd16      	ble.n	800914a <__s2b+0x72>
 800911c:	f104 0909 	add.w	r9, r4, #9
 8009120:	46c8      	mov	r8, r9
 8009122:	442c      	add	r4, r5
 8009124:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009128:	4601      	mov	r1, r0
 800912a:	3b30      	subs	r3, #48	@ 0x30
 800912c:	220a      	movs	r2, #10
 800912e:	4630      	mov	r0, r6
 8009130:	f7ff ff8c 	bl	800904c <__multadd>
 8009134:	45a0      	cmp	r8, r4
 8009136:	d1f5      	bne.n	8009124 <__s2b+0x4c>
 8009138:	f1a5 0408 	sub.w	r4, r5, #8
 800913c:	444c      	add	r4, r9
 800913e:	1b2d      	subs	r5, r5, r4
 8009140:	1963      	adds	r3, r4, r5
 8009142:	42bb      	cmp	r3, r7
 8009144:	db04      	blt.n	8009150 <__s2b+0x78>
 8009146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914a:	340a      	adds	r4, #10
 800914c:	2509      	movs	r5, #9
 800914e:	e7f6      	b.n	800913e <__s2b+0x66>
 8009150:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009154:	4601      	mov	r1, r0
 8009156:	3b30      	subs	r3, #48	@ 0x30
 8009158:	220a      	movs	r2, #10
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ff76 	bl	800904c <__multadd>
 8009160:	e7ee      	b.n	8009140 <__s2b+0x68>
 8009162:	bf00      	nop
 8009164:	0800b9d9 	.word	0x0800b9d9
 8009168:	0800b9ea 	.word	0x0800b9ea

0800916c <__hi0bits>:
 800916c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009170:	4603      	mov	r3, r0
 8009172:	bf36      	itet	cc
 8009174:	0403      	lslcc	r3, r0, #16
 8009176:	2000      	movcs	r0, #0
 8009178:	2010      	movcc	r0, #16
 800917a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800917e:	bf3c      	itt	cc
 8009180:	021b      	lslcc	r3, r3, #8
 8009182:	3008      	addcc	r0, #8
 8009184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009188:	bf3c      	itt	cc
 800918a:	011b      	lslcc	r3, r3, #4
 800918c:	3004      	addcc	r0, #4
 800918e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009192:	bf3c      	itt	cc
 8009194:	009b      	lslcc	r3, r3, #2
 8009196:	3002      	addcc	r0, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	db05      	blt.n	80091a8 <__hi0bits+0x3c>
 800919c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80091a0:	f100 0001 	add.w	r0, r0, #1
 80091a4:	bf08      	it	eq
 80091a6:	2020      	moveq	r0, #32
 80091a8:	4770      	bx	lr

080091aa <__lo0bits>:
 80091aa:	6803      	ldr	r3, [r0, #0]
 80091ac:	4602      	mov	r2, r0
 80091ae:	f013 0007 	ands.w	r0, r3, #7
 80091b2:	d00b      	beq.n	80091cc <__lo0bits+0x22>
 80091b4:	07d9      	lsls	r1, r3, #31
 80091b6:	d421      	bmi.n	80091fc <__lo0bits+0x52>
 80091b8:	0798      	lsls	r0, r3, #30
 80091ba:	bf49      	itett	mi
 80091bc:	085b      	lsrmi	r3, r3, #1
 80091be:	089b      	lsrpl	r3, r3, #2
 80091c0:	2001      	movmi	r0, #1
 80091c2:	6013      	strmi	r3, [r2, #0]
 80091c4:	bf5c      	itt	pl
 80091c6:	6013      	strpl	r3, [r2, #0]
 80091c8:	2002      	movpl	r0, #2
 80091ca:	4770      	bx	lr
 80091cc:	b299      	uxth	r1, r3
 80091ce:	b909      	cbnz	r1, 80091d4 <__lo0bits+0x2a>
 80091d0:	0c1b      	lsrs	r3, r3, #16
 80091d2:	2010      	movs	r0, #16
 80091d4:	b2d9      	uxtb	r1, r3
 80091d6:	b909      	cbnz	r1, 80091dc <__lo0bits+0x32>
 80091d8:	3008      	adds	r0, #8
 80091da:	0a1b      	lsrs	r3, r3, #8
 80091dc:	0719      	lsls	r1, r3, #28
 80091de:	bf04      	itt	eq
 80091e0:	091b      	lsreq	r3, r3, #4
 80091e2:	3004      	addeq	r0, #4
 80091e4:	0799      	lsls	r1, r3, #30
 80091e6:	bf04      	itt	eq
 80091e8:	089b      	lsreq	r3, r3, #2
 80091ea:	3002      	addeq	r0, #2
 80091ec:	07d9      	lsls	r1, r3, #31
 80091ee:	d403      	bmi.n	80091f8 <__lo0bits+0x4e>
 80091f0:	085b      	lsrs	r3, r3, #1
 80091f2:	f100 0001 	add.w	r0, r0, #1
 80091f6:	d003      	beq.n	8009200 <__lo0bits+0x56>
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	4770      	bx	lr
 80091fc:	2000      	movs	r0, #0
 80091fe:	4770      	bx	lr
 8009200:	2020      	movs	r0, #32
 8009202:	4770      	bx	lr

08009204 <__i2b>:
 8009204:	b510      	push	{r4, lr}
 8009206:	460c      	mov	r4, r1
 8009208:	2101      	movs	r1, #1
 800920a:	f7ff febd 	bl	8008f88 <_Balloc>
 800920e:	4602      	mov	r2, r0
 8009210:	b928      	cbnz	r0, 800921e <__i2b+0x1a>
 8009212:	4b05      	ldr	r3, [pc, #20]	@ (8009228 <__i2b+0x24>)
 8009214:	4805      	ldr	r0, [pc, #20]	@ (800922c <__i2b+0x28>)
 8009216:	f240 1145 	movw	r1, #325	@ 0x145
 800921a:	f001 fe19 	bl	800ae50 <__assert_func>
 800921e:	2301      	movs	r3, #1
 8009220:	6144      	str	r4, [r0, #20]
 8009222:	6103      	str	r3, [r0, #16]
 8009224:	bd10      	pop	{r4, pc}
 8009226:	bf00      	nop
 8009228:	0800b9d9 	.word	0x0800b9d9
 800922c:	0800b9ea 	.word	0x0800b9ea

08009230 <__multiply>:
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	4614      	mov	r4, r2
 8009236:	690a      	ldr	r2, [r1, #16]
 8009238:	6923      	ldr	r3, [r4, #16]
 800923a:	429a      	cmp	r2, r3
 800923c:	bfa8      	it	ge
 800923e:	4623      	movge	r3, r4
 8009240:	460f      	mov	r7, r1
 8009242:	bfa4      	itt	ge
 8009244:	460c      	movge	r4, r1
 8009246:	461f      	movge	r7, r3
 8009248:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800924c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009250:	68a3      	ldr	r3, [r4, #8]
 8009252:	6861      	ldr	r1, [r4, #4]
 8009254:	eb0a 0609 	add.w	r6, sl, r9
 8009258:	42b3      	cmp	r3, r6
 800925a:	b085      	sub	sp, #20
 800925c:	bfb8      	it	lt
 800925e:	3101      	addlt	r1, #1
 8009260:	f7ff fe92 	bl	8008f88 <_Balloc>
 8009264:	b930      	cbnz	r0, 8009274 <__multiply+0x44>
 8009266:	4602      	mov	r2, r0
 8009268:	4b44      	ldr	r3, [pc, #272]	@ (800937c <__multiply+0x14c>)
 800926a:	4845      	ldr	r0, [pc, #276]	@ (8009380 <__multiply+0x150>)
 800926c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009270:	f001 fdee 	bl	800ae50 <__assert_func>
 8009274:	f100 0514 	add.w	r5, r0, #20
 8009278:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800927c:	462b      	mov	r3, r5
 800927e:	2200      	movs	r2, #0
 8009280:	4543      	cmp	r3, r8
 8009282:	d321      	bcc.n	80092c8 <__multiply+0x98>
 8009284:	f107 0114 	add.w	r1, r7, #20
 8009288:	f104 0214 	add.w	r2, r4, #20
 800928c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009290:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009294:	9302      	str	r3, [sp, #8]
 8009296:	1b13      	subs	r3, r2, r4
 8009298:	3b15      	subs	r3, #21
 800929a:	f023 0303 	bic.w	r3, r3, #3
 800929e:	3304      	adds	r3, #4
 80092a0:	f104 0715 	add.w	r7, r4, #21
 80092a4:	42ba      	cmp	r2, r7
 80092a6:	bf38      	it	cc
 80092a8:	2304      	movcc	r3, #4
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	9b02      	ldr	r3, [sp, #8]
 80092ae:	9103      	str	r1, [sp, #12]
 80092b0:	428b      	cmp	r3, r1
 80092b2:	d80c      	bhi.n	80092ce <__multiply+0x9e>
 80092b4:	2e00      	cmp	r6, #0
 80092b6:	dd03      	ble.n	80092c0 <__multiply+0x90>
 80092b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d05b      	beq.n	8009378 <__multiply+0x148>
 80092c0:	6106      	str	r6, [r0, #16]
 80092c2:	b005      	add	sp, #20
 80092c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c8:	f843 2b04 	str.w	r2, [r3], #4
 80092cc:	e7d8      	b.n	8009280 <__multiply+0x50>
 80092ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80092d2:	f1ba 0f00 	cmp.w	sl, #0
 80092d6:	d024      	beq.n	8009322 <__multiply+0xf2>
 80092d8:	f104 0e14 	add.w	lr, r4, #20
 80092dc:	46a9      	mov	r9, r5
 80092de:	f04f 0c00 	mov.w	ip, #0
 80092e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092e6:	f8d9 3000 	ldr.w	r3, [r9]
 80092ea:	fa1f fb87 	uxth.w	fp, r7
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80092f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80092f8:	f8d9 7000 	ldr.w	r7, [r9]
 80092fc:	4463      	add	r3, ip
 80092fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009302:	fb0a c70b 	mla	r7, sl, fp, ip
 8009306:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800930a:	b29b      	uxth	r3, r3
 800930c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009310:	4572      	cmp	r2, lr
 8009312:	f849 3b04 	str.w	r3, [r9], #4
 8009316:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800931a:	d8e2      	bhi.n	80092e2 <__multiply+0xb2>
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	f845 c003 	str.w	ip, [r5, r3]
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009328:	3104      	adds	r1, #4
 800932a:	f1b9 0f00 	cmp.w	r9, #0
 800932e:	d021      	beq.n	8009374 <__multiply+0x144>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	f104 0c14 	add.w	ip, r4, #20
 8009336:	46ae      	mov	lr, r5
 8009338:	f04f 0a00 	mov.w	sl, #0
 800933c:	f8bc b000 	ldrh.w	fp, [ip]
 8009340:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009344:	fb09 770b 	mla	r7, r9, fp, r7
 8009348:	4457      	add	r7, sl
 800934a:	b29b      	uxth	r3, r3
 800934c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009350:	f84e 3b04 	str.w	r3, [lr], #4
 8009354:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009358:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800935c:	f8be 3000 	ldrh.w	r3, [lr]
 8009360:	fb09 330a 	mla	r3, r9, sl, r3
 8009364:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009368:	4562      	cmp	r2, ip
 800936a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800936e:	d8e5      	bhi.n	800933c <__multiply+0x10c>
 8009370:	9f01      	ldr	r7, [sp, #4]
 8009372:	51eb      	str	r3, [r5, r7]
 8009374:	3504      	adds	r5, #4
 8009376:	e799      	b.n	80092ac <__multiply+0x7c>
 8009378:	3e01      	subs	r6, #1
 800937a:	e79b      	b.n	80092b4 <__multiply+0x84>
 800937c:	0800b9d9 	.word	0x0800b9d9
 8009380:	0800b9ea 	.word	0x0800b9ea

08009384 <__pow5mult>:
 8009384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009388:	4615      	mov	r5, r2
 800938a:	f012 0203 	ands.w	r2, r2, #3
 800938e:	4607      	mov	r7, r0
 8009390:	460e      	mov	r6, r1
 8009392:	d007      	beq.n	80093a4 <__pow5mult+0x20>
 8009394:	4c25      	ldr	r4, [pc, #148]	@ (800942c <__pow5mult+0xa8>)
 8009396:	3a01      	subs	r2, #1
 8009398:	2300      	movs	r3, #0
 800939a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800939e:	f7ff fe55 	bl	800904c <__multadd>
 80093a2:	4606      	mov	r6, r0
 80093a4:	10ad      	asrs	r5, r5, #2
 80093a6:	d03d      	beq.n	8009424 <__pow5mult+0xa0>
 80093a8:	69fc      	ldr	r4, [r7, #28]
 80093aa:	b97c      	cbnz	r4, 80093cc <__pow5mult+0x48>
 80093ac:	2010      	movs	r0, #16
 80093ae:	f7ff fd35 	bl	8008e1c <malloc>
 80093b2:	4602      	mov	r2, r0
 80093b4:	61f8      	str	r0, [r7, #28]
 80093b6:	b928      	cbnz	r0, 80093c4 <__pow5mult+0x40>
 80093b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009430 <__pow5mult+0xac>)
 80093ba:	481e      	ldr	r0, [pc, #120]	@ (8009434 <__pow5mult+0xb0>)
 80093bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093c0:	f001 fd46 	bl	800ae50 <__assert_func>
 80093c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093c8:	6004      	str	r4, [r0, #0]
 80093ca:	60c4      	str	r4, [r0, #12]
 80093cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093d4:	b94c      	cbnz	r4, 80093ea <__pow5mult+0x66>
 80093d6:	f240 2171 	movw	r1, #625	@ 0x271
 80093da:	4638      	mov	r0, r7
 80093dc:	f7ff ff12 	bl	8009204 <__i2b>
 80093e0:	2300      	movs	r3, #0
 80093e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80093e6:	4604      	mov	r4, r0
 80093e8:	6003      	str	r3, [r0, #0]
 80093ea:	f04f 0900 	mov.w	r9, #0
 80093ee:	07eb      	lsls	r3, r5, #31
 80093f0:	d50a      	bpl.n	8009408 <__pow5mult+0x84>
 80093f2:	4631      	mov	r1, r6
 80093f4:	4622      	mov	r2, r4
 80093f6:	4638      	mov	r0, r7
 80093f8:	f7ff ff1a 	bl	8009230 <__multiply>
 80093fc:	4631      	mov	r1, r6
 80093fe:	4680      	mov	r8, r0
 8009400:	4638      	mov	r0, r7
 8009402:	f7ff fe01 	bl	8009008 <_Bfree>
 8009406:	4646      	mov	r6, r8
 8009408:	106d      	asrs	r5, r5, #1
 800940a:	d00b      	beq.n	8009424 <__pow5mult+0xa0>
 800940c:	6820      	ldr	r0, [r4, #0]
 800940e:	b938      	cbnz	r0, 8009420 <__pow5mult+0x9c>
 8009410:	4622      	mov	r2, r4
 8009412:	4621      	mov	r1, r4
 8009414:	4638      	mov	r0, r7
 8009416:	f7ff ff0b 	bl	8009230 <__multiply>
 800941a:	6020      	str	r0, [r4, #0]
 800941c:	f8c0 9000 	str.w	r9, [r0]
 8009420:	4604      	mov	r4, r0
 8009422:	e7e4      	b.n	80093ee <__pow5mult+0x6a>
 8009424:	4630      	mov	r0, r6
 8009426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942a:	bf00      	nop
 800942c:	0800ba44 	.word	0x0800ba44
 8009430:	0800b96a 	.word	0x0800b96a
 8009434:	0800b9ea 	.word	0x0800b9ea

08009438 <__lshift>:
 8009438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800943c:	460c      	mov	r4, r1
 800943e:	6849      	ldr	r1, [r1, #4]
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009446:	68a3      	ldr	r3, [r4, #8]
 8009448:	4607      	mov	r7, r0
 800944a:	4691      	mov	r9, r2
 800944c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009450:	f108 0601 	add.w	r6, r8, #1
 8009454:	42b3      	cmp	r3, r6
 8009456:	db0b      	blt.n	8009470 <__lshift+0x38>
 8009458:	4638      	mov	r0, r7
 800945a:	f7ff fd95 	bl	8008f88 <_Balloc>
 800945e:	4605      	mov	r5, r0
 8009460:	b948      	cbnz	r0, 8009476 <__lshift+0x3e>
 8009462:	4602      	mov	r2, r0
 8009464:	4b28      	ldr	r3, [pc, #160]	@ (8009508 <__lshift+0xd0>)
 8009466:	4829      	ldr	r0, [pc, #164]	@ (800950c <__lshift+0xd4>)
 8009468:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800946c:	f001 fcf0 	bl	800ae50 <__assert_func>
 8009470:	3101      	adds	r1, #1
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	e7ee      	b.n	8009454 <__lshift+0x1c>
 8009476:	2300      	movs	r3, #0
 8009478:	f100 0114 	add.w	r1, r0, #20
 800947c:	f100 0210 	add.w	r2, r0, #16
 8009480:	4618      	mov	r0, r3
 8009482:	4553      	cmp	r3, sl
 8009484:	db33      	blt.n	80094ee <__lshift+0xb6>
 8009486:	6920      	ldr	r0, [r4, #16]
 8009488:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800948c:	f104 0314 	add.w	r3, r4, #20
 8009490:	f019 091f 	ands.w	r9, r9, #31
 8009494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009498:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800949c:	d02b      	beq.n	80094f6 <__lshift+0xbe>
 800949e:	f1c9 0e20 	rsb	lr, r9, #32
 80094a2:	468a      	mov	sl, r1
 80094a4:	2200      	movs	r2, #0
 80094a6:	6818      	ldr	r0, [r3, #0]
 80094a8:	fa00 f009 	lsl.w	r0, r0, r9
 80094ac:	4310      	orrs	r0, r2
 80094ae:	f84a 0b04 	str.w	r0, [sl], #4
 80094b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b6:	459c      	cmp	ip, r3
 80094b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80094bc:	d8f3      	bhi.n	80094a6 <__lshift+0x6e>
 80094be:	ebac 0304 	sub.w	r3, ip, r4
 80094c2:	3b15      	subs	r3, #21
 80094c4:	f023 0303 	bic.w	r3, r3, #3
 80094c8:	3304      	adds	r3, #4
 80094ca:	f104 0015 	add.w	r0, r4, #21
 80094ce:	4584      	cmp	ip, r0
 80094d0:	bf38      	it	cc
 80094d2:	2304      	movcc	r3, #4
 80094d4:	50ca      	str	r2, [r1, r3]
 80094d6:	b10a      	cbz	r2, 80094dc <__lshift+0xa4>
 80094d8:	f108 0602 	add.w	r6, r8, #2
 80094dc:	3e01      	subs	r6, #1
 80094de:	4638      	mov	r0, r7
 80094e0:	612e      	str	r6, [r5, #16]
 80094e2:	4621      	mov	r1, r4
 80094e4:	f7ff fd90 	bl	8009008 <_Bfree>
 80094e8:	4628      	mov	r0, r5
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80094f2:	3301      	adds	r3, #1
 80094f4:	e7c5      	b.n	8009482 <__lshift+0x4a>
 80094f6:	3904      	subs	r1, #4
 80094f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009500:	459c      	cmp	ip, r3
 8009502:	d8f9      	bhi.n	80094f8 <__lshift+0xc0>
 8009504:	e7ea      	b.n	80094dc <__lshift+0xa4>
 8009506:	bf00      	nop
 8009508:	0800b9d9 	.word	0x0800b9d9
 800950c:	0800b9ea 	.word	0x0800b9ea

08009510 <__mcmp>:
 8009510:	690a      	ldr	r2, [r1, #16]
 8009512:	4603      	mov	r3, r0
 8009514:	6900      	ldr	r0, [r0, #16]
 8009516:	1a80      	subs	r0, r0, r2
 8009518:	b530      	push	{r4, r5, lr}
 800951a:	d10e      	bne.n	800953a <__mcmp+0x2a>
 800951c:	3314      	adds	r3, #20
 800951e:	3114      	adds	r1, #20
 8009520:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009524:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009528:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800952c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009530:	4295      	cmp	r5, r2
 8009532:	d003      	beq.n	800953c <__mcmp+0x2c>
 8009534:	d205      	bcs.n	8009542 <__mcmp+0x32>
 8009536:	f04f 30ff 	mov.w	r0, #4294967295
 800953a:	bd30      	pop	{r4, r5, pc}
 800953c:	42a3      	cmp	r3, r4
 800953e:	d3f3      	bcc.n	8009528 <__mcmp+0x18>
 8009540:	e7fb      	b.n	800953a <__mcmp+0x2a>
 8009542:	2001      	movs	r0, #1
 8009544:	e7f9      	b.n	800953a <__mcmp+0x2a>
	...

08009548 <__mdiff>:
 8009548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	4689      	mov	r9, r1
 800954e:	4606      	mov	r6, r0
 8009550:	4611      	mov	r1, r2
 8009552:	4648      	mov	r0, r9
 8009554:	4614      	mov	r4, r2
 8009556:	f7ff ffdb 	bl	8009510 <__mcmp>
 800955a:	1e05      	subs	r5, r0, #0
 800955c:	d112      	bne.n	8009584 <__mdiff+0x3c>
 800955e:	4629      	mov	r1, r5
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff fd11 	bl	8008f88 <_Balloc>
 8009566:	4602      	mov	r2, r0
 8009568:	b928      	cbnz	r0, 8009576 <__mdiff+0x2e>
 800956a:	4b3f      	ldr	r3, [pc, #252]	@ (8009668 <__mdiff+0x120>)
 800956c:	f240 2137 	movw	r1, #567	@ 0x237
 8009570:	483e      	ldr	r0, [pc, #248]	@ (800966c <__mdiff+0x124>)
 8009572:	f001 fc6d 	bl	800ae50 <__assert_func>
 8009576:	2301      	movs	r3, #1
 8009578:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800957c:	4610      	mov	r0, r2
 800957e:	b003      	add	sp, #12
 8009580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009584:	bfbc      	itt	lt
 8009586:	464b      	movlt	r3, r9
 8009588:	46a1      	movlt	r9, r4
 800958a:	4630      	mov	r0, r6
 800958c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009590:	bfba      	itte	lt
 8009592:	461c      	movlt	r4, r3
 8009594:	2501      	movlt	r5, #1
 8009596:	2500      	movge	r5, #0
 8009598:	f7ff fcf6 	bl	8008f88 <_Balloc>
 800959c:	4602      	mov	r2, r0
 800959e:	b918      	cbnz	r0, 80095a8 <__mdiff+0x60>
 80095a0:	4b31      	ldr	r3, [pc, #196]	@ (8009668 <__mdiff+0x120>)
 80095a2:	f240 2145 	movw	r1, #581	@ 0x245
 80095a6:	e7e3      	b.n	8009570 <__mdiff+0x28>
 80095a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80095ac:	6926      	ldr	r6, [r4, #16]
 80095ae:	60c5      	str	r5, [r0, #12]
 80095b0:	f109 0310 	add.w	r3, r9, #16
 80095b4:	f109 0514 	add.w	r5, r9, #20
 80095b8:	f104 0e14 	add.w	lr, r4, #20
 80095bc:	f100 0b14 	add.w	fp, r0, #20
 80095c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80095c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	46d9      	mov	r9, fp
 80095cc:	f04f 0c00 	mov.w	ip, #0
 80095d0:	9b01      	ldr	r3, [sp, #4]
 80095d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80095d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80095da:	9301      	str	r3, [sp, #4]
 80095dc:	fa1f f38a 	uxth.w	r3, sl
 80095e0:	4619      	mov	r1, r3
 80095e2:	b283      	uxth	r3, r0
 80095e4:	1acb      	subs	r3, r1, r3
 80095e6:	0c00      	lsrs	r0, r0, #16
 80095e8:	4463      	add	r3, ip
 80095ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80095ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80095f8:	4576      	cmp	r6, lr
 80095fa:	f849 3b04 	str.w	r3, [r9], #4
 80095fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009602:	d8e5      	bhi.n	80095d0 <__mdiff+0x88>
 8009604:	1b33      	subs	r3, r6, r4
 8009606:	3b15      	subs	r3, #21
 8009608:	f023 0303 	bic.w	r3, r3, #3
 800960c:	3415      	adds	r4, #21
 800960e:	3304      	adds	r3, #4
 8009610:	42a6      	cmp	r6, r4
 8009612:	bf38      	it	cc
 8009614:	2304      	movcc	r3, #4
 8009616:	441d      	add	r5, r3
 8009618:	445b      	add	r3, fp
 800961a:	461e      	mov	r6, r3
 800961c:	462c      	mov	r4, r5
 800961e:	4544      	cmp	r4, r8
 8009620:	d30e      	bcc.n	8009640 <__mdiff+0xf8>
 8009622:	f108 0103 	add.w	r1, r8, #3
 8009626:	1b49      	subs	r1, r1, r5
 8009628:	f021 0103 	bic.w	r1, r1, #3
 800962c:	3d03      	subs	r5, #3
 800962e:	45a8      	cmp	r8, r5
 8009630:	bf38      	it	cc
 8009632:	2100      	movcc	r1, #0
 8009634:	440b      	add	r3, r1
 8009636:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800963a:	b191      	cbz	r1, 8009662 <__mdiff+0x11a>
 800963c:	6117      	str	r7, [r2, #16]
 800963e:	e79d      	b.n	800957c <__mdiff+0x34>
 8009640:	f854 1b04 	ldr.w	r1, [r4], #4
 8009644:	46e6      	mov	lr, ip
 8009646:	0c08      	lsrs	r0, r1, #16
 8009648:	fa1c fc81 	uxtah	ip, ip, r1
 800964c:	4471      	add	r1, lr
 800964e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009652:	b289      	uxth	r1, r1
 8009654:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009658:	f846 1b04 	str.w	r1, [r6], #4
 800965c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009660:	e7dd      	b.n	800961e <__mdiff+0xd6>
 8009662:	3f01      	subs	r7, #1
 8009664:	e7e7      	b.n	8009636 <__mdiff+0xee>
 8009666:	bf00      	nop
 8009668:	0800b9d9 	.word	0x0800b9d9
 800966c:	0800b9ea 	.word	0x0800b9ea

08009670 <__ulp>:
 8009670:	b082      	sub	sp, #8
 8009672:	ed8d 0b00 	vstr	d0, [sp]
 8009676:	9a01      	ldr	r2, [sp, #4]
 8009678:	4b0f      	ldr	r3, [pc, #60]	@ (80096b8 <__ulp+0x48>)
 800967a:	4013      	ands	r3, r2
 800967c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc08      	bgt.n	8009696 <__ulp+0x26>
 8009684:	425b      	negs	r3, r3
 8009686:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800968a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800968e:	da04      	bge.n	800969a <__ulp+0x2a>
 8009690:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009694:	4113      	asrs	r3, r2
 8009696:	2200      	movs	r2, #0
 8009698:	e008      	b.n	80096ac <__ulp+0x3c>
 800969a:	f1a2 0314 	sub.w	r3, r2, #20
 800969e:	2b1e      	cmp	r3, #30
 80096a0:	bfda      	itte	le
 80096a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80096a6:	40da      	lsrle	r2, r3
 80096a8:	2201      	movgt	r2, #1
 80096aa:	2300      	movs	r3, #0
 80096ac:	4619      	mov	r1, r3
 80096ae:	4610      	mov	r0, r2
 80096b0:	ec41 0b10 	vmov	d0, r0, r1
 80096b4:	b002      	add	sp, #8
 80096b6:	4770      	bx	lr
 80096b8:	7ff00000 	.word	0x7ff00000

080096bc <__b2d>:
 80096bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c0:	6906      	ldr	r6, [r0, #16]
 80096c2:	f100 0814 	add.w	r8, r0, #20
 80096c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80096ca:	1f37      	subs	r7, r6, #4
 80096cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80096d0:	4610      	mov	r0, r2
 80096d2:	f7ff fd4b 	bl	800916c <__hi0bits>
 80096d6:	f1c0 0320 	rsb	r3, r0, #32
 80096da:	280a      	cmp	r0, #10
 80096dc:	600b      	str	r3, [r1, #0]
 80096de:	491b      	ldr	r1, [pc, #108]	@ (800974c <__b2d+0x90>)
 80096e0:	dc15      	bgt.n	800970e <__b2d+0x52>
 80096e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80096e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80096ea:	45b8      	cmp	r8, r7
 80096ec:	ea43 0501 	orr.w	r5, r3, r1
 80096f0:	bf34      	ite	cc
 80096f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80096f6:	2300      	movcs	r3, #0
 80096f8:	3015      	adds	r0, #21
 80096fa:	fa02 f000 	lsl.w	r0, r2, r0
 80096fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8009702:	4303      	orrs	r3, r0
 8009704:	461c      	mov	r4, r3
 8009706:	ec45 4b10 	vmov	d0, r4, r5
 800970a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800970e:	45b8      	cmp	r8, r7
 8009710:	bf3a      	itte	cc
 8009712:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009716:	f1a6 0708 	subcc.w	r7, r6, #8
 800971a:	2300      	movcs	r3, #0
 800971c:	380b      	subs	r0, #11
 800971e:	d012      	beq.n	8009746 <__b2d+0x8a>
 8009720:	f1c0 0120 	rsb	r1, r0, #32
 8009724:	fa23 f401 	lsr.w	r4, r3, r1
 8009728:	4082      	lsls	r2, r0
 800972a:	4322      	orrs	r2, r4
 800972c:	4547      	cmp	r7, r8
 800972e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009732:	bf8c      	ite	hi
 8009734:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009738:	2200      	movls	r2, #0
 800973a:	4083      	lsls	r3, r0
 800973c:	40ca      	lsrs	r2, r1
 800973e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009742:	4313      	orrs	r3, r2
 8009744:	e7de      	b.n	8009704 <__b2d+0x48>
 8009746:	ea42 0501 	orr.w	r5, r2, r1
 800974a:	e7db      	b.n	8009704 <__b2d+0x48>
 800974c:	3ff00000 	.word	0x3ff00000

08009750 <__d2b>:
 8009750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009754:	460f      	mov	r7, r1
 8009756:	2101      	movs	r1, #1
 8009758:	ec59 8b10 	vmov	r8, r9, d0
 800975c:	4616      	mov	r6, r2
 800975e:	f7ff fc13 	bl	8008f88 <_Balloc>
 8009762:	4604      	mov	r4, r0
 8009764:	b930      	cbnz	r0, 8009774 <__d2b+0x24>
 8009766:	4602      	mov	r2, r0
 8009768:	4b23      	ldr	r3, [pc, #140]	@ (80097f8 <__d2b+0xa8>)
 800976a:	4824      	ldr	r0, [pc, #144]	@ (80097fc <__d2b+0xac>)
 800976c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009770:	f001 fb6e 	bl	800ae50 <__assert_func>
 8009774:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800977c:	b10d      	cbz	r5, 8009782 <__d2b+0x32>
 800977e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	f1b8 0300 	subs.w	r3, r8, #0
 8009788:	d023      	beq.n	80097d2 <__d2b+0x82>
 800978a:	4668      	mov	r0, sp
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	f7ff fd0c 	bl	80091aa <__lo0bits>
 8009792:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009796:	b1d0      	cbz	r0, 80097ce <__d2b+0x7e>
 8009798:	f1c0 0320 	rsb	r3, r0, #32
 800979c:	fa02 f303 	lsl.w	r3, r2, r3
 80097a0:	430b      	orrs	r3, r1
 80097a2:	40c2      	lsrs	r2, r0
 80097a4:	6163      	str	r3, [r4, #20]
 80097a6:	9201      	str	r2, [sp, #4]
 80097a8:	9b01      	ldr	r3, [sp, #4]
 80097aa:	61a3      	str	r3, [r4, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bf0c      	ite	eq
 80097b0:	2201      	moveq	r2, #1
 80097b2:	2202      	movne	r2, #2
 80097b4:	6122      	str	r2, [r4, #16]
 80097b6:	b1a5      	cbz	r5, 80097e2 <__d2b+0x92>
 80097b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097bc:	4405      	add	r5, r0
 80097be:	603d      	str	r5, [r7, #0]
 80097c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097c4:	6030      	str	r0, [r6, #0]
 80097c6:	4620      	mov	r0, r4
 80097c8:	b003      	add	sp, #12
 80097ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ce:	6161      	str	r1, [r4, #20]
 80097d0:	e7ea      	b.n	80097a8 <__d2b+0x58>
 80097d2:	a801      	add	r0, sp, #4
 80097d4:	f7ff fce9 	bl	80091aa <__lo0bits>
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	6163      	str	r3, [r4, #20]
 80097dc:	3020      	adds	r0, #32
 80097de:	2201      	movs	r2, #1
 80097e0:	e7e8      	b.n	80097b4 <__d2b+0x64>
 80097e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097ea:	6038      	str	r0, [r7, #0]
 80097ec:	6918      	ldr	r0, [r3, #16]
 80097ee:	f7ff fcbd 	bl	800916c <__hi0bits>
 80097f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097f6:	e7e5      	b.n	80097c4 <__d2b+0x74>
 80097f8:	0800b9d9 	.word	0x0800b9d9
 80097fc:	0800b9ea 	.word	0x0800b9ea

08009800 <__ratio>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	b085      	sub	sp, #20
 8009806:	e9cd 1000 	strd	r1, r0, [sp]
 800980a:	a902      	add	r1, sp, #8
 800980c:	f7ff ff56 	bl	80096bc <__b2d>
 8009810:	9800      	ldr	r0, [sp, #0]
 8009812:	a903      	add	r1, sp, #12
 8009814:	ec55 4b10 	vmov	r4, r5, d0
 8009818:	f7ff ff50 	bl	80096bc <__b2d>
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	6919      	ldr	r1, [r3, #16]
 8009820:	9b00      	ldr	r3, [sp, #0]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	1ac9      	subs	r1, r1, r3
 8009826:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800982a:	1a9b      	subs	r3, r3, r2
 800982c:	ec5b ab10 	vmov	sl, fp, d0
 8009830:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009834:	2b00      	cmp	r3, #0
 8009836:	bfce      	itee	gt
 8009838:	462a      	movgt	r2, r5
 800983a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800983e:	465a      	movle	r2, fp
 8009840:	462f      	mov	r7, r5
 8009842:	46d9      	mov	r9, fp
 8009844:	bfcc      	ite	gt
 8009846:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800984a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800984e:	464b      	mov	r3, r9
 8009850:	4652      	mov	r2, sl
 8009852:	4620      	mov	r0, r4
 8009854:	4639      	mov	r1, r7
 8009856:	f7f7 f821 	bl	800089c <__aeabi_ddiv>
 800985a:	ec41 0b10 	vmov	d0, r0, r1
 800985e:	b005      	add	sp, #20
 8009860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009864 <__copybits>:
 8009864:	3901      	subs	r1, #1
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	1149      	asrs	r1, r1, #5
 800986a:	6914      	ldr	r4, [r2, #16]
 800986c:	3101      	adds	r1, #1
 800986e:	f102 0314 	add.w	r3, r2, #20
 8009872:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009876:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800987a:	1f05      	subs	r5, r0, #4
 800987c:	42a3      	cmp	r3, r4
 800987e:	d30c      	bcc.n	800989a <__copybits+0x36>
 8009880:	1aa3      	subs	r3, r4, r2
 8009882:	3b11      	subs	r3, #17
 8009884:	f023 0303 	bic.w	r3, r3, #3
 8009888:	3211      	adds	r2, #17
 800988a:	42a2      	cmp	r2, r4
 800988c:	bf88      	it	hi
 800988e:	2300      	movhi	r3, #0
 8009890:	4418      	add	r0, r3
 8009892:	2300      	movs	r3, #0
 8009894:	4288      	cmp	r0, r1
 8009896:	d305      	bcc.n	80098a4 <__copybits+0x40>
 8009898:	bd70      	pop	{r4, r5, r6, pc}
 800989a:	f853 6b04 	ldr.w	r6, [r3], #4
 800989e:	f845 6f04 	str.w	r6, [r5, #4]!
 80098a2:	e7eb      	b.n	800987c <__copybits+0x18>
 80098a4:	f840 3b04 	str.w	r3, [r0], #4
 80098a8:	e7f4      	b.n	8009894 <__copybits+0x30>

080098aa <__any_on>:
 80098aa:	f100 0214 	add.w	r2, r0, #20
 80098ae:	6900      	ldr	r0, [r0, #16]
 80098b0:	114b      	asrs	r3, r1, #5
 80098b2:	4298      	cmp	r0, r3
 80098b4:	b510      	push	{r4, lr}
 80098b6:	db11      	blt.n	80098dc <__any_on+0x32>
 80098b8:	dd0a      	ble.n	80098d0 <__any_on+0x26>
 80098ba:	f011 011f 	ands.w	r1, r1, #31
 80098be:	d007      	beq.n	80098d0 <__any_on+0x26>
 80098c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098c4:	fa24 f001 	lsr.w	r0, r4, r1
 80098c8:	fa00 f101 	lsl.w	r1, r0, r1
 80098cc:	428c      	cmp	r4, r1
 80098ce:	d10b      	bne.n	80098e8 <__any_on+0x3e>
 80098d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d803      	bhi.n	80098e0 <__any_on+0x36>
 80098d8:	2000      	movs	r0, #0
 80098da:	bd10      	pop	{r4, pc}
 80098dc:	4603      	mov	r3, r0
 80098de:	e7f7      	b.n	80098d0 <__any_on+0x26>
 80098e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098e4:	2900      	cmp	r1, #0
 80098e6:	d0f5      	beq.n	80098d4 <__any_on+0x2a>
 80098e8:	2001      	movs	r0, #1
 80098ea:	e7f6      	b.n	80098da <__any_on+0x30>

080098ec <sulp>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	4604      	mov	r4, r0
 80098f0:	460d      	mov	r5, r1
 80098f2:	ec45 4b10 	vmov	d0, r4, r5
 80098f6:	4616      	mov	r6, r2
 80098f8:	f7ff feba 	bl	8009670 <__ulp>
 80098fc:	ec51 0b10 	vmov	r0, r1, d0
 8009900:	b17e      	cbz	r6, 8009922 <sulp+0x36>
 8009902:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009906:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800990a:	2b00      	cmp	r3, #0
 800990c:	dd09      	ble.n	8009922 <sulp+0x36>
 800990e:	051b      	lsls	r3, r3, #20
 8009910:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009914:	2400      	movs	r4, #0
 8009916:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800991a:	4622      	mov	r2, r4
 800991c:	462b      	mov	r3, r5
 800991e:	f7f6 fe93 	bl	8000648 <__aeabi_dmul>
 8009922:	ec41 0b10 	vmov	d0, r0, r1
 8009926:	bd70      	pop	{r4, r5, r6, pc}

08009928 <_strtod_l>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	b09f      	sub	sp, #124	@ 0x7c
 800992e:	460c      	mov	r4, r1
 8009930:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009932:	2200      	movs	r2, #0
 8009934:	921a      	str	r2, [sp, #104]	@ 0x68
 8009936:	9005      	str	r0, [sp, #20]
 8009938:	f04f 0a00 	mov.w	sl, #0
 800993c:	f04f 0b00 	mov.w	fp, #0
 8009940:	460a      	mov	r2, r1
 8009942:	9219      	str	r2, [sp, #100]	@ 0x64
 8009944:	7811      	ldrb	r1, [r2, #0]
 8009946:	292b      	cmp	r1, #43	@ 0x2b
 8009948:	d04a      	beq.n	80099e0 <_strtod_l+0xb8>
 800994a:	d838      	bhi.n	80099be <_strtod_l+0x96>
 800994c:	290d      	cmp	r1, #13
 800994e:	d832      	bhi.n	80099b6 <_strtod_l+0x8e>
 8009950:	2908      	cmp	r1, #8
 8009952:	d832      	bhi.n	80099ba <_strtod_l+0x92>
 8009954:	2900      	cmp	r1, #0
 8009956:	d03b      	beq.n	80099d0 <_strtod_l+0xa8>
 8009958:	2200      	movs	r2, #0
 800995a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800995c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800995e:	782a      	ldrb	r2, [r5, #0]
 8009960:	2a30      	cmp	r2, #48	@ 0x30
 8009962:	f040 80b3 	bne.w	8009acc <_strtod_l+0x1a4>
 8009966:	786a      	ldrb	r2, [r5, #1]
 8009968:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800996c:	2a58      	cmp	r2, #88	@ 0x58
 800996e:	d16e      	bne.n	8009a4e <_strtod_l+0x126>
 8009970:	9302      	str	r3, [sp, #8]
 8009972:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	ab1a      	add	r3, sp, #104	@ 0x68
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	4a8e      	ldr	r2, [pc, #568]	@ (8009bb4 <_strtod_l+0x28c>)
 800997c:	9805      	ldr	r0, [sp, #20]
 800997e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009980:	a919      	add	r1, sp, #100	@ 0x64
 8009982:	f001 faff 	bl	800af84 <__gethex>
 8009986:	f010 060f 	ands.w	r6, r0, #15
 800998a:	4604      	mov	r4, r0
 800998c:	d005      	beq.n	800999a <_strtod_l+0x72>
 800998e:	2e06      	cmp	r6, #6
 8009990:	d128      	bne.n	80099e4 <_strtod_l+0xbc>
 8009992:	3501      	adds	r5, #1
 8009994:	2300      	movs	r3, #0
 8009996:	9519      	str	r5, [sp, #100]	@ 0x64
 8009998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800999a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800999c:	2b00      	cmp	r3, #0
 800999e:	f040 858e 	bne.w	800a4be <_strtod_l+0xb96>
 80099a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099a4:	b1cb      	cbz	r3, 80099da <_strtod_l+0xb2>
 80099a6:	4652      	mov	r2, sl
 80099a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80099ac:	ec43 2b10 	vmov	d0, r2, r3
 80099b0:	b01f      	add	sp, #124	@ 0x7c
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	2920      	cmp	r1, #32
 80099b8:	d1ce      	bne.n	8009958 <_strtod_l+0x30>
 80099ba:	3201      	adds	r2, #1
 80099bc:	e7c1      	b.n	8009942 <_strtod_l+0x1a>
 80099be:	292d      	cmp	r1, #45	@ 0x2d
 80099c0:	d1ca      	bne.n	8009958 <_strtod_l+0x30>
 80099c2:	2101      	movs	r1, #1
 80099c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80099c6:	1c51      	adds	r1, r2, #1
 80099c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80099ca:	7852      	ldrb	r2, [r2, #1]
 80099cc:	2a00      	cmp	r2, #0
 80099ce:	d1c5      	bne.n	800995c <_strtod_l+0x34>
 80099d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f040 8570 	bne.w	800a4ba <_strtod_l+0xb92>
 80099da:	4652      	mov	r2, sl
 80099dc:	465b      	mov	r3, fp
 80099de:	e7e5      	b.n	80099ac <_strtod_l+0x84>
 80099e0:	2100      	movs	r1, #0
 80099e2:	e7ef      	b.n	80099c4 <_strtod_l+0x9c>
 80099e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099e6:	b13a      	cbz	r2, 80099f8 <_strtod_l+0xd0>
 80099e8:	2135      	movs	r1, #53	@ 0x35
 80099ea:	a81c      	add	r0, sp, #112	@ 0x70
 80099ec:	f7ff ff3a 	bl	8009864 <__copybits>
 80099f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099f2:	9805      	ldr	r0, [sp, #20]
 80099f4:	f7ff fb08 	bl	8009008 <_Bfree>
 80099f8:	3e01      	subs	r6, #1
 80099fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80099fc:	2e04      	cmp	r6, #4
 80099fe:	d806      	bhi.n	8009a0e <_strtod_l+0xe6>
 8009a00:	e8df f006 	tbb	[pc, r6]
 8009a04:	201d0314 	.word	0x201d0314
 8009a08:	14          	.byte	0x14
 8009a09:	00          	.byte	0x00
 8009a0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009a0e:	05e1      	lsls	r1, r4, #23
 8009a10:	bf48      	it	mi
 8009a12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009a16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a1a:	0d1b      	lsrs	r3, r3, #20
 8009a1c:	051b      	lsls	r3, r3, #20
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1bb      	bne.n	800999a <_strtod_l+0x72>
 8009a22:	f7fe fb29 	bl	8008078 <__errno>
 8009a26:	2322      	movs	r3, #34	@ 0x22
 8009a28:	6003      	str	r3, [r0, #0]
 8009a2a:	e7b6      	b.n	800999a <_strtod_l+0x72>
 8009a2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009a30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009a34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009a38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a3c:	e7e7      	b.n	8009a0e <_strtod_l+0xe6>
 8009a3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009bbc <_strtod_l+0x294>
 8009a42:	e7e4      	b.n	8009a0e <_strtod_l+0xe6>
 8009a44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009a48:	f04f 3aff 	mov.w	sl, #4294967295
 8009a4c:	e7df      	b.n	8009a0e <_strtod_l+0xe6>
 8009a4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a54:	785b      	ldrb	r3, [r3, #1]
 8009a56:	2b30      	cmp	r3, #48	@ 0x30
 8009a58:	d0f9      	beq.n	8009a4e <_strtod_l+0x126>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d09d      	beq.n	800999a <_strtod_l+0x72>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a64:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a66:	2300      	movs	r3, #0
 8009a68:	9308      	str	r3, [sp, #32]
 8009a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a6c:	461f      	mov	r7, r3
 8009a6e:	220a      	movs	r2, #10
 8009a70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009a72:	7805      	ldrb	r5, [r0, #0]
 8009a74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009a78:	b2d9      	uxtb	r1, r3
 8009a7a:	2909      	cmp	r1, #9
 8009a7c:	d928      	bls.n	8009ad0 <_strtod_l+0x1a8>
 8009a7e:	494e      	ldr	r1, [pc, #312]	@ (8009bb8 <_strtod_l+0x290>)
 8009a80:	2201      	movs	r2, #1
 8009a82:	f001 f9ab 	bl	800addc <strncmp>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d032      	beq.n	8009af0 <_strtod_l+0x1c8>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	462a      	mov	r2, r5
 8009a8e:	4681      	mov	r9, r0
 8009a90:	463d      	mov	r5, r7
 8009a92:	4603      	mov	r3, r0
 8009a94:	2a65      	cmp	r2, #101	@ 0x65
 8009a96:	d001      	beq.n	8009a9c <_strtod_l+0x174>
 8009a98:	2a45      	cmp	r2, #69	@ 0x45
 8009a9a:	d114      	bne.n	8009ac6 <_strtod_l+0x19e>
 8009a9c:	b91d      	cbnz	r5, 8009aa6 <_strtod_l+0x17e>
 8009a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aa0:	4302      	orrs	r2, r0
 8009aa2:	d095      	beq.n	80099d0 <_strtod_l+0xa8>
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009aa8:	1c62      	adds	r2, r4, #1
 8009aaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009aac:	7862      	ldrb	r2, [r4, #1]
 8009aae:	2a2b      	cmp	r2, #43	@ 0x2b
 8009ab0:	d077      	beq.n	8009ba2 <_strtod_l+0x27a>
 8009ab2:	2a2d      	cmp	r2, #45	@ 0x2d
 8009ab4:	d07b      	beq.n	8009bae <_strtod_l+0x286>
 8009ab6:	f04f 0c00 	mov.w	ip, #0
 8009aba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009abe:	2909      	cmp	r1, #9
 8009ac0:	f240 8082 	bls.w	8009bc8 <_strtod_l+0x2a0>
 8009ac4:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ac6:	f04f 0800 	mov.w	r8, #0
 8009aca:	e0a2      	b.n	8009c12 <_strtod_l+0x2ea>
 8009acc:	2300      	movs	r3, #0
 8009ace:	e7c7      	b.n	8009a60 <_strtod_l+0x138>
 8009ad0:	2f08      	cmp	r7, #8
 8009ad2:	bfd5      	itete	le
 8009ad4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009ad6:	9908      	ldrgt	r1, [sp, #32]
 8009ad8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009adc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009ae0:	f100 0001 	add.w	r0, r0, #1
 8009ae4:	bfd4      	ite	le
 8009ae6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ae8:	9308      	strgt	r3, [sp, #32]
 8009aea:	3701      	adds	r7, #1
 8009aec:	9019      	str	r0, [sp, #100]	@ 0x64
 8009aee:	e7bf      	b.n	8009a70 <_strtod_l+0x148>
 8009af0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009af6:	785a      	ldrb	r2, [r3, #1]
 8009af8:	b37f      	cbz	r7, 8009b5a <_strtod_l+0x232>
 8009afa:	4681      	mov	r9, r0
 8009afc:	463d      	mov	r5, r7
 8009afe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	d912      	bls.n	8009b2c <_strtod_l+0x204>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e7c4      	b.n	8009a94 <_strtod_l+0x16c>
 8009b0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b10:	785a      	ldrb	r2, [r3, #1]
 8009b12:	3001      	adds	r0, #1
 8009b14:	2a30      	cmp	r2, #48	@ 0x30
 8009b16:	d0f8      	beq.n	8009b0a <_strtod_l+0x1e2>
 8009b18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	f200 84d3 	bhi.w	800a4c8 <_strtod_l+0xba0>
 8009b22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b24:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b26:	4681      	mov	r9, r0
 8009b28:	2000      	movs	r0, #0
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	3a30      	subs	r2, #48	@ 0x30
 8009b2e:	f100 0301 	add.w	r3, r0, #1
 8009b32:	d02a      	beq.n	8009b8a <_strtod_l+0x262>
 8009b34:	4499      	add	r9, r3
 8009b36:	eb00 0c05 	add.w	ip, r0, r5
 8009b3a:	462b      	mov	r3, r5
 8009b3c:	210a      	movs	r1, #10
 8009b3e:	4563      	cmp	r3, ip
 8009b40:	d10d      	bne.n	8009b5e <_strtod_l+0x236>
 8009b42:	1c69      	adds	r1, r5, #1
 8009b44:	4401      	add	r1, r0
 8009b46:	4428      	add	r0, r5
 8009b48:	2808      	cmp	r0, #8
 8009b4a:	dc16      	bgt.n	8009b7a <_strtod_l+0x252>
 8009b4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b4e:	230a      	movs	r3, #10
 8009b50:	fb03 2300 	mla	r3, r3, r0, r2
 8009b54:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b56:	2300      	movs	r3, #0
 8009b58:	e018      	b.n	8009b8c <_strtod_l+0x264>
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	e7da      	b.n	8009b14 <_strtod_l+0x1ec>
 8009b5e:	2b08      	cmp	r3, #8
 8009b60:	f103 0301 	add.w	r3, r3, #1
 8009b64:	dc03      	bgt.n	8009b6e <_strtod_l+0x246>
 8009b66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009b68:	434e      	muls	r6, r1
 8009b6a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009b6c:	e7e7      	b.n	8009b3e <_strtod_l+0x216>
 8009b6e:	2b10      	cmp	r3, #16
 8009b70:	bfde      	ittt	le
 8009b72:	9e08      	ldrle	r6, [sp, #32]
 8009b74:	434e      	mulle	r6, r1
 8009b76:	9608      	strle	r6, [sp, #32]
 8009b78:	e7e1      	b.n	8009b3e <_strtod_l+0x216>
 8009b7a:	280f      	cmp	r0, #15
 8009b7c:	dceb      	bgt.n	8009b56 <_strtod_l+0x22e>
 8009b7e:	9808      	ldr	r0, [sp, #32]
 8009b80:	230a      	movs	r3, #10
 8009b82:	fb03 2300 	mla	r3, r3, r0, r2
 8009b86:	9308      	str	r3, [sp, #32]
 8009b88:	e7e5      	b.n	8009b56 <_strtod_l+0x22e>
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b8e:	1c50      	adds	r0, r2, #1
 8009b90:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b92:	7852      	ldrb	r2, [r2, #1]
 8009b94:	4618      	mov	r0, r3
 8009b96:	460d      	mov	r5, r1
 8009b98:	e7b1      	b.n	8009afe <_strtod_l+0x1d6>
 8009b9a:	f04f 0900 	mov.w	r9, #0
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e77d      	b.n	8009a9e <_strtod_l+0x176>
 8009ba2:	f04f 0c00 	mov.w	ip, #0
 8009ba6:	1ca2      	adds	r2, r4, #2
 8009ba8:	9219      	str	r2, [sp, #100]	@ 0x64
 8009baa:	78a2      	ldrb	r2, [r4, #2]
 8009bac:	e785      	b.n	8009aba <_strtod_l+0x192>
 8009bae:	f04f 0c01 	mov.w	ip, #1
 8009bb2:	e7f8      	b.n	8009ba6 <_strtod_l+0x27e>
 8009bb4:	0800bb58 	.word	0x0800bb58
 8009bb8:	0800bb40 	.word	0x0800bb40
 8009bbc:	7ff00000 	.word	0x7ff00000
 8009bc0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bc2:	1c51      	adds	r1, r2, #1
 8009bc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009bc6:	7852      	ldrb	r2, [r2, #1]
 8009bc8:	2a30      	cmp	r2, #48	@ 0x30
 8009bca:	d0f9      	beq.n	8009bc0 <_strtod_l+0x298>
 8009bcc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009bd0:	2908      	cmp	r1, #8
 8009bd2:	f63f af78 	bhi.w	8009ac6 <_strtod_l+0x19e>
 8009bd6:	3a30      	subs	r2, #48	@ 0x30
 8009bd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009bde:	f04f 080a 	mov.w	r8, #10
 8009be2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009be4:	1c56      	adds	r6, r2, #1
 8009be6:	9619      	str	r6, [sp, #100]	@ 0x64
 8009be8:	7852      	ldrb	r2, [r2, #1]
 8009bea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009bee:	f1be 0f09 	cmp.w	lr, #9
 8009bf2:	d939      	bls.n	8009c68 <_strtod_l+0x340>
 8009bf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009bf6:	1a76      	subs	r6, r6, r1
 8009bf8:	2e08      	cmp	r6, #8
 8009bfa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009bfe:	dc03      	bgt.n	8009c08 <_strtod_l+0x2e0>
 8009c00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c02:	4588      	cmp	r8, r1
 8009c04:	bfa8      	it	ge
 8009c06:	4688      	movge	r8, r1
 8009c08:	f1bc 0f00 	cmp.w	ip, #0
 8009c0c:	d001      	beq.n	8009c12 <_strtod_l+0x2ea>
 8009c0e:	f1c8 0800 	rsb	r8, r8, #0
 8009c12:	2d00      	cmp	r5, #0
 8009c14:	d14e      	bne.n	8009cb4 <_strtod_l+0x38c>
 8009c16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c18:	4308      	orrs	r0, r1
 8009c1a:	f47f aebe 	bne.w	800999a <_strtod_l+0x72>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f47f aed6 	bne.w	80099d0 <_strtod_l+0xa8>
 8009c24:	2a69      	cmp	r2, #105	@ 0x69
 8009c26:	d028      	beq.n	8009c7a <_strtod_l+0x352>
 8009c28:	dc25      	bgt.n	8009c76 <_strtod_l+0x34e>
 8009c2a:	2a49      	cmp	r2, #73	@ 0x49
 8009c2c:	d025      	beq.n	8009c7a <_strtod_l+0x352>
 8009c2e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009c30:	f47f aece 	bne.w	80099d0 <_strtod_l+0xa8>
 8009c34:	499b      	ldr	r1, [pc, #620]	@ (8009ea4 <_strtod_l+0x57c>)
 8009c36:	a819      	add	r0, sp, #100	@ 0x64
 8009c38:	f001 fbc6 	bl	800b3c8 <__match>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f43f aec7 	beq.w	80099d0 <_strtod_l+0xa8>
 8009c42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b28      	cmp	r3, #40	@ 0x28
 8009c48:	d12e      	bne.n	8009ca8 <_strtod_l+0x380>
 8009c4a:	4997      	ldr	r1, [pc, #604]	@ (8009ea8 <_strtod_l+0x580>)
 8009c4c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c4e:	a819      	add	r0, sp, #100	@ 0x64
 8009c50:	f001 fbce 	bl	800b3f0 <__hexnan>
 8009c54:	2805      	cmp	r0, #5
 8009c56:	d127      	bne.n	8009ca8 <_strtod_l+0x380>
 8009c58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009c5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009c62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009c66:	e698      	b.n	800999a <_strtod_l+0x72>
 8009c68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c6a:	fb08 2101 	mla	r1, r8, r1, r2
 8009c6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009c72:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c74:	e7b5      	b.n	8009be2 <_strtod_l+0x2ba>
 8009c76:	2a6e      	cmp	r2, #110	@ 0x6e
 8009c78:	e7da      	b.n	8009c30 <_strtod_l+0x308>
 8009c7a:	498c      	ldr	r1, [pc, #560]	@ (8009eac <_strtod_l+0x584>)
 8009c7c:	a819      	add	r0, sp, #100	@ 0x64
 8009c7e:	f001 fba3 	bl	800b3c8 <__match>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	f43f aea4 	beq.w	80099d0 <_strtod_l+0xa8>
 8009c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c8a:	4989      	ldr	r1, [pc, #548]	@ (8009eb0 <_strtod_l+0x588>)
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	a819      	add	r0, sp, #100	@ 0x64
 8009c90:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c92:	f001 fb99 	bl	800b3c8 <__match>
 8009c96:	b910      	cbnz	r0, 8009c9e <_strtod_l+0x376>
 8009c98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009ec0 <_strtod_l+0x598>
 8009ca2:	f04f 0a00 	mov.w	sl, #0
 8009ca6:	e678      	b.n	800999a <_strtod_l+0x72>
 8009ca8:	4882      	ldr	r0, [pc, #520]	@ (8009eb4 <_strtod_l+0x58c>)
 8009caa:	f001 f8c9 	bl	800ae40 <nan>
 8009cae:	ec5b ab10 	vmov	sl, fp, d0
 8009cb2:	e672      	b.n	800999a <_strtod_l+0x72>
 8009cb4:	eba8 0309 	sub.w	r3, r8, r9
 8009cb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cbc:	2f00      	cmp	r7, #0
 8009cbe:	bf08      	it	eq
 8009cc0:	462f      	moveq	r7, r5
 8009cc2:	2d10      	cmp	r5, #16
 8009cc4:	462c      	mov	r4, r5
 8009cc6:	bfa8      	it	ge
 8009cc8:	2410      	movge	r4, #16
 8009cca:	f7f6 fc43 	bl	8000554 <__aeabi_ui2d>
 8009cce:	2d09      	cmp	r5, #9
 8009cd0:	4682      	mov	sl, r0
 8009cd2:	468b      	mov	fp, r1
 8009cd4:	dc13      	bgt.n	8009cfe <_strtod_l+0x3d6>
 8009cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f43f ae5e 	beq.w	800999a <_strtod_l+0x72>
 8009cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce0:	dd78      	ble.n	8009dd4 <_strtod_l+0x4ac>
 8009ce2:	2b16      	cmp	r3, #22
 8009ce4:	dc5f      	bgt.n	8009da6 <_strtod_l+0x47e>
 8009ce6:	4974      	ldr	r1, [pc, #464]	@ (8009eb8 <_strtod_l+0x590>)
 8009ce8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cf0:	4652      	mov	r2, sl
 8009cf2:	465b      	mov	r3, fp
 8009cf4:	f7f6 fca8 	bl	8000648 <__aeabi_dmul>
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	468b      	mov	fp, r1
 8009cfc:	e64d      	b.n	800999a <_strtod_l+0x72>
 8009cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8009eb8 <_strtod_l+0x590>)
 8009d00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009d08:	f7f6 fc9e 	bl	8000648 <__aeabi_dmul>
 8009d0c:	4682      	mov	sl, r0
 8009d0e:	9808      	ldr	r0, [sp, #32]
 8009d10:	468b      	mov	fp, r1
 8009d12:	f7f6 fc1f 	bl	8000554 <__aeabi_ui2d>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4650      	mov	r0, sl
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	f7f6 fadd 	bl	80002dc <__adddf3>
 8009d22:	2d0f      	cmp	r5, #15
 8009d24:	4682      	mov	sl, r0
 8009d26:	468b      	mov	fp, r1
 8009d28:	ddd5      	ble.n	8009cd6 <_strtod_l+0x3ae>
 8009d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d2c:	1b2c      	subs	r4, r5, r4
 8009d2e:	441c      	add	r4, r3
 8009d30:	2c00      	cmp	r4, #0
 8009d32:	f340 8096 	ble.w	8009e62 <_strtod_l+0x53a>
 8009d36:	f014 030f 	ands.w	r3, r4, #15
 8009d3a:	d00a      	beq.n	8009d52 <_strtod_l+0x42a>
 8009d3c:	495e      	ldr	r1, [pc, #376]	@ (8009eb8 <_strtod_l+0x590>)
 8009d3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d42:	4652      	mov	r2, sl
 8009d44:	465b      	mov	r3, fp
 8009d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d4a:	f7f6 fc7d 	bl	8000648 <__aeabi_dmul>
 8009d4e:	4682      	mov	sl, r0
 8009d50:	468b      	mov	fp, r1
 8009d52:	f034 040f 	bics.w	r4, r4, #15
 8009d56:	d073      	beq.n	8009e40 <_strtod_l+0x518>
 8009d58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009d5c:	dd48      	ble.n	8009df0 <_strtod_l+0x4c8>
 8009d5e:	2400      	movs	r4, #0
 8009d60:	46a0      	mov	r8, r4
 8009d62:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d64:	46a1      	mov	r9, r4
 8009d66:	9a05      	ldr	r2, [sp, #20]
 8009d68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009ec0 <_strtod_l+0x598>
 8009d6c:	2322      	movs	r3, #34	@ 0x22
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	f04f 0a00 	mov.w	sl, #0
 8009d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f43f ae0f 	beq.w	800999a <_strtod_l+0x72>
 8009d7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d7e:	9805      	ldr	r0, [sp, #20]
 8009d80:	f7ff f942 	bl	8009008 <_Bfree>
 8009d84:	9805      	ldr	r0, [sp, #20]
 8009d86:	4649      	mov	r1, r9
 8009d88:	f7ff f93e 	bl	8009008 <_Bfree>
 8009d8c:	9805      	ldr	r0, [sp, #20]
 8009d8e:	4641      	mov	r1, r8
 8009d90:	f7ff f93a 	bl	8009008 <_Bfree>
 8009d94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d96:	9805      	ldr	r0, [sp, #20]
 8009d98:	f7ff f936 	bl	8009008 <_Bfree>
 8009d9c:	9805      	ldr	r0, [sp, #20]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	f7ff f932 	bl	8009008 <_Bfree>
 8009da4:	e5f9      	b.n	800999a <_strtod_l+0x72>
 8009da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009da8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009dac:	4293      	cmp	r3, r2
 8009dae:	dbbc      	blt.n	8009d2a <_strtod_l+0x402>
 8009db0:	4c41      	ldr	r4, [pc, #260]	@ (8009eb8 <_strtod_l+0x590>)
 8009db2:	f1c5 050f 	rsb	r5, r5, #15
 8009db6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009dba:	4652      	mov	r2, sl
 8009dbc:	465b      	mov	r3, fp
 8009dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc2:	f7f6 fc41 	bl	8000648 <__aeabi_dmul>
 8009dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc8:	1b5d      	subs	r5, r3, r5
 8009dca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009dce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009dd2:	e78f      	b.n	8009cf4 <_strtod_l+0x3cc>
 8009dd4:	3316      	adds	r3, #22
 8009dd6:	dba8      	blt.n	8009d2a <_strtod_l+0x402>
 8009dd8:	4b37      	ldr	r3, [pc, #220]	@ (8009eb8 <_strtod_l+0x590>)
 8009dda:	eba9 0808 	sub.w	r8, r9, r8
 8009dde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009de2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009de6:	4650      	mov	r0, sl
 8009de8:	4659      	mov	r1, fp
 8009dea:	f7f6 fd57 	bl	800089c <__aeabi_ddiv>
 8009dee:	e783      	b.n	8009cf8 <_strtod_l+0x3d0>
 8009df0:	4b32      	ldr	r3, [pc, #200]	@ (8009ebc <_strtod_l+0x594>)
 8009df2:	9308      	str	r3, [sp, #32]
 8009df4:	2300      	movs	r3, #0
 8009df6:	1124      	asrs	r4, r4, #4
 8009df8:	4650      	mov	r0, sl
 8009dfa:	4659      	mov	r1, fp
 8009dfc:	461e      	mov	r6, r3
 8009dfe:	2c01      	cmp	r4, #1
 8009e00:	dc21      	bgt.n	8009e46 <_strtod_l+0x51e>
 8009e02:	b10b      	cbz	r3, 8009e08 <_strtod_l+0x4e0>
 8009e04:	4682      	mov	sl, r0
 8009e06:	468b      	mov	fp, r1
 8009e08:	492c      	ldr	r1, [pc, #176]	@ (8009ebc <_strtod_l+0x594>)
 8009e0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009e0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009e12:	4652      	mov	r2, sl
 8009e14:	465b      	mov	r3, fp
 8009e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e1a:	f7f6 fc15 	bl	8000648 <__aeabi_dmul>
 8009e1e:	4b28      	ldr	r3, [pc, #160]	@ (8009ec0 <_strtod_l+0x598>)
 8009e20:	460a      	mov	r2, r1
 8009e22:	400b      	ands	r3, r1
 8009e24:	4927      	ldr	r1, [pc, #156]	@ (8009ec4 <_strtod_l+0x59c>)
 8009e26:	428b      	cmp	r3, r1
 8009e28:	4682      	mov	sl, r0
 8009e2a:	d898      	bhi.n	8009d5e <_strtod_l+0x436>
 8009e2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009e30:	428b      	cmp	r3, r1
 8009e32:	bf86      	itte	hi
 8009e34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009ec8 <_strtod_l+0x5a0>
 8009e38:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009e40:	2300      	movs	r3, #0
 8009e42:	9308      	str	r3, [sp, #32]
 8009e44:	e07a      	b.n	8009f3c <_strtod_l+0x614>
 8009e46:	07e2      	lsls	r2, r4, #31
 8009e48:	d505      	bpl.n	8009e56 <_strtod_l+0x52e>
 8009e4a:	9b08      	ldr	r3, [sp, #32]
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	f7f6 fbfa 	bl	8000648 <__aeabi_dmul>
 8009e54:	2301      	movs	r3, #1
 8009e56:	9a08      	ldr	r2, [sp, #32]
 8009e58:	3208      	adds	r2, #8
 8009e5a:	3601      	adds	r6, #1
 8009e5c:	1064      	asrs	r4, r4, #1
 8009e5e:	9208      	str	r2, [sp, #32]
 8009e60:	e7cd      	b.n	8009dfe <_strtod_l+0x4d6>
 8009e62:	d0ed      	beq.n	8009e40 <_strtod_l+0x518>
 8009e64:	4264      	negs	r4, r4
 8009e66:	f014 020f 	ands.w	r2, r4, #15
 8009e6a:	d00a      	beq.n	8009e82 <_strtod_l+0x55a>
 8009e6c:	4b12      	ldr	r3, [pc, #72]	@ (8009eb8 <_strtod_l+0x590>)
 8009e6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e72:	4650      	mov	r0, sl
 8009e74:	4659      	mov	r1, fp
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	f7f6 fd0f 	bl	800089c <__aeabi_ddiv>
 8009e7e:	4682      	mov	sl, r0
 8009e80:	468b      	mov	fp, r1
 8009e82:	1124      	asrs	r4, r4, #4
 8009e84:	d0dc      	beq.n	8009e40 <_strtod_l+0x518>
 8009e86:	2c1f      	cmp	r4, #31
 8009e88:	dd20      	ble.n	8009ecc <_strtod_l+0x5a4>
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	46a0      	mov	r8, r4
 8009e8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e90:	46a1      	mov	r9, r4
 8009e92:	9a05      	ldr	r2, [sp, #20]
 8009e94:	2322      	movs	r3, #34	@ 0x22
 8009e96:	f04f 0a00 	mov.w	sl, #0
 8009e9a:	f04f 0b00 	mov.w	fp, #0
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	e768      	b.n	8009d74 <_strtod_l+0x44c>
 8009ea2:	bf00      	nop
 8009ea4:	0800b931 	.word	0x0800b931
 8009ea8:	0800bb44 	.word	0x0800bb44
 8009eac:	0800b929 	.word	0x0800b929
 8009eb0:	0800b960 	.word	0x0800b960
 8009eb4:	0800bced 	.word	0x0800bced
 8009eb8:	0800ba78 	.word	0x0800ba78
 8009ebc:	0800ba50 	.word	0x0800ba50
 8009ec0:	7ff00000 	.word	0x7ff00000
 8009ec4:	7ca00000 	.word	0x7ca00000
 8009ec8:	7fefffff 	.word	0x7fefffff
 8009ecc:	f014 0310 	ands.w	r3, r4, #16
 8009ed0:	bf18      	it	ne
 8009ed2:	236a      	movne	r3, #106	@ 0x6a
 8009ed4:	4ea9      	ldr	r6, [pc, #676]	@ (800a17c <_strtod_l+0x854>)
 8009ed6:	9308      	str	r3, [sp, #32]
 8009ed8:	4650      	mov	r0, sl
 8009eda:	4659      	mov	r1, fp
 8009edc:	2300      	movs	r3, #0
 8009ede:	07e2      	lsls	r2, r4, #31
 8009ee0:	d504      	bpl.n	8009eec <_strtod_l+0x5c4>
 8009ee2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ee6:	f7f6 fbaf 	bl	8000648 <__aeabi_dmul>
 8009eea:	2301      	movs	r3, #1
 8009eec:	1064      	asrs	r4, r4, #1
 8009eee:	f106 0608 	add.w	r6, r6, #8
 8009ef2:	d1f4      	bne.n	8009ede <_strtod_l+0x5b6>
 8009ef4:	b10b      	cbz	r3, 8009efa <_strtod_l+0x5d2>
 8009ef6:	4682      	mov	sl, r0
 8009ef8:	468b      	mov	fp, r1
 8009efa:	9b08      	ldr	r3, [sp, #32]
 8009efc:	b1b3      	cbz	r3, 8009f2c <_strtod_l+0x604>
 8009efe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	4659      	mov	r1, fp
 8009f0a:	dd0f      	ble.n	8009f2c <_strtod_l+0x604>
 8009f0c:	2b1f      	cmp	r3, #31
 8009f0e:	dd55      	ble.n	8009fbc <_strtod_l+0x694>
 8009f10:	2b34      	cmp	r3, #52	@ 0x34
 8009f12:	bfde      	ittt	le
 8009f14:	f04f 33ff 	movle.w	r3, #4294967295
 8009f18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009f1c:	4093      	lslle	r3, r2
 8009f1e:	f04f 0a00 	mov.w	sl, #0
 8009f22:	bfcc      	ite	gt
 8009f24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009f28:	ea03 0b01 	andle.w	fp, r3, r1
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2300      	movs	r3, #0
 8009f30:	4650      	mov	r0, sl
 8009f32:	4659      	mov	r1, fp
 8009f34:	f7f6 fdf0 	bl	8000b18 <__aeabi_dcmpeq>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d1a6      	bne.n	8009e8a <_strtod_l+0x562>
 8009f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009f42:	9805      	ldr	r0, [sp, #20]
 8009f44:	462b      	mov	r3, r5
 8009f46:	463a      	mov	r2, r7
 8009f48:	f7ff f8c6 	bl	80090d8 <__s2b>
 8009f4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f43f af05 	beq.w	8009d5e <_strtod_l+0x436>
 8009f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f56:	2a00      	cmp	r2, #0
 8009f58:	eba9 0308 	sub.w	r3, r9, r8
 8009f5c:	bfa8      	it	ge
 8009f5e:	2300      	movge	r3, #0
 8009f60:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f62:	2400      	movs	r4, #0
 8009f64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f68:	9316      	str	r3, [sp, #88]	@ 0x58
 8009f6a:	46a0      	mov	r8, r4
 8009f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f6e:	9805      	ldr	r0, [sp, #20]
 8009f70:	6859      	ldr	r1, [r3, #4]
 8009f72:	f7ff f809 	bl	8008f88 <_Balloc>
 8009f76:	4681      	mov	r9, r0
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	f43f aef4 	beq.w	8009d66 <_strtod_l+0x43e>
 8009f7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f80:	691a      	ldr	r2, [r3, #16]
 8009f82:	3202      	adds	r2, #2
 8009f84:	f103 010c 	add.w	r1, r3, #12
 8009f88:	0092      	lsls	r2, r2, #2
 8009f8a:	300c      	adds	r0, #12
 8009f8c:	f000 ff48 	bl	800ae20 <memcpy>
 8009f90:	ec4b ab10 	vmov	d0, sl, fp
 8009f94:	9805      	ldr	r0, [sp, #20]
 8009f96:	aa1c      	add	r2, sp, #112	@ 0x70
 8009f98:	a91b      	add	r1, sp, #108	@ 0x6c
 8009f9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009f9e:	f7ff fbd7 	bl	8009750 <__d2b>
 8009fa2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	f43f aede 	beq.w	8009d66 <_strtod_l+0x43e>
 8009faa:	9805      	ldr	r0, [sp, #20]
 8009fac:	2101      	movs	r1, #1
 8009fae:	f7ff f929 	bl	8009204 <__i2b>
 8009fb2:	4680      	mov	r8, r0
 8009fb4:	b948      	cbnz	r0, 8009fca <_strtod_l+0x6a2>
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	e6d4      	b.n	8009d66 <_strtod_l+0x43e>
 8009fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc4:	ea03 0a0a 	and.w	sl, r3, sl
 8009fc8:	e7b0      	b.n	8009f2c <_strtod_l+0x604>
 8009fca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009fcc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009fce:	2d00      	cmp	r5, #0
 8009fd0:	bfab      	itete	ge
 8009fd2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009fd4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009fd6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009fd8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009fda:	bfac      	ite	ge
 8009fdc:	18ef      	addge	r7, r5, r3
 8009fde:	1b5e      	sublt	r6, r3, r5
 8009fe0:	9b08      	ldr	r3, [sp, #32]
 8009fe2:	1aed      	subs	r5, r5, r3
 8009fe4:	4415      	add	r5, r2
 8009fe6:	4b66      	ldr	r3, [pc, #408]	@ (800a180 <_strtod_l+0x858>)
 8009fe8:	3d01      	subs	r5, #1
 8009fea:	429d      	cmp	r5, r3
 8009fec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009ff0:	da50      	bge.n	800a094 <_strtod_l+0x76c>
 8009ff2:	1b5b      	subs	r3, r3, r5
 8009ff4:	2b1f      	cmp	r3, #31
 8009ff6:	eba2 0203 	sub.w	r2, r2, r3
 8009ffa:	f04f 0101 	mov.w	r1, #1
 8009ffe:	dc3d      	bgt.n	800a07c <_strtod_l+0x754>
 800a000:	fa01 f303 	lsl.w	r3, r1, r3
 800a004:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a006:	2300      	movs	r3, #0
 800a008:	9310      	str	r3, [sp, #64]	@ 0x40
 800a00a:	18bd      	adds	r5, r7, r2
 800a00c:	9b08      	ldr	r3, [sp, #32]
 800a00e:	42af      	cmp	r7, r5
 800a010:	4416      	add	r6, r2
 800a012:	441e      	add	r6, r3
 800a014:	463b      	mov	r3, r7
 800a016:	bfa8      	it	ge
 800a018:	462b      	movge	r3, r5
 800a01a:	42b3      	cmp	r3, r6
 800a01c:	bfa8      	it	ge
 800a01e:	4633      	movge	r3, r6
 800a020:	2b00      	cmp	r3, #0
 800a022:	bfc2      	ittt	gt
 800a024:	1aed      	subgt	r5, r5, r3
 800a026:	1af6      	subgt	r6, r6, r3
 800a028:	1aff      	subgt	r7, r7, r3
 800a02a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dd16      	ble.n	800a05e <_strtod_l+0x736>
 800a030:	4641      	mov	r1, r8
 800a032:	9805      	ldr	r0, [sp, #20]
 800a034:	461a      	mov	r2, r3
 800a036:	f7ff f9a5 	bl	8009384 <__pow5mult>
 800a03a:	4680      	mov	r8, r0
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d0ba      	beq.n	8009fb6 <_strtod_l+0x68e>
 800a040:	4601      	mov	r1, r0
 800a042:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a044:	9805      	ldr	r0, [sp, #20]
 800a046:	f7ff f8f3 	bl	8009230 <__multiply>
 800a04a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f43f ae8a 	beq.w	8009d66 <_strtod_l+0x43e>
 800a052:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a054:	9805      	ldr	r0, [sp, #20]
 800a056:	f7fe ffd7 	bl	8009008 <_Bfree>
 800a05a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a05c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a05e:	2d00      	cmp	r5, #0
 800a060:	dc1d      	bgt.n	800a09e <_strtod_l+0x776>
 800a062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a064:	2b00      	cmp	r3, #0
 800a066:	dd23      	ble.n	800a0b0 <_strtod_l+0x788>
 800a068:	4649      	mov	r1, r9
 800a06a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a06c:	9805      	ldr	r0, [sp, #20]
 800a06e:	f7ff f989 	bl	8009384 <__pow5mult>
 800a072:	4681      	mov	r9, r0
 800a074:	b9e0      	cbnz	r0, 800a0b0 <_strtod_l+0x788>
 800a076:	f04f 0900 	mov.w	r9, #0
 800a07a:	e674      	b.n	8009d66 <_strtod_l+0x43e>
 800a07c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a080:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a084:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a088:	35e2      	adds	r5, #226	@ 0xe2
 800a08a:	fa01 f305 	lsl.w	r3, r1, r5
 800a08e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a090:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a092:	e7ba      	b.n	800a00a <_strtod_l+0x6e2>
 800a094:	2300      	movs	r3, #0
 800a096:	9310      	str	r3, [sp, #64]	@ 0x40
 800a098:	2301      	movs	r3, #1
 800a09a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a09c:	e7b5      	b.n	800a00a <_strtod_l+0x6e2>
 800a09e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0a0:	9805      	ldr	r0, [sp, #20]
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	f7ff f9c8 	bl	8009438 <__lshift>
 800a0a8:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d1d9      	bne.n	800a062 <_strtod_l+0x73a>
 800a0ae:	e65a      	b.n	8009d66 <_strtod_l+0x43e>
 800a0b0:	2e00      	cmp	r6, #0
 800a0b2:	dd07      	ble.n	800a0c4 <_strtod_l+0x79c>
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	9805      	ldr	r0, [sp, #20]
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	f7ff f9bd 	bl	8009438 <__lshift>
 800a0be:	4681      	mov	r9, r0
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d0d8      	beq.n	800a076 <_strtod_l+0x74e>
 800a0c4:	2f00      	cmp	r7, #0
 800a0c6:	dd08      	ble.n	800a0da <_strtod_l+0x7b2>
 800a0c8:	4641      	mov	r1, r8
 800a0ca:	9805      	ldr	r0, [sp, #20]
 800a0cc:	463a      	mov	r2, r7
 800a0ce:	f7ff f9b3 	bl	8009438 <__lshift>
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	f43f ae46 	beq.w	8009d66 <_strtod_l+0x43e>
 800a0da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0dc:	9805      	ldr	r0, [sp, #20]
 800a0de:	464a      	mov	r2, r9
 800a0e0:	f7ff fa32 	bl	8009548 <__mdiff>
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f43f ae3d 	beq.w	8009d66 <_strtod_l+0x43e>
 800a0ec:	68c3      	ldr	r3, [r0, #12]
 800a0ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60c3      	str	r3, [r0, #12]
 800a0f4:	4641      	mov	r1, r8
 800a0f6:	f7ff fa0b 	bl	8009510 <__mcmp>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	da46      	bge.n	800a18c <_strtod_l+0x864>
 800a0fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a100:	ea53 030a 	orrs.w	r3, r3, sl
 800a104:	d16c      	bne.n	800a1e0 <_strtod_l+0x8b8>
 800a106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d168      	bne.n	800a1e0 <_strtod_l+0x8b8>
 800a10e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a112:	0d1b      	lsrs	r3, r3, #20
 800a114:	051b      	lsls	r3, r3, #20
 800a116:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a11a:	d961      	bls.n	800a1e0 <_strtod_l+0x8b8>
 800a11c:	6963      	ldr	r3, [r4, #20]
 800a11e:	b913      	cbnz	r3, 800a126 <_strtod_l+0x7fe>
 800a120:	6923      	ldr	r3, [r4, #16]
 800a122:	2b01      	cmp	r3, #1
 800a124:	dd5c      	ble.n	800a1e0 <_strtod_l+0x8b8>
 800a126:	4621      	mov	r1, r4
 800a128:	2201      	movs	r2, #1
 800a12a:	9805      	ldr	r0, [sp, #20]
 800a12c:	f7ff f984 	bl	8009438 <__lshift>
 800a130:	4641      	mov	r1, r8
 800a132:	4604      	mov	r4, r0
 800a134:	f7ff f9ec 	bl	8009510 <__mcmp>
 800a138:	2800      	cmp	r0, #0
 800a13a:	dd51      	ble.n	800a1e0 <_strtod_l+0x8b8>
 800a13c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a140:	9a08      	ldr	r2, [sp, #32]
 800a142:	0d1b      	lsrs	r3, r3, #20
 800a144:	051b      	lsls	r3, r3, #20
 800a146:	2a00      	cmp	r2, #0
 800a148:	d06b      	beq.n	800a222 <_strtod_l+0x8fa>
 800a14a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a14e:	d868      	bhi.n	800a222 <_strtod_l+0x8fa>
 800a150:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a154:	f67f ae9d 	bls.w	8009e92 <_strtod_l+0x56a>
 800a158:	4b0a      	ldr	r3, [pc, #40]	@ (800a184 <_strtod_l+0x85c>)
 800a15a:	4650      	mov	r0, sl
 800a15c:	4659      	mov	r1, fp
 800a15e:	2200      	movs	r2, #0
 800a160:	f7f6 fa72 	bl	8000648 <__aeabi_dmul>
 800a164:	4b08      	ldr	r3, [pc, #32]	@ (800a188 <_strtod_l+0x860>)
 800a166:	400b      	ands	r3, r1
 800a168:	4682      	mov	sl, r0
 800a16a:	468b      	mov	fp, r1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f47f ae05 	bne.w	8009d7c <_strtod_l+0x454>
 800a172:	9a05      	ldr	r2, [sp, #20]
 800a174:	2322      	movs	r3, #34	@ 0x22
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	e600      	b.n	8009d7c <_strtod_l+0x454>
 800a17a:	bf00      	nop
 800a17c:	0800bb70 	.word	0x0800bb70
 800a180:	fffffc02 	.word	0xfffffc02
 800a184:	39500000 	.word	0x39500000
 800a188:	7ff00000 	.word	0x7ff00000
 800a18c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a190:	d165      	bne.n	800a25e <_strtod_l+0x936>
 800a192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a198:	b35a      	cbz	r2, 800a1f2 <_strtod_l+0x8ca>
 800a19a:	4a9f      	ldr	r2, [pc, #636]	@ (800a418 <_strtod_l+0xaf0>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d12b      	bne.n	800a1f8 <_strtod_l+0x8d0>
 800a1a0:	9b08      	ldr	r3, [sp, #32]
 800a1a2:	4651      	mov	r1, sl
 800a1a4:	b303      	cbz	r3, 800a1e8 <_strtod_l+0x8c0>
 800a1a6:	4b9d      	ldr	r3, [pc, #628]	@ (800a41c <_strtod_l+0xaf4>)
 800a1a8:	465a      	mov	r2, fp
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b4:	d81b      	bhi.n	800a1ee <_strtod_l+0x8c6>
 800a1b6:	0d1b      	lsrs	r3, r3, #20
 800a1b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c0:	4299      	cmp	r1, r3
 800a1c2:	d119      	bne.n	800a1f8 <_strtod_l+0x8d0>
 800a1c4:	4b96      	ldr	r3, [pc, #600]	@ (800a420 <_strtod_l+0xaf8>)
 800a1c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d102      	bne.n	800a1d2 <_strtod_l+0x8aa>
 800a1cc:	3101      	adds	r1, #1
 800a1ce:	f43f adca 	beq.w	8009d66 <_strtod_l+0x43e>
 800a1d2:	4b92      	ldr	r3, [pc, #584]	@ (800a41c <_strtod_l+0xaf4>)
 800a1d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1d6:	401a      	ands	r2, r3
 800a1d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a1dc:	f04f 0a00 	mov.w	sl, #0
 800a1e0:	9b08      	ldr	r3, [sp, #32]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1b8      	bne.n	800a158 <_strtod_l+0x830>
 800a1e6:	e5c9      	b.n	8009d7c <_strtod_l+0x454>
 800a1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ec:	e7e8      	b.n	800a1c0 <_strtod_l+0x898>
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	e7e6      	b.n	800a1c0 <_strtod_l+0x898>
 800a1f2:	ea53 030a 	orrs.w	r3, r3, sl
 800a1f6:	d0a1      	beq.n	800a13c <_strtod_l+0x814>
 800a1f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1fa:	b1db      	cbz	r3, 800a234 <_strtod_l+0x90c>
 800a1fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1fe:	4213      	tst	r3, r2
 800a200:	d0ee      	beq.n	800a1e0 <_strtod_l+0x8b8>
 800a202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a204:	9a08      	ldr	r2, [sp, #32]
 800a206:	4650      	mov	r0, sl
 800a208:	4659      	mov	r1, fp
 800a20a:	b1bb      	cbz	r3, 800a23c <_strtod_l+0x914>
 800a20c:	f7ff fb6e 	bl	80098ec <sulp>
 800a210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a214:	ec53 2b10 	vmov	r2, r3, d0
 800a218:	f7f6 f860 	bl	80002dc <__adddf3>
 800a21c:	4682      	mov	sl, r0
 800a21e:	468b      	mov	fp, r1
 800a220:	e7de      	b.n	800a1e0 <_strtod_l+0x8b8>
 800a222:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a226:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a22a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a22e:	f04f 3aff 	mov.w	sl, #4294967295
 800a232:	e7d5      	b.n	800a1e0 <_strtod_l+0x8b8>
 800a234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a236:	ea13 0f0a 	tst.w	r3, sl
 800a23a:	e7e1      	b.n	800a200 <_strtod_l+0x8d8>
 800a23c:	f7ff fb56 	bl	80098ec <sulp>
 800a240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a244:	ec53 2b10 	vmov	r2, r3, d0
 800a248:	f7f6 f846 	bl	80002d8 <__aeabi_dsub>
 800a24c:	2200      	movs	r2, #0
 800a24e:	2300      	movs	r3, #0
 800a250:	4682      	mov	sl, r0
 800a252:	468b      	mov	fp, r1
 800a254:	f7f6 fc60 	bl	8000b18 <__aeabi_dcmpeq>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d0c1      	beq.n	800a1e0 <_strtod_l+0x8b8>
 800a25c:	e619      	b.n	8009e92 <_strtod_l+0x56a>
 800a25e:	4641      	mov	r1, r8
 800a260:	4620      	mov	r0, r4
 800a262:	f7ff facd 	bl	8009800 <__ratio>
 800a266:	ec57 6b10 	vmov	r6, r7, d0
 800a26a:	2200      	movs	r2, #0
 800a26c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a270:	4630      	mov	r0, r6
 800a272:	4639      	mov	r1, r7
 800a274:	f7f6 fc64 	bl	8000b40 <__aeabi_dcmple>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d06f      	beq.n	800a35c <_strtod_l+0xa34>
 800a27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d17a      	bne.n	800a378 <_strtod_l+0xa50>
 800a282:	f1ba 0f00 	cmp.w	sl, #0
 800a286:	d158      	bne.n	800a33a <_strtod_l+0xa12>
 800a288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a28a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d15a      	bne.n	800a348 <_strtod_l+0xa20>
 800a292:	4b64      	ldr	r3, [pc, #400]	@ (800a424 <_strtod_l+0xafc>)
 800a294:	2200      	movs	r2, #0
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f6 fc47 	bl	8000b2c <__aeabi_dcmplt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d159      	bne.n	800a356 <_strtod_l+0xa2e>
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	4b60      	ldr	r3, [pc, #384]	@ (800a428 <_strtod_l+0xb00>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f7f6 f9cd 	bl	8000648 <__aeabi_dmul>
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a2b6:	9606      	str	r6, [sp, #24]
 800a2b8:	9307      	str	r3, [sp, #28]
 800a2ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2be:	4d57      	ldr	r5, [pc, #348]	@ (800a41c <_strtod_l+0xaf4>)
 800a2c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a2c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2c6:	401d      	ands	r5, r3
 800a2c8:	4b58      	ldr	r3, [pc, #352]	@ (800a42c <_strtod_l+0xb04>)
 800a2ca:	429d      	cmp	r5, r3
 800a2cc:	f040 80b2 	bne.w	800a434 <_strtod_l+0xb0c>
 800a2d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a2d6:	ec4b ab10 	vmov	d0, sl, fp
 800a2da:	f7ff f9c9 	bl	8009670 <__ulp>
 800a2de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2e2:	ec51 0b10 	vmov	r0, r1, d0
 800a2e6:	f7f6 f9af 	bl	8000648 <__aeabi_dmul>
 800a2ea:	4652      	mov	r2, sl
 800a2ec:	465b      	mov	r3, fp
 800a2ee:	f7f5 fff5 	bl	80002dc <__adddf3>
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4949      	ldr	r1, [pc, #292]	@ (800a41c <_strtod_l+0xaf4>)
 800a2f6:	4a4e      	ldr	r2, [pc, #312]	@ (800a430 <_strtod_l+0xb08>)
 800a2f8:	4019      	ands	r1, r3
 800a2fa:	4291      	cmp	r1, r2
 800a2fc:	4682      	mov	sl, r0
 800a2fe:	d942      	bls.n	800a386 <_strtod_l+0xa5e>
 800a300:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a302:	4b47      	ldr	r3, [pc, #284]	@ (800a420 <_strtod_l+0xaf8>)
 800a304:	429a      	cmp	r2, r3
 800a306:	d103      	bne.n	800a310 <_strtod_l+0x9e8>
 800a308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a30a:	3301      	adds	r3, #1
 800a30c:	f43f ad2b 	beq.w	8009d66 <_strtod_l+0x43e>
 800a310:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a420 <_strtod_l+0xaf8>
 800a314:	f04f 3aff 	mov.w	sl, #4294967295
 800a318:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a31a:	9805      	ldr	r0, [sp, #20]
 800a31c:	f7fe fe74 	bl	8009008 <_Bfree>
 800a320:	9805      	ldr	r0, [sp, #20]
 800a322:	4649      	mov	r1, r9
 800a324:	f7fe fe70 	bl	8009008 <_Bfree>
 800a328:	9805      	ldr	r0, [sp, #20]
 800a32a:	4641      	mov	r1, r8
 800a32c:	f7fe fe6c 	bl	8009008 <_Bfree>
 800a330:	9805      	ldr	r0, [sp, #20]
 800a332:	4621      	mov	r1, r4
 800a334:	f7fe fe68 	bl	8009008 <_Bfree>
 800a338:	e618      	b.n	8009f6c <_strtod_l+0x644>
 800a33a:	f1ba 0f01 	cmp.w	sl, #1
 800a33e:	d103      	bne.n	800a348 <_strtod_l+0xa20>
 800a340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a342:	2b00      	cmp	r3, #0
 800a344:	f43f ada5 	beq.w	8009e92 <_strtod_l+0x56a>
 800a348:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a3f8 <_strtod_l+0xad0>
 800a34c:	4f35      	ldr	r7, [pc, #212]	@ (800a424 <_strtod_l+0xafc>)
 800a34e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a352:	2600      	movs	r6, #0
 800a354:	e7b1      	b.n	800a2ba <_strtod_l+0x992>
 800a356:	4f34      	ldr	r7, [pc, #208]	@ (800a428 <_strtod_l+0xb00>)
 800a358:	2600      	movs	r6, #0
 800a35a:	e7aa      	b.n	800a2b2 <_strtod_l+0x98a>
 800a35c:	4b32      	ldr	r3, [pc, #200]	@ (800a428 <_strtod_l+0xb00>)
 800a35e:	4630      	mov	r0, r6
 800a360:	4639      	mov	r1, r7
 800a362:	2200      	movs	r2, #0
 800a364:	f7f6 f970 	bl	8000648 <__aeabi_dmul>
 800a368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a36a:	4606      	mov	r6, r0
 800a36c:	460f      	mov	r7, r1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d09f      	beq.n	800a2b2 <_strtod_l+0x98a>
 800a372:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a376:	e7a0      	b.n	800a2ba <_strtod_l+0x992>
 800a378:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a400 <_strtod_l+0xad8>
 800a37c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a380:	ec57 6b17 	vmov	r6, r7, d7
 800a384:	e799      	b.n	800a2ba <_strtod_l+0x992>
 800a386:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a38a:	9b08      	ldr	r3, [sp, #32]
 800a38c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1c1      	bne.n	800a318 <_strtod_l+0x9f0>
 800a394:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a398:	0d1b      	lsrs	r3, r3, #20
 800a39a:	051b      	lsls	r3, r3, #20
 800a39c:	429d      	cmp	r5, r3
 800a39e:	d1bb      	bne.n	800a318 <_strtod_l+0x9f0>
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	f7f6 fcb0 	bl	8000d08 <__aeabi_d2lz>
 800a3a8:	f7f6 f920 	bl	80005ec <__aeabi_l2d>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	f7f5 ff90 	bl	80002d8 <__aeabi_dsub>
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a3c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3c6:	ea46 060a 	orr.w	r6, r6, sl
 800a3ca:	431e      	orrs	r6, r3
 800a3cc:	d06f      	beq.n	800a4ae <_strtod_l+0xb86>
 800a3ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800a408 <_strtod_l+0xae0>)
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f7f6 fbaa 	bl	8000b2c <__aeabi_dcmplt>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	f47f accf 	bne.w	8009d7c <_strtod_l+0x454>
 800a3de:	a30c      	add	r3, pc, #48	@ (adr r3, 800a410 <_strtod_l+0xae8>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3e8:	f7f6 fbbe 	bl	8000b68 <__aeabi_dcmpgt>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d093      	beq.n	800a318 <_strtod_l+0x9f0>
 800a3f0:	e4c4      	b.n	8009d7c <_strtod_l+0x454>
 800a3f2:	bf00      	nop
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	00000000 	.word	0x00000000
 800a3fc:	bff00000 	.word	0xbff00000
 800a400:	00000000 	.word	0x00000000
 800a404:	3ff00000 	.word	0x3ff00000
 800a408:	94a03595 	.word	0x94a03595
 800a40c:	3fdfffff 	.word	0x3fdfffff
 800a410:	35afe535 	.word	0x35afe535
 800a414:	3fe00000 	.word	0x3fe00000
 800a418:	000fffff 	.word	0x000fffff
 800a41c:	7ff00000 	.word	0x7ff00000
 800a420:	7fefffff 	.word	0x7fefffff
 800a424:	3ff00000 	.word	0x3ff00000
 800a428:	3fe00000 	.word	0x3fe00000
 800a42c:	7fe00000 	.word	0x7fe00000
 800a430:	7c9fffff 	.word	0x7c9fffff
 800a434:	9b08      	ldr	r3, [sp, #32]
 800a436:	b323      	cbz	r3, 800a482 <_strtod_l+0xb5a>
 800a438:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a43c:	d821      	bhi.n	800a482 <_strtod_l+0xb5a>
 800a43e:	a328      	add	r3, pc, #160	@ (adr r3, 800a4e0 <_strtod_l+0xbb8>)
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	4630      	mov	r0, r6
 800a446:	4639      	mov	r1, r7
 800a448:	f7f6 fb7a 	bl	8000b40 <__aeabi_dcmple>
 800a44c:	b1a0      	cbz	r0, 800a478 <_strtod_l+0xb50>
 800a44e:	4639      	mov	r1, r7
 800a450:	4630      	mov	r0, r6
 800a452:	f7f6 fbd1 	bl	8000bf8 <__aeabi_d2uiz>
 800a456:	2801      	cmp	r0, #1
 800a458:	bf38      	it	cc
 800a45a:	2001      	movcc	r0, #1
 800a45c:	f7f6 f87a 	bl	8000554 <__aeabi_ui2d>
 800a460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a462:	4606      	mov	r6, r0
 800a464:	460f      	mov	r7, r1
 800a466:	b9fb      	cbnz	r3, 800a4a8 <_strtod_l+0xb80>
 800a468:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a46c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a46e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a470:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a474:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a478:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a47a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a47e:	1b5b      	subs	r3, r3, r5
 800a480:	9311      	str	r3, [sp, #68]	@ 0x44
 800a482:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a486:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a48a:	f7ff f8f1 	bl	8009670 <__ulp>
 800a48e:	4650      	mov	r0, sl
 800a490:	ec53 2b10 	vmov	r2, r3, d0
 800a494:	4659      	mov	r1, fp
 800a496:	f7f6 f8d7 	bl	8000648 <__aeabi_dmul>
 800a49a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a49e:	f7f5 ff1d 	bl	80002dc <__adddf3>
 800a4a2:	4682      	mov	sl, r0
 800a4a4:	468b      	mov	fp, r1
 800a4a6:	e770      	b.n	800a38a <_strtod_l+0xa62>
 800a4a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a4ac:	e7e0      	b.n	800a470 <_strtod_l+0xb48>
 800a4ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4e8 <_strtod_l+0xbc0>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	f7f6 fb3a 	bl	8000b2c <__aeabi_dcmplt>
 800a4b8:	e798      	b.n	800a3ec <_strtod_l+0xac4>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a4c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	f7ff ba6d 	b.w	80099a2 <_strtod_l+0x7a>
 800a4c8:	2a65      	cmp	r2, #101	@ 0x65
 800a4ca:	f43f ab66 	beq.w	8009b9a <_strtod_l+0x272>
 800a4ce:	2a45      	cmp	r2, #69	@ 0x45
 800a4d0:	f43f ab63 	beq.w	8009b9a <_strtod_l+0x272>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f7ff bb9e 	b.w	8009c16 <_strtod_l+0x2ee>
 800a4da:	bf00      	nop
 800a4dc:	f3af 8000 	nop.w
 800a4e0:	ffc00000 	.word	0xffc00000
 800a4e4:	41dfffff 	.word	0x41dfffff
 800a4e8:	94a03595 	.word	0x94a03595
 800a4ec:	3fcfffff 	.word	0x3fcfffff

0800a4f0 <_strtod_r>:
 800a4f0:	4b01      	ldr	r3, [pc, #4]	@ (800a4f8 <_strtod_r+0x8>)
 800a4f2:	f7ff ba19 	b.w	8009928 <_strtod_l>
 800a4f6:	bf00      	nop
 800a4f8:	2000006c 	.word	0x2000006c

0800a4fc <_strtol_l.constprop.0>:
 800a4fc:	2b24      	cmp	r3, #36	@ 0x24
 800a4fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a502:	4686      	mov	lr, r0
 800a504:	4690      	mov	r8, r2
 800a506:	d801      	bhi.n	800a50c <_strtol_l.constprop.0+0x10>
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d106      	bne.n	800a51a <_strtol_l.constprop.0+0x1e>
 800a50c:	f7fd fdb4 	bl	8008078 <__errno>
 800a510:	2316      	movs	r3, #22
 800a512:	6003      	str	r3, [r0, #0]
 800a514:	2000      	movs	r0, #0
 800a516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51a:	4834      	ldr	r0, [pc, #208]	@ (800a5ec <_strtol_l.constprop.0+0xf0>)
 800a51c:	460d      	mov	r5, r1
 800a51e:	462a      	mov	r2, r5
 800a520:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a524:	5d06      	ldrb	r6, [r0, r4]
 800a526:	f016 0608 	ands.w	r6, r6, #8
 800a52a:	d1f8      	bne.n	800a51e <_strtol_l.constprop.0+0x22>
 800a52c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a52e:	d12d      	bne.n	800a58c <_strtol_l.constprop.0+0x90>
 800a530:	782c      	ldrb	r4, [r5, #0]
 800a532:	2601      	movs	r6, #1
 800a534:	1c95      	adds	r5, r2, #2
 800a536:	f033 0210 	bics.w	r2, r3, #16
 800a53a:	d109      	bne.n	800a550 <_strtol_l.constprop.0+0x54>
 800a53c:	2c30      	cmp	r4, #48	@ 0x30
 800a53e:	d12a      	bne.n	800a596 <_strtol_l.constprop.0+0x9a>
 800a540:	782a      	ldrb	r2, [r5, #0]
 800a542:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a546:	2a58      	cmp	r2, #88	@ 0x58
 800a548:	d125      	bne.n	800a596 <_strtol_l.constprop.0+0x9a>
 800a54a:	786c      	ldrb	r4, [r5, #1]
 800a54c:	2310      	movs	r3, #16
 800a54e:	3502      	adds	r5, #2
 800a550:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a554:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a558:	2200      	movs	r2, #0
 800a55a:	fbbc f9f3 	udiv	r9, ip, r3
 800a55e:	4610      	mov	r0, r2
 800a560:	fb03 ca19 	mls	sl, r3, r9, ip
 800a564:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a568:	2f09      	cmp	r7, #9
 800a56a:	d81b      	bhi.n	800a5a4 <_strtol_l.constprop.0+0xa8>
 800a56c:	463c      	mov	r4, r7
 800a56e:	42a3      	cmp	r3, r4
 800a570:	dd27      	ble.n	800a5c2 <_strtol_l.constprop.0+0xc6>
 800a572:	1c57      	adds	r7, r2, #1
 800a574:	d007      	beq.n	800a586 <_strtol_l.constprop.0+0x8a>
 800a576:	4581      	cmp	r9, r0
 800a578:	d320      	bcc.n	800a5bc <_strtol_l.constprop.0+0xc0>
 800a57a:	d101      	bne.n	800a580 <_strtol_l.constprop.0+0x84>
 800a57c:	45a2      	cmp	sl, r4
 800a57e:	db1d      	blt.n	800a5bc <_strtol_l.constprop.0+0xc0>
 800a580:	fb00 4003 	mla	r0, r0, r3, r4
 800a584:	2201      	movs	r2, #1
 800a586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a58a:	e7eb      	b.n	800a564 <_strtol_l.constprop.0+0x68>
 800a58c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a58e:	bf04      	itt	eq
 800a590:	782c      	ldrbeq	r4, [r5, #0]
 800a592:	1c95      	addeq	r5, r2, #2
 800a594:	e7cf      	b.n	800a536 <_strtol_l.constprop.0+0x3a>
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1da      	bne.n	800a550 <_strtol_l.constprop.0+0x54>
 800a59a:	2c30      	cmp	r4, #48	@ 0x30
 800a59c:	bf0c      	ite	eq
 800a59e:	2308      	moveq	r3, #8
 800a5a0:	230a      	movne	r3, #10
 800a5a2:	e7d5      	b.n	800a550 <_strtol_l.constprop.0+0x54>
 800a5a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a5a8:	2f19      	cmp	r7, #25
 800a5aa:	d801      	bhi.n	800a5b0 <_strtol_l.constprop.0+0xb4>
 800a5ac:	3c37      	subs	r4, #55	@ 0x37
 800a5ae:	e7de      	b.n	800a56e <_strtol_l.constprop.0+0x72>
 800a5b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a5b4:	2f19      	cmp	r7, #25
 800a5b6:	d804      	bhi.n	800a5c2 <_strtol_l.constprop.0+0xc6>
 800a5b8:	3c57      	subs	r4, #87	@ 0x57
 800a5ba:	e7d8      	b.n	800a56e <_strtol_l.constprop.0+0x72>
 800a5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c0:	e7e1      	b.n	800a586 <_strtol_l.constprop.0+0x8a>
 800a5c2:	1c53      	adds	r3, r2, #1
 800a5c4:	d108      	bne.n	800a5d8 <_strtol_l.constprop.0+0xdc>
 800a5c6:	2322      	movs	r3, #34	@ 0x22
 800a5c8:	f8ce 3000 	str.w	r3, [lr]
 800a5cc:	4660      	mov	r0, ip
 800a5ce:	f1b8 0f00 	cmp.w	r8, #0
 800a5d2:	d0a0      	beq.n	800a516 <_strtol_l.constprop.0+0x1a>
 800a5d4:	1e69      	subs	r1, r5, #1
 800a5d6:	e006      	b.n	800a5e6 <_strtol_l.constprop.0+0xea>
 800a5d8:	b106      	cbz	r6, 800a5dc <_strtol_l.constprop.0+0xe0>
 800a5da:	4240      	negs	r0, r0
 800a5dc:	f1b8 0f00 	cmp.w	r8, #0
 800a5e0:	d099      	beq.n	800a516 <_strtol_l.constprop.0+0x1a>
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	d1f6      	bne.n	800a5d4 <_strtol_l.constprop.0+0xd8>
 800a5e6:	f8c8 1000 	str.w	r1, [r8]
 800a5ea:	e794      	b.n	800a516 <_strtol_l.constprop.0+0x1a>
 800a5ec:	0800bb99 	.word	0x0800bb99

0800a5f0 <_strtol_r>:
 800a5f0:	f7ff bf84 	b.w	800a4fc <_strtol_l.constprop.0>

0800a5f4 <__ssputs_r>:
 800a5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	688e      	ldr	r6, [r1, #8]
 800a5fa:	461f      	mov	r7, r3
 800a5fc:	42be      	cmp	r6, r7
 800a5fe:	680b      	ldr	r3, [r1, #0]
 800a600:	4682      	mov	sl, r0
 800a602:	460c      	mov	r4, r1
 800a604:	4690      	mov	r8, r2
 800a606:	d82d      	bhi.n	800a664 <__ssputs_r+0x70>
 800a608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a60c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a610:	d026      	beq.n	800a660 <__ssputs_r+0x6c>
 800a612:	6965      	ldr	r5, [r4, #20]
 800a614:	6909      	ldr	r1, [r1, #16]
 800a616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a61a:	eba3 0901 	sub.w	r9, r3, r1
 800a61e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a622:	1c7b      	adds	r3, r7, #1
 800a624:	444b      	add	r3, r9
 800a626:	106d      	asrs	r5, r5, #1
 800a628:	429d      	cmp	r5, r3
 800a62a:	bf38      	it	cc
 800a62c:	461d      	movcc	r5, r3
 800a62e:	0553      	lsls	r3, r2, #21
 800a630:	d527      	bpl.n	800a682 <__ssputs_r+0x8e>
 800a632:	4629      	mov	r1, r5
 800a634:	f7fe fc1c 	bl	8008e70 <_malloc_r>
 800a638:	4606      	mov	r6, r0
 800a63a:	b360      	cbz	r0, 800a696 <__ssputs_r+0xa2>
 800a63c:	6921      	ldr	r1, [r4, #16]
 800a63e:	464a      	mov	r2, r9
 800a640:	f000 fbee 	bl	800ae20 <memcpy>
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a64a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	6126      	str	r6, [r4, #16]
 800a652:	6165      	str	r5, [r4, #20]
 800a654:	444e      	add	r6, r9
 800a656:	eba5 0509 	sub.w	r5, r5, r9
 800a65a:	6026      	str	r6, [r4, #0]
 800a65c:	60a5      	str	r5, [r4, #8]
 800a65e:	463e      	mov	r6, r7
 800a660:	42be      	cmp	r6, r7
 800a662:	d900      	bls.n	800a666 <__ssputs_r+0x72>
 800a664:	463e      	mov	r6, r7
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	4632      	mov	r2, r6
 800a66a:	4641      	mov	r1, r8
 800a66c:	f000 fb9c 	bl	800ada8 <memmove>
 800a670:	68a3      	ldr	r3, [r4, #8]
 800a672:	1b9b      	subs	r3, r3, r6
 800a674:	60a3      	str	r3, [r4, #8]
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	4433      	add	r3, r6
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	2000      	movs	r0, #0
 800a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a682:	462a      	mov	r2, r5
 800a684:	f000 ff61 	bl	800b54a <_realloc_r>
 800a688:	4606      	mov	r6, r0
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d1e0      	bne.n	800a650 <__ssputs_r+0x5c>
 800a68e:	6921      	ldr	r1, [r4, #16]
 800a690:	4650      	mov	r0, sl
 800a692:	f7fe fb79 	bl	8008d88 <_free_r>
 800a696:	230c      	movs	r3, #12
 800a698:	f8ca 3000 	str.w	r3, [sl]
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	e7e9      	b.n	800a67e <__ssputs_r+0x8a>
	...

0800a6ac <_svfiprintf_r>:
 800a6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b0:	4698      	mov	r8, r3
 800a6b2:	898b      	ldrh	r3, [r1, #12]
 800a6b4:	061b      	lsls	r3, r3, #24
 800a6b6:	b09d      	sub	sp, #116	@ 0x74
 800a6b8:	4607      	mov	r7, r0
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	4614      	mov	r4, r2
 800a6be:	d510      	bpl.n	800a6e2 <_svfiprintf_r+0x36>
 800a6c0:	690b      	ldr	r3, [r1, #16]
 800a6c2:	b973      	cbnz	r3, 800a6e2 <_svfiprintf_r+0x36>
 800a6c4:	2140      	movs	r1, #64	@ 0x40
 800a6c6:	f7fe fbd3 	bl	8008e70 <_malloc_r>
 800a6ca:	6028      	str	r0, [r5, #0]
 800a6cc:	6128      	str	r0, [r5, #16]
 800a6ce:	b930      	cbnz	r0, 800a6de <_svfiprintf_r+0x32>
 800a6d0:	230c      	movs	r3, #12
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d8:	b01d      	add	sp, #116	@ 0x74
 800a6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6de:	2340      	movs	r3, #64	@ 0x40
 800a6e0:	616b      	str	r3, [r5, #20]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6e6:	2320      	movs	r3, #32
 800a6e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6f0:	2330      	movs	r3, #48	@ 0x30
 800a6f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a890 <_svfiprintf_r+0x1e4>
 800a6f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6fa:	f04f 0901 	mov.w	r9, #1
 800a6fe:	4623      	mov	r3, r4
 800a700:	469a      	mov	sl, r3
 800a702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a706:	b10a      	cbz	r2, 800a70c <_svfiprintf_r+0x60>
 800a708:	2a25      	cmp	r2, #37	@ 0x25
 800a70a:	d1f9      	bne.n	800a700 <_svfiprintf_r+0x54>
 800a70c:	ebba 0b04 	subs.w	fp, sl, r4
 800a710:	d00b      	beq.n	800a72a <_svfiprintf_r+0x7e>
 800a712:	465b      	mov	r3, fp
 800a714:	4622      	mov	r2, r4
 800a716:	4629      	mov	r1, r5
 800a718:	4638      	mov	r0, r7
 800a71a:	f7ff ff6b 	bl	800a5f4 <__ssputs_r>
 800a71e:	3001      	adds	r0, #1
 800a720:	f000 80a7 	beq.w	800a872 <_svfiprintf_r+0x1c6>
 800a724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a726:	445a      	add	r2, fp
 800a728:	9209      	str	r2, [sp, #36]	@ 0x24
 800a72a:	f89a 3000 	ldrb.w	r3, [sl]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f000 809f 	beq.w	800a872 <_svfiprintf_r+0x1c6>
 800a734:	2300      	movs	r3, #0
 800a736:	f04f 32ff 	mov.w	r2, #4294967295
 800a73a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a73e:	f10a 0a01 	add.w	sl, sl, #1
 800a742:	9304      	str	r3, [sp, #16]
 800a744:	9307      	str	r3, [sp, #28]
 800a746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a74a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a74c:	4654      	mov	r4, sl
 800a74e:	2205      	movs	r2, #5
 800a750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a754:	484e      	ldr	r0, [pc, #312]	@ (800a890 <_svfiprintf_r+0x1e4>)
 800a756:	f7f5 fd63 	bl	8000220 <memchr>
 800a75a:	9a04      	ldr	r2, [sp, #16]
 800a75c:	b9d8      	cbnz	r0, 800a796 <_svfiprintf_r+0xea>
 800a75e:	06d0      	lsls	r0, r2, #27
 800a760:	bf44      	itt	mi
 800a762:	2320      	movmi	r3, #32
 800a764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a768:	0711      	lsls	r1, r2, #28
 800a76a:	bf44      	itt	mi
 800a76c:	232b      	movmi	r3, #43	@ 0x2b
 800a76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a772:	f89a 3000 	ldrb.w	r3, [sl]
 800a776:	2b2a      	cmp	r3, #42	@ 0x2a
 800a778:	d015      	beq.n	800a7a6 <_svfiprintf_r+0xfa>
 800a77a:	9a07      	ldr	r2, [sp, #28]
 800a77c:	4654      	mov	r4, sl
 800a77e:	2000      	movs	r0, #0
 800a780:	f04f 0c0a 	mov.w	ip, #10
 800a784:	4621      	mov	r1, r4
 800a786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a78a:	3b30      	subs	r3, #48	@ 0x30
 800a78c:	2b09      	cmp	r3, #9
 800a78e:	d94b      	bls.n	800a828 <_svfiprintf_r+0x17c>
 800a790:	b1b0      	cbz	r0, 800a7c0 <_svfiprintf_r+0x114>
 800a792:	9207      	str	r2, [sp, #28]
 800a794:	e014      	b.n	800a7c0 <_svfiprintf_r+0x114>
 800a796:	eba0 0308 	sub.w	r3, r0, r8
 800a79a:	fa09 f303 	lsl.w	r3, r9, r3
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	9304      	str	r3, [sp, #16]
 800a7a2:	46a2      	mov	sl, r4
 800a7a4:	e7d2      	b.n	800a74c <_svfiprintf_r+0xa0>
 800a7a6:	9b03      	ldr	r3, [sp, #12]
 800a7a8:	1d19      	adds	r1, r3, #4
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	9103      	str	r1, [sp, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	bfbb      	ittet	lt
 800a7b2:	425b      	neglt	r3, r3
 800a7b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7b8:	9307      	strge	r3, [sp, #28]
 800a7ba:	9307      	strlt	r3, [sp, #28]
 800a7bc:	bfb8      	it	lt
 800a7be:	9204      	strlt	r2, [sp, #16]
 800a7c0:	7823      	ldrb	r3, [r4, #0]
 800a7c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7c4:	d10a      	bne.n	800a7dc <_svfiprintf_r+0x130>
 800a7c6:	7863      	ldrb	r3, [r4, #1]
 800a7c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7ca:	d132      	bne.n	800a832 <_svfiprintf_r+0x186>
 800a7cc:	9b03      	ldr	r3, [sp, #12]
 800a7ce:	1d1a      	adds	r2, r3, #4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	9203      	str	r2, [sp, #12]
 800a7d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7d8:	3402      	adds	r4, #2
 800a7da:	9305      	str	r3, [sp, #20]
 800a7dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a8a0 <_svfiprintf_r+0x1f4>
 800a7e0:	7821      	ldrb	r1, [r4, #0]
 800a7e2:	2203      	movs	r2, #3
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	f7f5 fd1b 	bl	8000220 <memchr>
 800a7ea:	b138      	cbz	r0, 800a7fc <_svfiprintf_r+0x150>
 800a7ec:	9b04      	ldr	r3, [sp, #16]
 800a7ee:	eba0 000a 	sub.w	r0, r0, sl
 800a7f2:	2240      	movs	r2, #64	@ 0x40
 800a7f4:	4082      	lsls	r2, r0
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	3401      	adds	r4, #1
 800a7fa:	9304      	str	r3, [sp, #16]
 800a7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a800:	4824      	ldr	r0, [pc, #144]	@ (800a894 <_svfiprintf_r+0x1e8>)
 800a802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a806:	2206      	movs	r2, #6
 800a808:	f7f5 fd0a 	bl	8000220 <memchr>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d036      	beq.n	800a87e <_svfiprintf_r+0x1d2>
 800a810:	4b21      	ldr	r3, [pc, #132]	@ (800a898 <_svfiprintf_r+0x1ec>)
 800a812:	bb1b      	cbnz	r3, 800a85c <_svfiprintf_r+0x1b0>
 800a814:	9b03      	ldr	r3, [sp, #12]
 800a816:	3307      	adds	r3, #7
 800a818:	f023 0307 	bic.w	r3, r3, #7
 800a81c:	3308      	adds	r3, #8
 800a81e:	9303      	str	r3, [sp, #12]
 800a820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a822:	4433      	add	r3, r6
 800a824:	9309      	str	r3, [sp, #36]	@ 0x24
 800a826:	e76a      	b.n	800a6fe <_svfiprintf_r+0x52>
 800a828:	fb0c 3202 	mla	r2, ip, r2, r3
 800a82c:	460c      	mov	r4, r1
 800a82e:	2001      	movs	r0, #1
 800a830:	e7a8      	b.n	800a784 <_svfiprintf_r+0xd8>
 800a832:	2300      	movs	r3, #0
 800a834:	3401      	adds	r4, #1
 800a836:	9305      	str	r3, [sp, #20]
 800a838:	4619      	mov	r1, r3
 800a83a:	f04f 0c0a 	mov.w	ip, #10
 800a83e:	4620      	mov	r0, r4
 800a840:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a844:	3a30      	subs	r2, #48	@ 0x30
 800a846:	2a09      	cmp	r2, #9
 800a848:	d903      	bls.n	800a852 <_svfiprintf_r+0x1a6>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0c6      	beq.n	800a7dc <_svfiprintf_r+0x130>
 800a84e:	9105      	str	r1, [sp, #20]
 800a850:	e7c4      	b.n	800a7dc <_svfiprintf_r+0x130>
 800a852:	fb0c 2101 	mla	r1, ip, r1, r2
 800a856:	4604      	mov	r4, r0
 800a858:	2301      	movs	r3, #1
 800a85a:	e7f0      	b.n	800a83e <_svfiprintf_r+0x192>
 800a85c:	ab03      	add	r3, sp, #12
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	462a      	mov	r2, r5
 800a862:	4b0e      	ldr	r3, [pc, #56]	@ (800a89c <_svfiprintf_r+0x1f0>)
 800a864:	a904      	add	r1, sp, #16
 800a866:	4638      	mov	r0, r7
 800a868:	f7fc fc66 	bl	8007138 <_printf_float>
 800a86c:	1c42      	adds	r2, r0, #1
 800a86e:	4606      	mov	r6, r0
 800a870:	d1d6      	bne.n	800a820 <_svfiprintf_r+0x174>
 800a872:	89ab      	ldrh	r3, [r5, #12]
 800a874:	065b      	lsls	r3, r3, #25
 800a876:	f53f af2d 	bmi.w	800a6d4 <_svfiprintf_r+0x28>
 800a87a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a87c:	e72c      	b.n	800a6d8 <_svfiprintf_r+0x2c>
 800a87e:	ab03      	add	r3, sp, #12
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	462a      	mov	r2, r5
 800a884:	4b05      	ldr	r3, [pc, #20]	@ (800a89c <_svfiprintf_r+0x1f0>)
 800a886:	a904      	add	r1, sp, #16
 800a888:	4638      	mov	r0, r7
 800a88a:	f7fc feed 	bl	8007668 <_printf_i>
 800a88e:	e7ed      	b.n	800a86c <_svfiprintf_r+0x1c0>
 800a890:	0800bc99 	.word	0x0800bc99
 800a894:	0800bca3 	.word	0x0800bca3
 800a898:	08007139 	.word	0x08007139
 800a89c:	0800a5f5 	.word	0x0800a5f5
 800a8a0:	0800bc9f 	.word	0x0800bc9f

0800a8a4 <__sfputc_r>:
 800a8a4:	6893      	ldr	r3, [r2, #8]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	b410      	push	{r4}
 800a8ac:	6093      	str	r3, [r2, #8]
 800a8ae:	da08      	bge.n	800a8c2 <__sfputc_r+0x1e>
 800a8b0:	6994      	ldr	r4, [r2, #24]
 800a8b2:	42a3      	cmp	r3, r4
 800a8b4:	db01      	blt.n	800a8ba <__sfputc_r+0x16>
 800a8b6:	290a      	cmp	r1, #10
 800a8b8:	d103      	bne.n	800a8c2 <__sfputc_r+0x1e>
 800a8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8be:	f000 b9df 	b.w	800ac80 <__swbuf_r>
 800a8c2:	6813      	ldr	r3, [r2, #0]
 800a8c4:	1c58      	adds	r0, r3, #1
 800a8c6:	6010      	str	r0, [r2, #0]
 800a8c8:	7019      	strb	r1, [r3, #0]
 800a8ca:	4608      	mov	r0, r1
 800a8cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <__sfputs_r>:
 800a8d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	460f      	mov	r7, r1
 800a8d8:	4614      	mov	r4, r2
 800a8da:	18d5      	adds	r5, r2, r3
 800a8dc:	42ac      	cmp	r4, r5
 800a8de:	d101      	bne.n	800a8e4 <__sfputs_r+0x12>
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	e007      	b.n	800a8f4 <__sfputs_r+0x22>
 800a8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e8:	463a      	mov	r2, r7
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f7ff ffda 	bl	800a8a4 <__sfputc_r>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d1f3      	bne.n	800a8dc <__sfputs_r+0xa>
 800a8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8f8 <_vfiprintf_r>:
 800a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	460d      	mov	r5, r1
 800a8fe:	b09d      	sub	sp, #116	@ 0x74
 800a900:	4614      	mov	r4, r2
 800a902:	4698      	mov	r8, r3
 800a904:	4606      	mov	r6, r0
 800a906:	b118      	cbz	r0, 800a910 <_vfiprintf_r+0x18>
 800a908:	6a03      	ldr	r3, [r0, #32]
 800a90a:	b90b      	cbnz	r3, 800a910 <_vfiprintf_r+0x18>
 800a90c:	f7fd fa6c 	bl	8007de8 <__sinit>
 800a910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a912:	07d9      	lsls	r1, r3, #31
 800a914:	d405      	bmi.n	800a922 <_vfiprintf_r+0x2a>
 800a916:	89ab      	ldrh	r3, [r5, #12]
 800a918:	059a      	lsls	r2, r3, #22
 800a91a:	d402      	bmi.n	800a922 <_vfiprintf_r+0x2a>
 800a91c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a91e:	f7fd fbd6 	bl	80080ce <__retarget_lock_acquire_recursive>
 800a922:	89ab      	ldrh	r3, [r5, #12]
 800a924:	071b      	lsls	r3, r3, #28
 800a926:	d501      	bpl.n	800a92c <_vfiprintf_r+0x34>
 800a928:	692b      	ldr	r3, [r5, #16]
 800a92a:	b99b      	cbnz	r3, 800a954 <_vfiprintf_r+0x5c>
 800a92c:	4629      	mov	r1, r5
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 f9e4 	bl	800acfc <__swsetup_r>
 800a934:	b170      	cbz	r0, 800a954 <_vfiprintf_r+0x5c>
 800a936:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a938:	07dc      	lsls	r4, r3, #31
 800a93a:	d504      	bpl.n	800a946 <_vfiprintf_r+0x4e>
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	b01d      	add	sp, #116	@ 0x74
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	89ab      	ldrh	r3, [r5, #12]
 800a948:	0598      	lsls	r0, r3, #22
 800a94a:	d4f7      	bmi.n	800a93c <_vfiprintf_r+0x44>
 800a94c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a94e:	f7fd fbbf 	bl	80080d0 <__retarget_lock_release_recursive>
 800a952:	e7f3      	b.n	800a93c <_vfiprintf_r+0x44>
 800a954:	2300      	movs	r3, #0
 800a956:	9309      	str	r3, [sp, #36]	@ 0x24
 800a958:	2320      	movs	r3, #32
 800a95a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a95e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a962:	2330      	movs	r3, #48	@ 0x30
 800a964:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab14 <_vfiprintf_r+0x21c>
 800a968:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a96c:	f04f 0901 	mov.w	r9, #1
 800a970:	4623      	mov	r3, r4
 800a972:	469a      	mov	sl, r3
 800a974:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a978:	b10a      	cbz	r2, 800a97e <_vfiprintf_r+0x86>
 800a97a:	2a25      	cmp	r2, #37	@ 0x25
 800a97c:	d1f9      	bne.n	800a972 <_vfiprintf_r+0x7a>
 800a97e:	ebba 0b04 	subs.w	fp, sl, r4
 800a982:	d00b      	beq.n	800a99c <_vfiprintf_r+0xa4>
 800a984:	465b      	mov	r3, fp
 800a986:	4622      	mov	r2, r4
 800a988:	4629      	mov	r1, r5
 800a98a:	4630      	mov	r0, r6
 800a98c:	f7ff ffa1 	bl	800a8d2 <__sfputs_r>
 800a990:	3001      	adds	r0, #1
 800a992:	f000 80a7 	beq.w	800aae4 <_vfiprintf_r+0x1ec>
 800a996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a998:	445a      	add	r2, fp
 800a99a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a99c:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 809f 	beq.w	800aae4 <_vfiprintf_r+0x1ec>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9b0:	f10a 0a01 	add.w	sl, sl, #1
 800a9b4:	9304      	str	r3, [sp, #16]
 800a9b6:	9307      	str	r3, [sp, #28]
 800a9b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9be:	4654      	mov	r4, sl
 800a9c0:	2205      	movs	r2, #5
 800a9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c6:	4853      	ldr	r0, [pc, #332]	@ (800ab14 <_vfiprintf_r+0x21c>)
 800a9c8:	f7f5 fc2a 	bl	8000220 <memchr>
 800a9cc:	9a04      	ldr	r2, [sp, #16]
 800a9ce:	b9d8      	cbnz	r0, 800aa08 <_vfiprintf_r+0x110>
 800a9d0:	06d1      	lsls	r1, r2, #27
 800a9d2:	bf44      	itt	mi
 800a9d4:	2320      	movmi	r3, #32
 800a9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9da:	0713      	lsls	r3, r2, #28
 800a9dc:	bf44      	itt	mi
 800a9de:	232b      	movmi	r3, #43	@ 0x2b
 800a9e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9ea:	d015      	beq.n	800aa18 <_vfiprintf_r+0x120>
 800a9ec:	9a07      	ldr	r2, [sp, #28]
 800a9ee:	4654      	mov	r4, sl
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	f04f 0c0a 	mov.w	ip, #10
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9fc:	3b30      	subs	r3, #48	@ 0x30
 800a9fe:	2b09      	cmp	r3, #9
 800aa00:	d94b      	bls.n	800aa9a <_vfiprintf_r+0x1a2>
 800aa02:	b1b0      	cbz	r0, 800aa32 <_vfiprintf_r+0x13a>
 800aa04:	9207      	str	r2, [sp, #28]
 800aa06:	e014      	b.n	800aa32 <_vfiprintf_r+0x13a>
 800aa08:	eba0 0308 	sub.w	r3, r0, r8
 800aa0c:	fa09 f303 	lsl.w	r3, r9, r3
 800aa10:	4313      	orrs	r3, r2
 800aa12:	9304      	str	r3, [sp, #16]
 800aa14:	46a2      	mov	sl, r4
 800aa16:	e7d2      	b.n	800a9be <_vfiprintf_r+0xc6>
 800aa18:	9b03      	ldr	r3, [sp, #12]
 800aa1a:	1d19      	adds	r1, r3, #4
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	9103      	str	r1, [sp, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bfbb      	ittet	lt
 800aa24:	425b      	neglt	r3, r3
 800aa26:	f042 0202 	orrlt.w	r2, r2, #2
 800aa2a:	9307      	strge	r3, [sp, #28]
 800aa2c:	9307      	strlt	r3, [sp, #28]
 800aa2e:	bfb8      	it	lt
 800aa30:	9204      	strlt	r2, [sp, #16]
 800aa32:	7823      	ldrb	r3, [r4, #0]
 800aa34:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa36:	d10a      	bne.n	800aa4e <_vfiprintf_r+0x156>
 800aa38:	7863      	ldrb	r3, [r4, #1]
 800aa3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa3c:	d132      	bne.n	800aaa4 <_vfiprintf_r+0x1ac>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	1d1a      	adds	r2, r3, #4
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	9203      	str	r2, [sp, #12]
 800aa46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa4a:	3402      	adds	r4, #2
 800aa4c:	9305      	str	r3, [sp, #20]
 800aa4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab24 <_vfiprintf_r+0x22c>
 800aa52:	7821      	ldrb	r1, [r4, #0]
 800aa54:	2203      	movs	r2, #3
 800aa56:	4650      	mov	r0, sl
 800aa58:	f7f5 fbe2 	bl	8000220 <memchr>
 800aa5c:	b138      	cbz	r0, 800aa6e <_vfiprintf_r+0x176>
 800aa5e:	9b04      	ldr	r3, [sp, #16]
 800aa60:	eba0 000a 	sub.w	r0, r0, sl
 800aa64:	2240      	movs	r2, #64	@ 0x40
 800aa66:	4082      	lsls	r2, r0
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	3401      	adds	r4, #1
 800aa6c:	9304      	str	r3, [sp, #16]
 800aa6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa72:	4829      	ldr	r0, [pc, #164]	@ (800ab18 <_vfiprintf_r+0x220>)
 800aa74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa78:	2206      	movs	r2, #6
 800aa7a:	f7f5 fbd1 	bl	8000220 <memchr>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d03f      	beq.n	800ab02 <_vfiprintf_r+0x20a>
 800aa82:	4b26      	ldr	r3, [pc, #152]	@ (800ab1c <_vfiprintf_r+0x224>)
 800aa84:	bb1b      	cbnz	r3, 800aace <_vfiprintf_r+0x1d6>
 800aa86:	9b03      	ldr	r3, [sp, #12]
 800aa88:	3307      	adds	r3, #7
 800aa8a:	f023 0307 	bic.w	r3, r3, #7
 800aa8e:	3308      	adds	r3, #8
 800aa90:	9303      	str	r3, [sp, #12]
 800aa92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa94:	443b      	add	r3, r7
 800aa96:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa98:	e76a      	b.n	800a970 <_vfiprintf_r+0x78>
 800aa9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	e7a8      	b.n	800a9f6 <_vfiprintf_r+0xfe>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	3401      	adds	r4, #1
 800aaa8:	9305      	str	r3, [sp, #20]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	f04f 0c0a 	mov.w	ip, #10
 800aab0:	4620      	mov	r0, r4
 800aab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aab6:	3a30      	subs	r2, #48	@ 0x30
 800aab8:	2a09      	cmp	r2, #9
 800aaba:	d903      	bls.n	800aac4 <_vfiprintf_r+0x1cc>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0c6      	beq.n	800aa4e <_vfiprintf_r+0x156>
 800aac0:	9105      	str	r1, [sp, #20]
 800aac2:	e7c4      	b.n	800aa4e <_vfiprintf_r+0x156>
 800aac4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aac8:	4604      	mov	r4, r0
 800aaca:	2301      	movs	r3, #1
 800aacc:	e7f0      	b.n	800aab0 <_vfiprintf_r+0x1b8>
 800aace:	ab03      	add	r3, sp, #12
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	462a      	mov	r2, r5
 800aad4:	4b12      	ldr	r3, [pc, #72]	@ (800ab20 <_vfiprintf_r+0x228>)
 800aad6:	a904      	add	r1, sp, #16
 800aad8:	4630      	mov	r0, r6
 800aada:	f7fc fb2d 	bl	8007138 <_printf_float>
 800aade:	4607      	mov	r7, r0
 800aae0:	1c78      	adds	r0, r7, #1
 800aae2:	d1d6      	bne.n	800aa92 <_vfiprintf_r+0x19a>
 800aae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aae6:	07d9      	lsls	r1, r3, #31
 800aae8:	d405      	bmi.n	800aaf6 <_vfiprintf_r+0x1fe>
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	059a      	lsls	r2, r3, #22
 800aaee:	d402      	bmi.n	800aaf6 <_vfiprintf_r+0x1fe>
 800aaf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaf2:	f7fd faed 	bl	80080d0 <__retarget_lock_release_recursive>
 800aaf6:	89ab      	ldrh	r3, [r5, #12]
 800aaf8:	065b      	lsls	r3, r3, #25
 800aafa:	f53f af1f 	bmi.w	800a93c <_vfiprintf_r+0x44>
 800aafe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab00:	e71e      	b.n	800a940 <_vfiprintf_r+0x48>
 800ab02:	ab03      	add	r3, sp, #12
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	462a      	mov	r2, r5
 800ab08:	4b05      	ldr	r3, [pc, #20]	@ (800ab20 <_vfiprintf_r+0x228>)
 800ab0a:	a904      	add	r1, sp, #16
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f7fc fdab 	bl	8007668 <_printf_i>
 800ab12:	e7e4      	b.n	800aade <_vfiprintf_r+0x1e6>
 800ab14:	0800bc99 	.word	0x0800bc99
 800ab18:	0800bca3 	.word	0x0800bca3
 800ab1c:	08007139 	.word	0x08007139
 800ab20:	0800a8d3 	.word	0x0800a8d3
 800ab24:	0800bc9f 	.word	0x0800bc9f

0800ab28 <__sflush_r>:
 800ab28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab30:	0716      	lsls	r6, r2, #28
 800ab32:	4605      	mov	r5, r0
 800ab34:	460c      	mov	r4, r1
 800ab36:	d454      	bmi.n	800abe2 <__sflush_r+0xba>
 800ab38:	684b      	ldr	r3, [r1, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	dc02      	bgt.n	800ab44 <__sflush_r+0x1c>
 800ab3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dd48      	ble.n	800abd6 <__sflush_r+0xae>
 800ab44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	d045      	beq.n	800abd6 <__sflush_r+0xae>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab50:	682f      	ldr	r7, [r5, #0]
 800ab52:	6a21      	ldr	r1, [r4, #32]
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	d030      	beq.n	800abba <__sflush_r+0x92>
 800ab58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	0759      	lsls	r1, r3, #29
 800ab5e:	d505      	bpl.n	800ab6c <__sflush_r+0x44>
 800ab60:	6863      	ldr	r3, [r4, #4]
 800ab62:	1ad2      	subs	r2, r2, r3
 800ab64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab66:	b10b      	cbz	r3, 800ab6c <__sflush_r+0x44>
 800ab68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab6a:	1ad2      	subs	r2, r2, r3
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab70:	6a21      	ldr	r1, [r4, #32]
 800ab72:	4628      	mov	r0, r5
 800ab74:	47b0      	blx	r6
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	d106      	bne.n	800ab8a <__sflush_r+0x62>
 800ab7c:	6829      	ldr	r1, [r5, #0]
 800ab7e:	291d      	cmp	r1, #29
 800ab80:	d82b      	bhi.n	800abda <__sflush_r+0xb2>
 800ab82:	4a2a      	ldr	r2, [pc, #168]	@ (800ac2c <__sflush_r+0x104>)
 800ab84:	410a      	asrs	r2, r1
 800ab86:	07d6      	lsls	r6, r2, #31
 800ab88:	d427      	bmi.n	800abda <__sflush_r+0xb2>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	6062      	str	r2, [r4, #4]
 800ab8e:	04d9      	lsls	r1, r3, #19
 800ab90:	6922      	ldr	r2, [r4, #16]
 800ab92:	6022      	str	r2, [r4, #0]
 800ab94:	d504      	bpl.n	800aba0 <__sflush_r+0x78>
 800ab96:	1c42      	adds	r2, r0, #1
 800ab98:	d101      	bne.n	800ab9e <__sflush_r+0x76>
 800ab9a:	682b      	ldr	r3, [r5, #0]
 800ab9c:	b903      	cbnz	r3, 800aba0 <__sflush_r+0x78>
 800ab9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800aba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aba2:	602f      	str	r7, [r5, #0]
 800aba4:	b1b9      	cbz	r1, 800abd6 <__sflush_r+0xae>
 800aba6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abaa:	4299      	cmp	r1, r3
 800abac:	d002      	beq.n	800abb4 <__sflush_r+0x8c>
 800abae:	4628      	mov	r0, r5
 800abb0:	f7fe f8ea 	bl	8008d88 <_free_r>
 800abb4:	2300      	movs	r3, #0
 800abb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800abb8:	e00d      	b.n	800abd6 <__sflush_r+0xae>
 800abba:	2301      	movs	r3, #1
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b0      	blx	r6
 800abc0:	4602      	mov	r2, r0
 800abc2:	1c50      	adds	r0, r2, #1
 800abc4:	d1c9      	bne.n	800ab5a <__sflush_r+0x32>
 800abc6:	682b      	ldr	r3, [r5, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0c6      	beq.n	800ab5a <__sflush_r+0x32>
 800abcc:	2b1d      	cmp	r3, #29
 800abce:	d001      	beq.n	800abd4 <__sflush_r+0xac>
 800abd0:	2b16      	cmp	r3, #22
 800abd2:	d11e      	bne.n	800ac12 <__sflush_r+0xea>
 800abd4:	602f      	str	r7, [r5, #0]
 800abd6:	2000      	movs	r0, #0
 800abd8:	e022      	b.n	800ac20 <__sflush_r+0xf8>
 800abda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abde:	b21b      	sxth	r3, r3
 800abe0:	e01b      	b.n	800ac1a <__sflush_r+0xf2>
 800abe2:	690f      	ldr	r7, [r1, #16]
 800abe4:	2f00      	cmp	r7, #0
 800abe6:	d0f6      	beq.n	800abd6 <__sflush_r+0xae>
 800abe8:	0793      	lsls	r3, r2, #30
 800abea:	680e      	ldr	r6, [r1, #0]
 800abec:	bf08      	it	eq
 800abee:	694b      	ldreq	r3, [r1, #20]
 800abf0:	600f      	str	r7, [r1, #0]
 800abf2:	bf18      	it	ne
 800abf4:	2300      	movne	r3, #0
 800abf6:	eba6 0807 	sub.w	r8, r6, r7
 800abfa:	608b      	str	r3, [r1, #8]
 800abfc:	f1b8 0f00 	cmp.w	r8, #0
 800ac00:	dde9      	ble.n	800abd6 <__sflush_r+0xae>
 800ac02:	6a21      	ldr	r1, [r4, #32]
 800ac04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac06:	4643      	mov	r3, r8
 800ac08:	463a      	mov	r2, r7
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	47b0      	blx	r6
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	dc08      	bgt.n	800ac24 <__sflush_r+0xfc>
 800ac12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac1a:	81a3      	strh	r3, [r4, #12]
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac24:	4407      	add	r7, r0
 800ac26:	eba8 0800 	sub.w	r8, r8, r0
 800ac2a:	e7e7      	b.n	800abfc <__sflush_r+0xd4>
 800ac2c:	dfbffffe 	.word	0xdfbffffe

0800ac30 <_fflush_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	690b      	ldr	r3, [r1, #16]
 800ac34:	4605      	mov	r5, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	b913      	cbnz	r3, 800ac40 <_fflush_r+0x10>
 800ac3a:	2500      	movs	r5, #0
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	b118      	cbz	r0, 800ac4a <_fflush_r+0x1a>
 800ac42:	6a03      	ldr	r3, [r0, #32]
 800ac44:	b90b      	cbnz	r3, 800ac4a <_fflush_r+0x1a>
 800ac46:	f7fd f8cf 	bl	8007de8 <__sinit>
 800ac4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0f3      	beq.n	800ac3a <_fflush_r+0xa>
 800ac52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac54:	07d0      	lsls	r0, r2, #31
 800ac56:	d404      	bmi.n	800ac62 <_fflush_r+0x32>
 800ac58:	0599      	lsls	r1, r3, #22
 800ac5a:	d402      	bmi.n	800ac62 <_fflush_r+0x32>
 800ac5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac5e:	f7fd fa36 	bl	80080ce <__retarget_lock_acquire_recursive>
 800ac62:	4628      	mov	r0, r5
 800ac64:	4621      	mov	r1, r4
 800ac66:	f7ff ff5f 	bl	800ab28 <__sflush_r>
 800ac6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac6c:	07da      	lsls	r2, r3, #31
 800ac6e:	4605      	mov	r5, r0
 800ac70:	d4e4      	bmi.n	800ac3c <_fflush_r+0xc>
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	059b      	lsls	r3, r3, #22
 800ac76:	d4e1      	bmi.n	800ac3c <_fflush_r+0xc>
 800ac78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac7a:	f7fd fa29 	bl	80080d0 <__retarget_lock_release_recursive>
 800ac7e:	e7dd      	b.n	800ac3c <_fflush_r+0xc>

0800ac80 <__swbuf_r>:
 800ac80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac82:	460e      	mov	r6, r1
 800ac84:	4614      	mov	r4, r2
 800ac86:	4605      	mov	r5, r0
 800ac88:	b118      	cbz	r0, 800ac92 <__swbuf_r+0x12>
 800ac8a:	6a03      	ldr	r3, [r0, #32]
 800ac8c:	b90b      	cbnz	r3, 800ac92 <__swbuf_r+0x12>
 800ac8e:	f7fd f8ab 	bl	8007de8 <__sinit>
 800ac92:	69a3      	ldr	r3, [r4, #24]
 800ac94:	60a3      	str	r3, [r4, #8]
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	071a      	lsls	r2, r3, #28
 800ac9a:	d501      	bpl.n	800aca0 <__swbuf_r+0x20>
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	b943      	cbnz	r3, 800acb2 <__swbuf_r+0x32>
 800aca0:	4621      	mov	r1, r4
 800aca2:	4628      	mov	r0, r5
 800aca4:	f000 f82a 	bl	800acfc <__swsetup_r>
 800aca8:	b118      	cbz	r0, 800acb2 <__swbuf_r+0x32>
 800acaa:	f04f 37ff 	mov.w	r7, #4294967295
 800acae:	4638      	mov	r0, r7
 800acb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	6922      	ldr	r2, [r4, #16]
 800acb6:	1a98      	subs	r0, r3, r2
 800acb8:	6963      	ldr	r3, [r4, #20]
 800acba:	b2f6      	uxtb	r6, r6
 800acbc:	4283      	cmp	r3, r0
 800acbe:	4637      	mov	r7, r6
 800acc0:	dc05      	bgt.n	800acce <__swbuf_r+0x4e>
 800acc2:	4621      	mov	r1, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	f7ff ffb3 	bl	800ac30 <_fflush_r>
 800acca:	2800      	cmp	r0, #0
 800accc:	d1ed      	bne.n	800acaa <__swbuf_r+0x2a>
 800acce:	68a3      	ldr	r3, [r4, #8]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	60a3      	str	r3, [r4, #8]
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	6022      	str	r2, [r4, #0]
 800acda:	701e      	strb	r6, [r3, #0]
 800acdc:	6962      	ldr	r2, [r4, #20]
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d004      	beq.n	800acee <__swbuf_r+0x6e>
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	07db      	lsls	r3, r3, #31
 800ace8:	d5e1      	bpl.n	800acae <__swbuf_r+0x2e>
 800acea:	2e0a      	cmp	r6, #10
 800acec:	d1df      	bne.n	800acae <__swbuf_r+0x2e>
 800acee:	4621      	mov	r1, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	f7ff ff9d 	bl	800ac30 <_fflush_r>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d0d9      	beq.n	800acae <__swbuf_r+0x2e>
 800acfa:	e7d6      	b.n	800acaa <__swbuf_r+0x2a>

0800acfc <__swsetup_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4b29      	ldr	r3, [pc, #164]	@ (800ada4 <__swsetup_r+0xa8>)
 800ad00:	4605      	mov	r5, r0
 800ad02:	6818      	ldr	r0, [r3, #0]
 800ad04:	460c      	mov	r4, r1
 800ad06:	b118      	cbz	r0, 800ad10 <__swsetup_r+0x14>
 800ad08:	6a03      	ldr	r3, [r0, #32]
 800ad0a:	b90b      	cbnz	r3, 800ad10 <__swsetup_r+0x14>
 800ad0c:	f7fd f86c 	bl	8007de8 <__sinit>
 800ad10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad14:	0719      	lsls	r1, r3, #28
 800ad16:	d422      	bmi.n	800ad5e <__swsetup_r+0x62>
 800ad18:	06da      	lsls	r2, r3, #27
 800ad1a:	d407      	bmi.n	800ad2c <__swsetup_r+0x30>
 800ad1c:	2209      	movs	r2, #9
 800ad1e:	602a      	str	r2, [r5, #0]
 800ad20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2a:	e033      	b.n	800ad94 <__swsetup_r+0x98>
 800ad2c:	0758      	lsls	r0, r3, #29
 800ad2e:	d512      	bpl.n	800ad56 <__swsetup_r+0x5a>
 800ad30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad32:	b141      	cbz	r1, 800ad46 <__swsetup_r+0x4a>
 800ad34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad38:	4299      	cmp	r1, r3
 800ad3a:	d002      	beq.n	800ad42 <__swsetup_r+0x46>
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f7fe f823 	bl	8008d88 <_free_r>
 800ad42:	2300      	movs	r3, #0
 800ad44:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	6063      	str	r3, [r4, #4]
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	f043 0308 	orr.w	r3, r3, #8
 800ad5c:	81a3      	strh	r3, [r4, #12]
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	b94b      	cbnz	r3, 800ad76 <__swsetup_r+0x7a>
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad6c:	d003      	beq.n	800ad76 <__swsetup_r+0x7a>
 800ad6e:	4621      	mov	r1, r4
 800ad70:	4628      	mov	r0, r5
 800ad72:	f000 fc5d 	bl	800b630 <__smakebuf_r>
 800ad76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad7a:	f013 0201 	ands.w	r2, r3, #1
 800ad7e:	d00a      	beq.n	800ad96 <__swsetup_r+0x9a>
 800ad80:	2200      	movs	r2, #0
 800ad82:	60a2      	str	r2, [r4, #8]
 800ad84:	6962      	ldr	r2, [r4, #20]
 800ad86:	4252      	negs	r2, r2
 800ad88:	61a2      	str	r2, [r4, #24]
 800ad8a:	6922      	ldr	r2, [r4, #16]
 800ad8c:	b942      	cbnz	r2, 800ada0 <__swsetup_r+0xa4>
 800ad8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad92:	d1c5      	bne.n	800ad20 <__swsetup_r+0x24>
 800ad94:	bd38      	pop	{r3, r4, r5, pc}
 800ad96:	0799      	lsls	r1, r3, #30
 800ad98:	bf58      	it	pl
 800ad9a:	6962      	ldrpl	r2, [r4, #20]
 800ad9c:	60a2      	str	r2, [r4, #8]
 800ad9e:	e7f4      	b.n	800ad8a <__swsetup_r+0x8e>
 800ada0:	2000      	movs	r0, #0
 800ada2:	e7f7      	b.n	800ad94 <__swsetup_r+0x98>
 800ada4:	2000001c 	.word	0x2000001c

0800ada8 <memmove>:
 800ada8:	4288      	cmp	r0, r1
 800adaa:	b510      	push	{r4, lr}
 800adac:	eb01 0402 	add.w	r4, r1, r2
 800adb0:	d902      	bls.n	800adb8 <memmove+0x10>
 800adb2:	4284      	cmp	r4, r0
 800adb4:	4623      	mov	r3, r4
 800adb6:	d807      	bhi.n	800adc8 <memmove+0x20>
 800adb8:	1e43      	subs	r3, r0, #1
 800adba:	42a1      	cmp	r1, r4
 800adbc:	d008      	beq.n	800add0 <memmove+0x28>
 800adbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adc6:	e7f8      	b.n	800adba <memmove+0x12>
 800adc8:	4402      	add	r2, r0
 800adca:	4601      	mov	r1, r0
 800adcc:	428a      	cmp	r2, r1
 800adce:	d100      	bne.n	800add2 <memmove+0x2a>
 800add0:	bd10      	pop	{r4, pc}
 800add2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800add6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adda:	e7f7      	b.n	800adcc <memmove+0x24>

0800addc <strncmp>:
 800addc:	b510      	push	{r4, lr}
 800adde:	b16a      	cbz	r2, 800adfc <strncmp+0x20>
 800ade0:	3901      	subs	r1, #1
 800ade2:	1884      	adds	r4, r0, r2
 800ade4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ade8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800adec:	429a      	cmp	r2, r3
 800adee:	d103      	bne.n	800adf8 <strncmp+0x1c>
 800adf0:	42a0      	cmp	r0, r4
 800adf2:	d001      	beq.n	800adf8 <strncmp+0x1c>
 800adf4:	2a00      	cmp	r2, #0
 800adf6:	d1f5      	bne.n	800ade4 <strncmp+0x8>
 800adf8:	1ad0      	subs	r0, r2, r3
 800adfa:	bd10      	pop	{r4, pc}
 800adfc:	4610      	mov	r0, r2
 800adfe:	e7fc      	b.n	800adfa <strncmp+0x1e>

0800ae00 <_sbrk_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4d06      	ldr	r5, [pc, #24]	@ (800ae1c <_sbrk_r+0x1c>)
 800ae04:	2300      	movs	r3, #0
 800ae06:	4604      	mov	r4, r0
 800ae08:	4608      	mov	r0, r1
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	f7f7 f93a 	bl	8002084 <_sbrk>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_sbrk_r+0x1a>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_sbrk_r+0x1a>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20000680 	.word	0x20000680

0800ae20 <memcpy>:
 800ae20:	440a      	add	r2, r1
 800ae22:	4291      	cmp	r1, r2
 800ae24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae28:	d100      	bne.n	800ae2c <memcpy+0xc>
 800ae2a:	4770      	bx	lr
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae36:	4291      	cmp	r1, r2
 800ae38:	d1f9      	bne.n	800ae2e <memcpy+0xe>
 800ae3a:	bd10      	pop	{r4, pc}
 800ae3c:	0000      	movs	r0, r0
	...

0800ae40 <nan>:
 800ae40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae48 <nan+0x8>
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	00000000 	.word	0x00000000
 800ae4c:	7ff80000 	.word	0x7ff80000

0800ae50 <__assert_func>:
 800ae50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae52:	4614      	mov	r4, r2
 800ae54:	461a      	mov	r2, r3
 800ae56:	4b09      	ldr	r3, [pc, #36]	@ (800ae7c <__assert_func+0x2c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	68d8      	ldr	r0, [r3, #12]
 800ae5e:	b954      	cbnz	r4, 800ae76 <__assert_func+0x26>
 800ae60:	4b07      	ldr	r3, [pc, #28]	@ (800ae80 <__assert_func+0x30>)
 800ae62:	461c      	mov	r4, r3
 800ae64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae68:	9100      	str	r1, [sp, #0]
 800ae6a:	462b      	mov	r3, r5
 800ae6c:	4905      	ldr	r1, [pc, #20]	@ (800ae84 <__assert_func+0x34>)
 800ae6e:	f000 fba7 	bl	800b5c0 <fiprintf>
 800ae72:	f000 fc3b 	bl	800b6ec <abort>
 800ae76:	4b04      	ldr	r3, [pc, #16]	@ (800ae88 <__assert_func+0x38>)
 800ae78:	e7f4      	b.n	800ae64 <__assert_func+0x14>
 800ae7a:	bf00      	nop
 800ae7c:	2000001c 	.word	0x2000001c
 800ae80:	0800bced 	.word	0x0800bced
 800ae84:	0800bcbf 	.word	0x0800bcbf
 800ae88:	0800bcb2 	.word	0x0800bcb2

0800ae8c <_calloc_r>:
 800ae8c:	b570      	push	{r4, r5, r6, lr}
 800ae8e:	fba1 5402 	umull	r5, r4, r1, r2
 800ae92:	b93c      	cbnz	r4, 800aea4 <_calloc_r+0x18>
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7fd ffeb 	bl	8008e70 <_malloc_r>
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	b928      	cbnz	r0, 800aeaa <_calloc_r+0x1e>
 800ae9e:	2600      	movs	r6, #0
 800aea0:	4630      	mov	r0, r6
 800aea2:	bd70      	pop	{r4, r5, r6, pc}
 800aea4:	220c      	movs	r2, #12
 800aea6:	6002      	str	r2, [r0, #0]
 800aea8:	e7f9      	b.n	800ae9e <_calloc_r+0x12>
 800aeaa:	462a      	mov	r2, r5
 800aeac:	4621      	mov	r1, r4
 800aeae:	f7fd f87a 	bl	8007fa6 <memset>
 800aeb2:	e7f5      	b.n	800aea0 <_calloc_r+0x14>

0800aeb4 <rshift>:
 800aeb4:	6903      	ldr	r3, [r0, #16]
 800aeb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aeba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aebe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aec2:	f100 0414 	add.w	r4, r0, #20
 800aec6:	dd45      	ble.n	800af54 <rshift+0xa0>
 800aec8:	f011 011f 	ands.w	r1, r1, #31
 800aecc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aed0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aed4:	d10c      	bne.n	800aef0 <rshift+0x3c>
 800aed6:	f100 0710 	add.w	r7, r0, #16
 800aeda:	4629      	mov	r1, r5
 800aedc:	42b1      	cmp	r1, r6
 800aede:	d334      	bcc.n	800af4a <rshift+0x96>
 800aee0:	1a9b      	subs	r3, r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	1eea      	subs	r2, r5, #3
 800aee6:	4296      	cmp	r6, r2
 800aee8:	bf38      	it	cc
 800aeea:	2300      	movcc	r3, #0
 800aeec:	4423      	add	r3, r4
 800aeee:	e015      	b.n	800af1c <rshift+0x68>
 800aef0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aef4:	f1c1 0820 	rsb	r8, r1, #32
 800aef8:	40cf      	lsrs	r7, r1
 800aefa:	f105 0e04 	add.w	lr, r5, #4
 800aefe:	46a1      	mov	r9, r4
 800af00:	4576      	cmp	r6, lr
 800af02:	46f4      	mov	ip, lr
 800af04:	d815      	bhi.n	800af32 <rshift+0x7e>
 800af06:	1a9a      	subs	r2, r3, r2
 800af08:	0092      	lsls	r2, r2, #2
 800af0a:	3a04      	subs	r2, #4
 800af0c:	3501      	adds	r5, #1
 800af0e:	42ae      	cmp	r6, r5
 800af10:	bf38      	it	cc
 800af12:	2200      	movcc	r2, #0
 800af14:	18a3      	adds	r3, r4, r2
 800af16:	50a7      	str	r7, [r4, r2]
 800af18:	b107      	cbz	r7, 800af1c <rshift+0x68>
 800af1a:	3304      	adds	r3, #4
 800af1c:	1b1a      	subs	r2, r3, r4
 800af1e:	42a3      	cmp	r3, r4
 800af20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af24:	bf08      	it	eq
 800af26:	2300      	moveq	r3, #0
 800af28:	6102      	str	r2, [r0, #16]
 800af2a:	bf08      	it	eq
 800af2c:	6143      	streq	r3, [r0, #20]
 800af2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af32:	f8dc c000 	ldr.w	ip, [ip]
 800af36:	fa0c fc08 	lsl.w	ip, ip, r8
 800af3a:	ea4c 0707 	orr.w	r7, ip, r7
 800af3e:	f849 7b04 	str.w	r7, [r9], #4
 800af42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af46:	40cf      	lsrs	r7, r1
 800af48:	e7da      	b.n	800af00 <rshift+0x4c>
 800af4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800af4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800af52:	e7c3      	b.n	800aedc <rshift+0x28>
 800af54:	4623      	mov	r3, r4
 800af56:	e7e1      	b.n	800af1c <rshift+0x68>

0800af58 <__hexdig_fun>:
 800af58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800af5c:	2b09      	cmp	r3, #9
 800af5e:	d802      	bhi.n	800af66 <__hexdig_fun+0xe>
 800af60:	3820      	subs	r0, #32
 800af62:	b2c0      	uxtb	r0, r0
 800af64:	4770      	bx	lr
 800af66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af6a:	2b05      	cmp	r3, #5
 800af6c:	d801      	bhi.n	800af72 <__hexdig_fun+0x1a>
 800af6e:	3847      	subs	r0, #71	@ 0x47
 800af70:	e7f7      	b.n	800af62 <__hexdig_fun+0xa>
 800af72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800af76:	2b05      	cmp	r3, #5
 800af78:	d801      	bhi.n	800af7e <__hexdig_fun+0x26>
 800af7a:	3827      	subs	r0, #39	@ 0x27
 800af7c:	e7f1      	b.n	800af62 <__hexdig_fun+0xa>
 800af7e:	2000      	movs	r0, #0
 800af80:	4770      	bx	lr
	...

0800af84 <__gethex>:
 800af84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af88:	b085      	sub	sp, #20
 800af8a:	468a      	mov	sl, r1
 800af8c:	9302      	str	r3, [sp, #8]
 800af8e:	680b      	ldr	r3, [r1, #0]
 800af90:	9001      	str	r0, [sp, #4]
 800af92:	4690      	mov	r8, r2
 800af94:	1c9c      	adds	r4, r3, #2
 800af96:	46a1      	mov	r9, r4
 800af98:	f814 0b01 	ldrb.w	r0, [r4], #1
 800af9c:	2830      	cmp	r0, #48	@ 0x30
 800af9e:	d0fa      	beq.n	800af96 <__gethex+0x12>
 800afa0:	eba9 0303 	sub.w	r3, r9, r3
 800afa4:	f1a3 0b02 	sub.w	fp, r3, #2
 800afa8:	f7ff ffd6 	bl	800af58 <__hexdig_fun>
 800afac:	4605      	mov	r5, r0
 800afae:	2800      	cmp	r0, #0
 800afb0:	d168      	bne.n	800b084 <__gethex+0x100>
 800afb2:	49a0      	ldr	r1, [pc, #640]	@ (800b234 <__gethex+0x2b0>)
 800afb4:	2201      	movs	r2, #1
 800afb6:	4648      	mov	r0, r9
 800afb8:	f7ff ff10 	bl	800addc <strncmp>
 800afbc:	4607      	mov	r7, r0
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d167      	bne.n	800b092 <__gethex+0x10e>
 800afc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800afc6:	4626      	mov	r6, r4
 800afc8:	f7ff ffc6 	bl	800af58 <__hexdig_fun>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d062      	beq.n	800b096 <__gethex+0x112>
 800afd0:	4623      	mov	r3, r4
 800afd2:	7818      	ldrb	r0, [r3, #0]
 800afd4:	2830      	cmp	r0, #48	@ 0x30
 800afd6:	4699      	mov	r9, r3
 800afd8:	f103 0301 	add.w	r3, r3, #1
 800afdc:	d0f9      	beq.n	800afd2 <__gethex+0x4e>
 800afde:	f7ff ffbb 	bl	800af58 <__hexdig_fun>
 800afe2:	fab0 f580 	clz	r5, r0
 800afe6:	096d      	lsrs	r5, r5, #5
 800afe8:	f04f 0b01 	mov.w	fp, #1
 800afec:	464a      	mov	r2, r9
 800afee:	4616      	mov	r6, r2
 800aff0:	3201      	adds	r2, #1
 800aff2:	7830      	ldrb	r0, [r6, #0]
 800aff4:	f7ff ffb0 	bl	800af58 <__hexdig_fun>
 800aff8:	2800      	cmp	r0, #0
 800affa:	d1f8      	bne.n	800afee <__gethex+0x6a>
 800affc:	498d      	ldr	r1, [pc, #564]	@ (800b234 <__gethex+0x2b0>)
 800affe:	2201      	movs	r2, #1
 800b000:	4630      	mov	r0, r6
 800b002:	f7ff feeb 	bl	800addc <strncmp>
 800b006:	2800      	cmp	r0, #0
 800b008:	d13f      	bne.n	800b08a <__gethex+0x106>
 800b00a:	b944      	cbnz	r4, 800b01e <__gethex+0x9a>
 800b00c:	1c74      	adds	r4, r6, #1
 800b00e:	4622      	mov	r2, r4
 800b010:	4616      	mov	r6, r2
 800b012:	3201      	adds	r2, #1
 800b014:	7830      	ldrb	r0, [r6, #0]
 800b016:	f7ff ff9f 	bl	800af58 <__hexdig_fun>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d1f8      	bne.n	800b010 <__gethex+0x8c>
 800b01e:	1ba4      	subs	r4, r4, r6
 800b020:	00a7      	lsls	r7, r4, #2
 800b022:	7833      	ldrb	r3, [r6, #0]
 800b024:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b028:	2b50      	cmp	r3, #80	@ 0x50
 800b02a:	d13e      	bne.n	800b0aa <__gethex+0x126>
 800b02c:	7873      	ldrb	r3, [r6, #1]
 800b02e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b030:	d033      	beq.n	800b09a <__gethex+0x116>
 800b032:	2b2d      	cmp	r3, #45	@ 0x2d
 800b034:	d034      	beq.n	800b0a0 <__gethex+0x11c>
 800b036:	1c71      	adds	r1, r6, #1
 800b038:	2400      	movs	r4, #0
 800b03a:	7808      	ldrb	r0, [r1, #0]
 800b03c:	f7ff ff8c 	bl	800af58 <__hexdig_fun>
 800b040:	1e43      	subs	r3, r0, #1
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b18      	cmp	r3, #24
 800b046:	d830      	bhi.n	800b0aa <__gethex+0x126>
 800b048:	f1a0 0210 	sub.w	r2, r0, #16
 800b04c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b050:	f7ff ff82 	bl	800af58 <__hexdig_fun>
 800b054:	f100 3cff 	add.w	ip, r0, #4294967295
 800b058:	fa5f fc8c 	uxtb.w	ip, ip
 800b05c:	f1bc 0f18 	cmp.w	ip, #24
 800b060:	f04f 030a 	mov.w	r3, #10
 800b064:	d91e      	bls.n	800b0a4 <__gethex+0x120>
 800b066:	b104      	cbz	r4, 800b06a <__gethex+0xe6>
 800b068:	4252      	negs	r2, r2
 800b06a:	4417      	add	r7, r2
 800b06c:	f8ca 1000 	str.w	r1, [sl]
 800b070:	b1ed      	cbz	r5, 800b0ae <__gethex+0x12a>
 800b072:	f1bb 0f00 	cmp.w	fp, #0
 800b076:	bf0c      	ite	eq
 800b078:	2506      	moveq	r5, #6
 800b07a:	2500      	movne	r5, #0
 800b07c:	4628      	mov	r0, r5
 800b07e:	b005      	add	sp, #20
 800b080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b084:	2500      	movs	r5, #0
 800b086:	462c      	mov	r4, r5
 800b088:	e7b0      	b.n	800afec <__gethex+0x68>
 800b08a:	2c00      	cmp	r4, #0
 800b08c:	d1c7      	bne.n	800b01e <__gethex+0x9a>
 800b08e:	4627      	mov	r7, r4
 800b090:	e7c7      	b.n	800b022 <__gethex+0x9e>
 800b092:	464e      	mov	r6, r9
 800b094:	462f      	mov	r7, r5
 800b096:	2501      	movs	r5, #1
 800b098:	e7c3      	b.n	800b022 <__gethex+0x9e>
 800b09a:	2400      	movs	r4, #0
 800b09c:	1cb1      	adds	r1, r6, #2
 800b09e:	e7cc      	b.n	800b03a <__gethex+0xb6>
 800b0a0:	2401      	movs	r4, #1
 800b0a2:	e7fb      	b.n	800b09c <__gethex+0x118>
 800b0a4:	fb03 0002 	mla	r0, r3, r2, r0
 800b0a8:	e7ce      	b.n	800b048 <__gethex+0xc4>
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	e7de      	b.n	800b06c <__gethex+0xe8>
 800b0ae:	eba6 0309 	sub.w	r3, r6, r9
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	2b07      	cmp	r3, #7
 800b0b8:	dc0a      	bgt.n	800b0d0 <__gethex+0x14c>
 800b0ba:	9801      	ldr	r0, [sp, #4]
 800b0bc:	f7fd ff64 	bl	8008f88 <_Balloc>
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	b940      	cbnz	r0, 800b0d6 <__gethex+0x152>
 800b0c4:	4b5c      	ldr	r3, [pc, #368]	@ (800b238 <__gethex+0x2b4>)
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	21e4      	movs	r1, #228	@ 0xe4
 800b0ca:	485c      	ldr	r0, [pc, #368]	@ (800b23c <__gethex+0x2b8>)
 800b0cc:	f7ff fec0 	bl	800ae50 <__assert_func>
 800b0d0:	3101      	adds	r1, #1
 800b0d2:	105b      	asrs	r3, r3, #1
 800b0d4:	e7ef      	b.n	800b0b6 <__gethex+0x132>
 800b0d6:	f100 0a14 	add.w	sl, r0, #20
 800b0da:	2300      	movs	r3, #0
 800b0dc:	4655      	mov	r5, sl
 800b0de:	469b      	mov	fp, r3
 800b0e0:	45b1      	cmp	r9, r6
 800b0e2:	d337      	bcc.n	800b154 <__gethex+0x1d0>
 800b0e4:	f845 bb04 	str.w	fp, [r5], #4
 800b0e8:	eba5 050a 	sub.w	r5, r5, sl
 800b0ec:	10ad      	asrs	r5, r5, #2
 800b0ee:	6125      	str	r5, [r4, #16]
 800b0f0:	4658      	mov	r0, fp
 800b0f2:	f7fe f83b 	bl	800916c <__hi0bits>
 800b0f6:	016d      	lsls	r5, r5, #5
 800b0f8:	f8d8 6000 	ldr.w	r6, [r8]
 800b0fc:	1a2d      	subs	r5, r5, r0
 800b0fe:	42b5      	cmp	r5, r6
 800b100:	dd54      	ble.n	800b1ac <__gethex+0x228>
 800b102:	1bad      	subs	r5, r5, r6
 800b104:	4629      	mov	r1, r5
 800b106:	4620      	mov	r0, r4
 800b108:	f7fe fbcf 	bl	80098aa <__any_on>
 800b10c:	4681      	mov	r9, r0
 800b10e:	b178      	cbz	r0, 800b130 <__gethex+0x1ac>
 800b110:	1e6b      	subs	r3, r5, #1
 800b112:	1159      	asrs	r1, r3, #5
 800b114:	f003 021f 	and.w	r2, r3, #31
 800b118:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b11c:	f04f 0901 	mov.w	r9, #1
 800b120:	fa09 f202 	lsl.w	r2, r9, r2
 800b124:	420a      	tst	r2, r1
 800b126:	d003      	beq.n	800b130 <__gethex+0x1ac>
 800b128:	454b      	cmp	r3, r9
 800b12a:	dc36      	bgt.n	800b19a <__gethex+0x216>
 800b12c:	f04f 0902 	mov.w	r9, #2
 800b130:	4629      	mov	r1, r5
 800b132:	4620      	mov	r0, r4
 800b134:	f7ff febe 	bl	800aeb4 <rshift>
 800b138:	442f      	add	r7, r5
 800b13a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b13e:	42bb      	cmp	r3, r7
 800b140:	da42      	bge.n	800b1c8 <__gethex+0x244>
 800b142:	9801      	ldr	r0, [sp, #4]
 800b144:	4621      	mov	r1, r4
 800b146:	f7fd ff5f 	bl	8009008 <_Bfree>
 800b14a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b14c:	2300      	movs	r3, #0
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	25a3      	movs	r5, #163	@ 0xa3
 800b152:	e793      	b.n	800b07c <__gethex+0xf8>
 800b154:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b158:	2a2e      	cmp	r2, #46	@ 0x2e
 800b15a:	d012      	beq.n	800b182 <__gethex+0x1fe>
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	d104      	bne.n	800b16a <__gethex+0x1e6>
 800b160:	f845 bb04 	str.w	fp, [r5], #4
 800b164:	f04f 0b00 	mov.w	fp, #0
 800b168:	465b      	mov	r3, fp
 800b16a:	7830      	ldrb	r0, [r6, #0]
 800b16c:	9303      	str	r3, [sp, #12]
 800b16e:	f7ff fef3 	bl	800af58 <__hexdig_fun>
 800b172:	9b03      	ldr	r3, [sp, #12]
 800b174:	f000 000f 	and.w	r0, r0, #15
 800b178:	4098      	lsls	r0, r3
 800b17a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b17e:	3304      	adds	r3, #4
 800b180:	e7ae      	b.n	800b0e0 <__gethex+0x15c>
 800b182:	45b1      	cmp	r9, r6
 800b184:	d8ea      	bhi.n	800b15c <__gethex+0x1d8>
 800b186:	492b      	ldr	r1, [pc, #172]	@ (800b234 <__gethex+0x2b0>)
 800b188:	9303      	str	r3, [sp, #12]
 800b18a:	2201      	movs	r2, #1
 800b18c:	4630      	mov	r0, r6
 800b18e:	f7ff fe25 	bl	800addc <strncmp>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	2800      	cmp	r0, #0
 800b196:	d1e1      	bne.n	800b15c <__gethex+0x1d8>
 800b198:	e7a2      	b.n	800b0e0 <__gethex+0x15c>
 800b19a:	1ea9      	subs	r1, r5, #2
 800b19c:	4620      	mov	r0, r4
 800b19e:	f7fe fb84 	bl	80098aa <__any_on>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d0c2      	beq.n	800b12c <__gethex+0x1a8>
 800b1a6:	f04f 0903 	mov.w	r9, #3
 800b1aa:	e7c1      	b.n	800b130 <__gethex+0x1ac>
 800b1ac:	da09      	bge.n	800b1c2 <__gethex+0x23e>
 800b1ae:	1b75      	subs	r5, r6, r5
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	9801      	ldr	r0, [sp, #4]
 800b1b4:	462a      	mov	r2, r5
 800b1b6:	f7fe f93f 	bl	8009438 <__lshift>
 800b1ba:	1b7f      	subs	r7, r7, r5
 800b1bc:	4604      	mov	r4, r0
 800b1be:	f100 0a14 	add.w	sl, r0, #20
 800b1c2:	f04f 0900 	mov.w	r9, #0
 800b1c6:	e7b8      	b.n	800b13a <__gethex+0x1b6>
 800b1c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1cc:	42bd      	cmp	r5, r7
 800b1ce:	dd6f      	ble.n	800b2b0 <__gethex+0x32c>
 800b1d0:	1bed      	subs	r5, r5, r7
 800b1d2:	42ae      	cmp	r6, r5
 800b1d4:	dc34      	bgt.n	800b240 <__gethex+0x2bc>
 800b1d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d022      	beq.n	800b224 <__gethex+0x2a0>
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d024      	beq.n	800b22c <__gethex+0x2a8>
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d115      	bne.n	800b212 <__gethex+0x28e>
 800b1e6:	42ae      	cmp	r6, r5
 800b1e8:	d113      	bne.n	800b212 <__gethex+0x28e>
 800b1ea:	2e01      	cmp	r6, #1
 800b1ec:	d10b      	bne.n	800b206 <__gethex+0x282>
 800b1ee:	9a02      	ldr	r2, [sp, #8]
 800b1f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	6123      	str	r3, [r4, #16]
 800b1fa:	f8ca 3000 	str.w	r3, [sl]
 800b1fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b200:	2562      	movs	r5, #98	@ 0x62
 800b202:	601c      	str	r4, [r3, #0]
 800b204:	e73a      	b.n	800b07c <__gethex+0xf8>
 800b206:	1e71      	subs	r1, r6, #1
 800b208:	4620      	mov	r0, r4
 800b20a:	f7fe fb4e 	bl	80098aa <__any_on>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d1ed      	bne.n	800b1ee <__gethex+0x26a>
 800b212:	9801      	ldr	r0, [sp, #4]
 800b214:	4621      	mov	r1, r4
 800b216:	f7fd fef7 	bl	8009008 <_Bfree>
 800b21a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b21c:	2300      	movs	r3, #0
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	2550      	movs	r5, #80	@ 0x50
 800b222:	e72b      	b.n	800b07c <__gethex+0xf8>
 800b224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1f3      	bne.n	800b212 <__gethex+0x28e>
 800b22a:	e7e0      	b.n	800b1ee <__gethex+0x26a>
 800b22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1dd      	bne.n	800b1ee <__gethex+0x26a>
 800b232:	e7ee      	b.n	800b212 <__gethex+0x28e>
 800b234:	0800bb40 	.word	0x0800bb40
 800b238:	0800b9d9 	.word	0x0800b9d9
 800b23c:	0800bcee 	.word	0x0800bcee
 800b240:	1e6f      	subs	r7, r5, #1
 800b242:	f1b9 0f00 	cmp.w	r9, #0
 800b246:	d130      	bne.n	800b2aa <__gethex+0x326>
 800b248:	b127      	cbz	r7, 800b254 <__gethex+0x2d0>
 800b24a:	4639      	mov	r1, r7
 800b24c:	4620      	mov	r0, r4
 800b24e:	f7fe fb2c 	bl	80098aa <__any_on>
 800b252:	4681      	mov	r9, r0
 800b254:	117a      	asrs	r2, r7, #5
 800b256:	2301      	movs	r3, #1
 800b258:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b25c:	f007 071f 	and.w	r7, r7, #31
 800b260:	40bb      	lsls	r3, r7
 800b262:	4213      	tst	r3, r2
 800b264:	4629      	mov	r1, r5
 800b266:	4620      	mov	r0, r4
 800b268:	bf18      	it	ne
 800b26a:	f049 0902 	orrne.w	r9, r9, #2
 800b26e:	f7ff fe21 	bl	800aeb4 <rshift>
 800b272:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b276:	1b76      	subs	r6, r6, r5
 800b278:	2502      	movs	r5, #2
 800b27a:	f1b9 0f00 	cmp.w	r9, #0
 800b27e:	d047      	beq.n	800b310 <__gethex+0x38c>
 800b280:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b284:	2b02      	cmp	r3, #2
 800b286:	d015      	beq.n	800b2b4 <__gethex+0x330>
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d017      	beq.n	800b2bc <__gethex+0x338>
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d109      	bne.n	800b2a4 <__gethex+0x320>
 800b290:	f019 0f02 	tst.w	r9, #2
 800b294:	d006      	beq.n	800b2a4 <__gethex+0x320>
 800b296:	f8da 3000 	ldr.w	r3, [sl]
 800b29a:	ea49 0903 	orr.w	r9, r9, r3
 800b29e:	f019 0f01 	tst.w	r9, #1
 800b2a2:	d10e      	bne.n	800b2c2 <__gethex+0x33e>
 800b2a4:	f045 0510 	orr.w	r5, r5, #16
 800b2a8:	e032      	b.n	800b310 <__gethex+0x38c>
 800b2aa:	f04f 0901 	mov.w	r9, #1
 800b2ae:	e7d1      	b.n	800b254 <__gethex+0x2d0>
 800b2b0:	2501      	movs	r5, #1
 800b2b2:	e7e2      	b.n	800b27a <__gethex+0x2f6>
 800b2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2b6:	f1c3 0301 	rsb	r3, r3, #1
 800b2ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d0f0      	beq.n	800b2a4 <__gethex+0x320>
 800b2c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2c6:	f104 0314 	add.w	r3, r4, #20
 800b2ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2d2:	f04f 0c00 	mov.w	ip, #0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2e0:	d01b      	beq.n	800b31a <__gethex+0x396>
 800b2e2:	3201      	adds	r2, #1
 800b2e4:	6002      	str	r2, [r0, #0]
 800b2e6:	2d02      	cmp	r5, #2
 800b2e8:	f104 0314 	add.w	r3, r4, #20
 800b2ec:	d13c      	bne.n	800b368 <__gethex+0x3e4>
 800b2ee:	f8d8 2000 	ldr.w	r2, [r8]
 800b2f2:	3a01      	subs	r2, #1
 800b2f4:	42b2      	cmp	r2, r6
 800b2f6:	d109      	bne.n	800b30c <__gethex+0x388>
 800b2f8:	1171      	asrs	r1, r6, #5
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b300:	f006 061f 	and.w	r6, r6, #31
 800b304:	fa02 f606 	lsl.w	r6, r2, r6
 800b308:	421e      	tst	r6, r3
 800b30a:	d13a      	bne.n	800b382 <__gethex+0x3fe>
 800b30c:	f045 0520 	orr.w	r5, r5, #32
 800b310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b312:	601c      	str	r4, [r3, #0]
 800b314:	9b02      	ldr	r3, [sp, #8]
 800b316:	601f      	str	r7, [r3, #0]
 800b318:	e6b0      	b.n	800b07c <__gethex+0xf8>
 800b31a:	4299      	cmp	r1, r3
 800b31c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b320:	d8d9      	bhi.n	800b2d6 <__gethex+0x352>
 800b322:	68a3      	ldr	r3, [r4, #8]
 800b324:	459b      	cmp	fp, r3
 800b326:	db17      	blt.n	800b358 <__gethex+0x3d4>
 800b328:	6861      	ldr	r1, [r4, #4]
 800b32a:	9801      	ldr	r0, [sp, #4]
 800b32c:	3101      	adds	r1, #1
 800b32e:	f7fd fe2b 	bl	8008f88 <_Balloc>
 800b332:	4681      	mov	r9, r0
 800b334:	b918      	cbnz	r0, 800b33e <__gethex+0x3ba>
 800b336:	4b1a      	ldr	r3, [pc, #104]	@ (800b3a0 <__gethex+0x41c>)
 800b338:	4602      	mov	r2, r0
 800b33a:	2184      	movs	r1, #132	@ 0x84
 800b33c:	e6c5      	b.n	800b0ca <__gethex+0x146>
 800b33e:	6922      	ldr	r2, [r4, #16]
 800b340:	3202      	adds	r2, #2
 800b342:	f104 010c 	add.w	r1, r4, #12
 800b346:	0092      	lsls	r2, r2, #2
 800b348:	300c      	adds	r0, #12
 800b34a:	f7ff fd69 	bl	800ae20 <memcpy>
 800b34e:	4621      	mov	r1, r4
 800b350:	9801      	ldr	r0, [sp, #4]
 800b352:	f7fd fe59 	bl	8009008 <_Bfree>
 800b356:	464c      	mov	r4, r9
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b360:	6122      	str	r2, [r4, #16]
 800b362:	2201      	movs	r2, #1
 800b364:	615a      	str	r2, [r3, #20]
 800b366:	e7be      	b.n	800b2e6 <__gethex+0x362>
 800b368:	6922      	ldr	r2, [r4, #16]
 800b36a:	455a      	cmp	r2, fp
 800b36c:	dd0b      	ble.n	800b386 <__gethex+0x402>
 800b36e:	2101      	movs	r1, #1
 800b370:	4620      	mov	r0, r4
 800b372:	f7ff fd9f 	bl	800aeb4 <rshift>
 800b376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b37a:	3701      	adds	r7, #1
 800b37c:	42bb      	cmp	r3, r7
 800b37e:	f6ff aee0 	blt.w	800b142 <__gethex+0x1be>
 800b382:	2501      	movs	r5, #1
 800b384:	e7c2      	b.n	800b30c <__gethex+0x388>
 800b386:	f016 061f 	ands.w	r6, r6, #31
 800b38a:	d0fa      	beq.n	800b382 <__gethex+0x3fe>
 800b38c:	4453      	add	r3, sl
 800b38e:	f1c6 0620 	rsb	r6, r6, #32
 800b392:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b396:	f7fd fee9 	bl	800916c <__hi0bits>
 800b39a:	42b0      	cmp	r0, r6
 800b39c:	dbe7      	blt.n	800b36e <__gethex+0x3ea>
 800b39e:	e7f0      	b.n	800b382 <__gethex+0x3fe>
 800b3a0:	0800b9d9 	.word	0x0800b9d9

0800b3a4 <L_shift>:
 800b3a4:	f1c2 0208 	rsb	r2, r2, #8
 800b3a8:	0092      	lsls	r2, r2, #2
 800b3aa:	b570      	push	{r4, r5, r6, lr}
 800b3ac:	f1c2 0620 	rsb	r6, r2, #32
 800b3b0:	6843      	ldr	r3, [r0, #4]
 800b3b2:	6804      	ldr	r4, [r0, #0]
 800b3b4:	fa03 f506 	lsl.w	r5, r3, r6
 800b3b8:	432c      	orrs	r4, r5
 800b3ba:	40d3      	lsrs	r3, r2
 800b3bc:	6004      	str	r4, [r0, #0]
 800b3be:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3c2:	4288      	cmp	r0, r1
 800b3c4:	d3f4      	bcc.n	800b3b0 <L_shift+0xc>
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}

0800b3c8 <__match>:
 800b3c8:	b530      	push	{r4, r5, lr}
 800b3ca:	6803      	ldr	r3, [r0, #0]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3d2:	b914      	cbnz	r4, 800b3da <__match+0x12>
 800b3d4:	6003      	str	r3, [r0, #0]
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	bd30      	pop	{r4, r5, pc}
 800b3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b3e2:	2d19      	cmp	r5, #25
 800b3e4:	bf98      	it	ls
 800b3e6:	3220      	addls	r2, #32
 800b3e8:	42a2      	cmp	r2, r4
 800b3ea:	d0f0      	beq.n	800b3ce <__match+0x6>
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e7f3      	b.n	800b3d8 <__match+0x10>

0800b3f0 <__hexnan>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	680b      	ldr	r3, [r1, #0]
 800b3f6:	6801      	ldr	r1, [r0, #0]
 800b3f8:	115e      	asrs	r6, r3, #5
 800b3fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3fe:	f013 031f 	ands.w	r3, r3, #31
 800b402:	b087      	sub	sp, #28
 800b404:	bf18      	it	ne
 800b406:	3604      	addne	r6, #4
 800b408:	2500      	movs	r5, #0
 800b40a:	1f37      	subs	r7, r6, #4
 800b40c:	4682      	mov	sl, r0
 800b40e:	4690      	mov	r8, r2
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	f846 5c04 	str.w	r5, [r6, #-4]
 800b416:	46b9      	mov	r9, r7
 800b418:	463c      	mov	r4, r7
 800b41a:	9502      	str	r5, [sp, #8]
 800b41c:	46ab      	mov	fp, r5
 800b41e:	784a      	ldrb	r2, [r1, #1]
 800b420:	1c4b      	adds	r3, r1, #1
 800b422:	9303      	str	r3, [sp, #12]
 800b424:	b342      	cbz	r2, 800b478 <__hexnan+0x88>
 800b426:	4610      	mov	r0, r2
 800b428:	9105      	str	r1, [sp, #20]
 800b42a:	9204      	str	r2, [sp, #16]
 800b42c:	f7ff fd94 	bl	800af58 <__hexdig_fun>
 800b430:	2800      	cmp	r0, #0
 800b432:	d151      	bne.n	800b4d8 <__hexnan+0xe8>
 800b434:	9a04      	ldr	r2, [sp, #16]
 800b436:	9905      	ldr	r1, [sp, #20]
 800b438:	2a20      	cmp	r2, #32
 800b43a:	d818      	bhi.n	800b46e <__hexnan+0x7e>
 800b43c:	9b02      	ldr	r3, [sp, #8]
 800b43e:	459b      	cmp	fp, r3
 800b440:	dd13      	ble.n	800b46a <__hexnan+0x7a>
 800b442:	454c      	cmp	r4, r9
 800b444:	d206      	bcs.n	800b454 <__hexnan+0x64>
 800b446:	2d07      	cmp	r5, #7
 800b448:	dc04      	bgt.n	800b454 <__hexnan+0x64>
 800b44a:	462a      	mov	r2, r5
 800b44c:	4649      	mov	r1, r9
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff ffa8 	bl	800b3a4 <L_shift>
 800b454:	4544      	cmp	r4, r8
 800b456:	d952      	bls.n	800b4fe <__hexnan+0x10e>
 800b458:	2300      	movs	r3, #0
 800b45a:	f1a4 0904 	sub.w	r9, r4, #4
 800b45e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b462:	f8cd b008 	str.w	fp, [sp, #8]
 800b466:	464c      	mov	r4, r9
 800b468:	461d      	mov	r5, r3
 800b46a:	9903      	ldr	r1, [sp, #12]
 800b46c:	e7d7      	b.n	800b41e <__hexnan+0x2e>
 800b46e:	2a29      	cmp	r2, #41	@ 0x29
 800b470:	d157      	bne.n	800b522 <__hexnan+0x132>
 800b472:	3102      	adds	r1, #2
 800b474:	f8ca 1000 	str.w	r1, [sl]
 800b478:	f1bb 0f00 	cmp.w	fp, #0
 800b47c:	d051      	beq.n	800b522 <__hexnan+0x132>
 800b47e:	454c      	cmp	r4, r9
 800b480:	d206      	bcs.n	800b490 <__hexnan+0xa0>
 800b482:	2d07      	cmp	r5, #7
 800b484:	dc04      	bgt.n	800b490 <__hexnan+0xa0>
 800b486:	462a      	mov	r2, r5
 800b488:	4649      	mov	r1, r9
 800b48a:	4620      	mov	r0, r4
 800b48c:	f7ff ff8a 	bl	800b3a4 <L_shift>
 800b490:	4544      	cmp	r4, r8
 800b492:	d936      	bls.n	800b502 <__hexnan+0x112>
 800b494:	f1a8 0204 	sub.w	r2, r8, #4
 800b498:	4623      	mov	r3, r4
 800b49a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b49e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4a2:	429f      	cmp	r7, r3
 800b4a4:	d2f9      	bcs.n	800b49a <__hexnan+0xaa>
 800b4a6:	1b3b      	subs	r3, r7, r4
 800b4a8:	f023 0303 	bic.w	r3, r3, #3
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	3401      	adds	r4, #1
 800b4b0:	3e03      	subs	r6, #3
 800b4b2:	42b4      	cmp	r4, r6
 800b4b4:	bf88      	it	hi
 800b4b6:	2304      	movhi	r3, #4
 800b4b8:	4443      	add	r3, r8
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f843 2b04 	str.w	r2, [r3], #4
 800b4c0:	429f      	cmp	r7, r3
 800b4c2:	d2fb      	bcs.n	800b4bc <__hexnan+0xcc>
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	b91b      	cbnz	r3, 800b4d0 <__hexnan+0xe0>
 800b4c8:	4547      	cmp	r7, r8
 800b4ca:	d128      	bne.n	800b51e <__hexnan+0x12e>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	603b      	str	r3, [r7, #0]
 800b4d0:	2005      	movs	r0, #5
 800b4d2:	b007      	add	sp, #28
 800b4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d8:	3501      	adds	r5, #1
 800b4da:	2d08      	cmp	r5, #8
 800b4dc:	f10b 0b01 	add.w	fp, fp, #1
 800b4e0:	dd06      	ble.n	800b4f0 <__hexnan+0x100>
 800b4e2:	4544      	cmp	r4, r8
 800b4e4:	d9c1      	bls.n	800b46a <__hexnan+0x7a>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4ec:	2501      	movs	r5, #1
 800b4ee:	3c04      	subs	r4, #4
 800b4f0:	6822      	ldr	r2, [r4, #0]
 800b4f2:	f000 000f 	and.w	r0, r0, #15
 800b4f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b4fa:	6020      	str	r0, [r4, #0]
 800b4fc:	e7b5      	b.n	800b46a <__hexnan+0x7a>
 800b4fe:	2508      	movs	r5, #8
 800b500:	e7b3      	b.n	800b46a <__hexnan+0x7a>
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d0dd      	beq.n	800b4c4 <__hexnan+0xd4>
 800b508:	f1c3 0320 	rsb	r3, r3, #32
 800b50c:	f04f 32ff 	mov.w	r2, #4294967295
 800b510:	40da      	lsrs	r2, r3
 800b512:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b516:	4013      	ands	r3, r2
 800b518:	f846 3c04 	str.w	r3, [r6, #-4]
 800b51c:	e7d2      	b.n	800b4c4 <__hexnan+0xd4>
 800b51e:	3f04      	subs	r7, #4
 800b520:	e7d0      	b.n	800b4c4 <__hexnan+0xd4>
 800b522:	2004      	movs	r0, #4
 800b524:	e7d5      	b.n	800b4d2 <__hexnan+0xe2>

0800b526 <__ascii_mbtowc>:
 800b526:	b082      	sub	sp, #8
 800b528:	b901      	cbnz	r1, 800b52c <__ascii_mbtowc+0x6>
 800b52a:	a901      	add	r1, sp, #4
 800b52c:	b142      	cbz	r2, 800b540 <__ascii_mbtowc+0x1a>
 800b52e:	b14b      	cbz	r3, 800b544 <__ascii_mbtowc+0x1e>
 800b530:	7813      	ldrb	r3, [r2, #0]
 800b532:	600b      	str	r3, [r1, #0]
 800b534:	7812      	ldrb	r2, [r2, #0]
 800b536:	1e10      	subs	r0, r2, #0
 800b538:	bf18      	it	ne
 800b53a:	2001      	movne	r0, #1
 800b53c:	b002      	add	sp, #8
 800b53e:	4770      	bx	lr
 800b540:	4610      	mov	r0, r2
 800b542:	e7fb      	b.n	800b53c <__ascii_mbtowc+0x16>
 800b544:	f06f 0001 	mvn.w	r0, #1
 800b548:	e7f8      	b.n	800b53c <__ascii_mbtowc+0x16>

0800b54a <_realloc_r>:
 800b54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b54e:	4680      	mov	r8, r0
 800b550:	4615      	mov	r5, r2
 800b552:	460c      	mov	r4, r1
 800b554:	b921      	cbnz	r1, 800b560 <_realloc_r+0x16>
 800b556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b55a:	4611      	mov	r1, r2
 800b55c:	f7fd bc88 	b.w	8008e70 <_malloc_r>
 800b560:	b92a      	cbnz	r2, 800b56e <_realloc_r+0x24>
 800b562:	f7fd fc11 	bl	8008d88 <_free_r>
 800b566:	2400      	movs	r4, #0
 800b568:	4620      	mov	r0, r4
 800b56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b56e:	f000 f8c4 	bl	800b6fa <_malloc_usable_size_r>
 800b572:	4285      	cmp	r5, r0
 800b574:	4606      	mov	r6, r0
 800b576:	d802      	bhi.n	800b57e <_realloc_r+0x34>
 800b578:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b57c:	d8f4      	bhi.n	800b568 <_realloc_r+0x1e>
 800b57e:	4629      	mov	r1, r5
 800b580:	4640      	mov	r0, r8
 800b582:	f7fd fc75 	bl	8008e70 <_malloc_r>
 800b586:	4607      	mov	r7, r0
 800b588:	2800      	cmp	r0, #0
 800b58a:	d0ec      	beq.n	800b566 <_realloc_r+0x1c>
 800b58c:	42b5      	cmp	r5, r6
 800b58e:	462a      	mov	r2, r5
 800b590:	4621      	mov	r1, r4
 800b592:	bf28      	it	cs
 800b594:	4632      	movcs	r2, r6
 800b596:	f7ff fc43 	bl	800ae20 <memcpy>
 800b59a:	4621      	mov	r1, r4
 800b59c:	4640      	mov	r0, r8
 800b59e:	f7fd fbf3 	bl	8008d88 <_free_r>
 800b5a2:	463c      	mov	r4, r7
 800b5a4:	e7e0      	b.n	800b568 <_realloc_r+0x1e>

0800b5a6 <__ascii_wctomb>:
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	4608      	mov	r0, r1
 800b5aa:	b141      	cbz	r1, 800b5be <__ascii_wctomb+0x18>
 800b5ac:	2aff      	cmp	r2, #255	@ 0xff
 800b5ae:	d904      	bls.n	800b5ba <__ascii_wctomb+0x14>
 800b5b0:	228a      	movs	r2, #138	@ 0x8a
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	4770      	bx	lr
 800b5ba:	700a      	strb	r2, [r1, #0]
 800b5bc:	2001      	movs	r0, #1
 800b5be:	4770      	bx	lr

0800b5c0 <fiprintf>:
 800b5c0:	b40e      	push	{r1, r2, r3}
 800b5c2:	b503      	push	{r0, r1, lr}
 800b5c4:	4601      	mov	r1, r0
 800b5c6:	ab03      	add	r3, sp, #12
 800b5c8:	4805      	ldr	r0, [pc, #20]	@ (800b5e0 <fiprintf+0x20>)
 800b5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ce:	6800      	ldr	r0, [r0, #0]
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	f7ff f991 	bl	800a8f8 <_vfiprintf_r>
 800b5d6:	b002      	add	sp, #8
 800b5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5dc:	b003      	add	sp, #12
 800b5de:	4770      	bx	lr
 800b5e0:	2000001c 	.word	0x2000001c

0800b5e4 <__swhatbuf_r>:
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ec:	2900      	cmp	r1, #0
 800b5ee:	b096      	sub	sp, #88	@ 0x58
 800b5f0:	4615      	mov	r5, r2
 800b5f2:	461e      	mov	r6, r3
 800b5f4:	da0d      	bge.n	800b612 <__swhatbuf_r+0x2e>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b5fc:	f04f 0100 	mov.w	r1, #0
 800b600:	bf14      	ite	ne
 800b602:	2340      	movne	r3, #64	@ 0x40
 800b604:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b608:	2000      	movs	r0, #0
 800b60a:	6031      	str	r1, [r6, #0]
 800b60c:	602b      	str	r3, [r5, #0]
 800b60e:	b016      	add	sp, #88	@ 0x58
 800b610:	bd70      	pop	{r4, r5, r6, pc}
 800b612:	466a      	mov	r2, sp
 800b614:	f000 f848 	bl	800b6a8 <_fstat_r>
 800b618:	2800      	cmp	r0, #0
 800b61a:	dbec      	blt.n	800b5f6 <__swhatbuf_r+0x12>
 800b61c:	9901      	ldr	r1, [sp, #4]
 800b61e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b622:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b626:	4259      	negs	r1, r3
 800b628:	4159      	adcs	r1, r3
 800b62a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b62e:	e7eb      	b.n	800b608 <__swhatbuf_r+0x24>

0800b630 <__smakebuf_r>:
 800b630:	898b      	ldrh	r3, [r1, #12]
 800b632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b634:	079d      	lsls	r5, r3, #30
 800b636:	4606      	mov	r6, r0
 800b638:	460c      	mov	r4, r1
 800b63a:	d507      	bpl.n	800b64c <__smakebuf_r+0x1c>
 800b63c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	6123      	str	r3, [r4, #16]
 800b644:	2301      	movs	r3, #1
 800b646:	6163      	str	r3, [r4, #20]
 800b648:	b003      	add	sp, #12
 800b64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b64c:	ab01      	add	r3, sp, #4
 800b64e:	466a      	mov	r2, sp
 800b650:	f7ff ffc8 	bl	800b5e4 <__swhatbuf_r>
 800b654:	9f00      	ldr	r7, [sp, #0]
 800b656:	4605      	mov	r5, r0
 800b658:	4639      	mov	r1, r7
 800b65a:	4630      	mov	r0, r6
 800b65c:	f7fd fc08 	bl	8008e70 <_malloc_r>
 800b660:	b948      	cbnz	r0, 800b676 <__smakebuf_r+0x46>
 800b662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b666:	059a      	lsls	r2, r3, #22
 800b668:	d4ee      	bmi.n	800b648 <__smakebuf_r+0x18>
 800b66a:	f023 0303 	bic.w	r3, r3, #3
 800b66e:	f043 0302 	orr.w	r3, r3, #2
 800b672:	81a3      	strh	r3, [r4, #12]
 800b674:	e7e2      	b.n	800b63c <__smakebuf_r+0xc>
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	6020      	str	r0, [r4, #0]
 800b67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b67e:	81a3      	strh	r3, [r4, #12]
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b686:	b15b      	cbz	r3, 800b6a0 <__smakebuf_r+0x70>
 800b688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b68c:	4630      	mov	r0, r6
 800b68e:	f000 f81d 	bl	800b6cc <_isatty_r>
 800b692:	b128      	cbz	r0, 800b6a0 <__smakebuf_r+0x70>
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	f043 0301 	orr.w	r3, r3, #1
 800b69e:	81a3      	strh	r3, [r4, #12]
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	431d      	orrs	r5, r3
 800b6a4:	81a5      	strh	r5, [r4, #12]
 800b6a6:	e7cf      	b.n	800b648 <__smakebuf_r+0x18>

0800b6a8 <_fstat_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4d07      	ldr	r5, [pc, #28]	@ (800b6c8 <_fstat_r+0x20>)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	602b      	str	r3, [r5, #0]
 800b6b6:	f7f6 fcbc 	bl	8002032 <_fstat>
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	d102      	bne.n	800b6c4 <_fstat_r+0x1c>
 800b6be:	682b      	ldr	r3, [r5, #0]
 800b6c0:	b103      	cbz	r3, 800b6c4 <_fstat_r+0x1c>
 800b6c2:	6023      	str	r3, [r4, #0]
 800b6c4:	bd38      	pop	{r3, r4, r5, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20000680 	.word	0x20000680

0800b6cc <_isatty_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d06      	ldr	r5, [pc, #24]	@ (800b6e8 <_isatty_r+0x1c>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f6 fcbb 	bl	8002052 <_isatty>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_isatty_r+0x1a>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_isatty_r+0x1a>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	20000680 	.word	0x20000680

0800b6ec <abort>:
 800b6ec:	b508      	push	{r3, lr}
 800b6ee:	2006      	movs	r0, #6
 800b6f0:	f000 f834 	bl	800b75c <raise>
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	f7f6 fc4c 	bl	8001f92 <_exit>

0800b6fa <_malloc_usable_size_r>:
 800b6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6fe:	1f18      	subs	r0, r3, #4
 800b700:	2b00      	cmp	r3, #0
 800b702:	bfbc      	itt	lt
 800b704:	580b      	ldrlt	r3, [r1, r0]
 800b706:	18c0      	addlt	r0, r0, r3
 800b708:	4770      	bx	lr

0800b70a <_raise_r>:
 800b70a:	291f      	cmp	r1, #31
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4605      	mov	r5, r0
 800b710:	460c      	mov	r4, r1
 800b712:	d904      	bls.n	800b71e <_raise_r+0x14>
 800b714:	2316      	movs	r3, #22
 800b716:	6003      	str	r3, [r0, #0]
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	bd38      	pop	{r3, r4, r5, pc}
 800b71e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b720:	b112      	cbz	r2, 800b728 <_raise_r+0x1e>
 800b722:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b726:	b94b      	cbnz	r3, 800b73c <_raise_r+0x32>
 800b728:	4628      	mov	r0, r5
 800b72a:	f000 f831 	bl	800b790 <_getpid_r>
 800b72e:	4622      	mov	r2, r4
 800b730:	4601      	mov	r1, r0
 800b732:	4628      	mov	r0, r5
 800b734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b738:	f000 b818 	b.w	800b76c <_kill_r>
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d00a      	beq.n	800b756 <_raise_r+0x4c>
 800b740:	1c59      	adds	r1, r3, #1
 800b742:	d103      	bne.n	800b74c <_raise_r+0x42>
 800b744:	2316      	movs	r3, #22
 800b746:	6003      	str	r3, [r0, #0]
 800b748:	2001      	movs	r0, #1
 800b74a:	e7e7      	b.n	800b71c <_raise_r+0x12>
 800b74c:	2100      	movs	r1, #0
 800b74e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b752:	4620      	mov	r0, r4
 800b754:	4798      	blx	r3
 800b756:	2000      	movs	r0, #0
 800b758:	e7e0      	b.n	800b71c <_raise_r+0x12>
	...

0800b75c <raise>:
 800b75c:	4b02      	ldr	r3, [pc, #8]	@ (800b768 <raise+0xc>)
 800b75e:	4601      	mov	r1, r0
 800b760:	6818      	ldr	r0, [r3, #0]
 800b762:	f7ff bfd2 	b.w	800b70a <_raise_r>
 800b766:	bf00      	nop
 800b768:	2000001c 	.word	0x2000001c

0800b76c <_kill_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	4d07      	ldr	r5, [pc, #28]	@ (800b78c <_kill_r+0x20>)
 800b770:	2300      	movs	r3, #0
 800b772:	4604      	mov	r4, r0
 800b774:	4608      	mov	r0, r1
 800b776:	4611      	mov	r1, r2
 800b778:	602b      	str	r3, [r5, #0]
 800b77a:	f7f6 fbfa 	bl	8001f72 <_kill>
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	d102      	bne.n	800b788 <_kill_r+0x1c>
 800b782:	682b      	ldr	r3, [r5, #0]
 800b784:	b103      	cbz	r3, 800b788 <_kill_r+0x1c>
 800b786:	6023      	str	r3, [r4, #0]
 800b788:	bd38      	pop	{r3, r4, r5, pc}
 800b78a:	bf00      	nop
 800b78c:	20000680 	.word	0x20000680

0800b790 <_getpid_r>:
 800b790:	f7f6 bbe7 	b.w	8001f62 <_getpid>

0800b794 <_init>:
 800b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b796:	bf00      	nop
 800b798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79a:	bc08      	pop	{r3}
 800b79c:	469e      	mov	lr, r3
 800b79e:	4770      	bx	lr

0800b7a0 <_fini>:
 800b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a2:	bf00      	nop
 800b7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7a6:	bc08      	pop	{r3}
 800b7a8:	469e      	mov	lr, r3
 800b7aa:	4770      	bx	lr
